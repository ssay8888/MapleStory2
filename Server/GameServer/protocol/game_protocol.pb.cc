// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#include "game_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr GameClientLogin::GameClientLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0}){}
struct GameClientLoginDefaultTypeInternal {
  constexpr GameClientLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientLoginDefaultTypeInternal() {}
  union {
    GameClientLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientLoginDefaultTypeInternal _GameClientLogin_default_instance_;
constexpr GameServerLogin::GameServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0}){}
struct GameServerLoginDefaultTypeInternal {
  constexpr GameServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerLoginDefaultTypeInternal() {}
  union {
    GameServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerLoginDefaultTypeInternal _GameServerLogin_default_instance_;
constexpr GameServerLoadCharacter::GameServerLoadCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(int64_t{0})
  , character_id_(int64_t{0})
  , state_(0)

  , gender_(false)
  , face_id_(0)
  , str_(0)
  , dex_(0)
  , int__(0)
  , luk_(0)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , hp_(0)
  , max_hp_(0)
  , mp_(0)
  , max_mp_(0)
  , level_(0)
  , exp_(0)
  , money_(0){}
struct GameServerLoadCharacterDefaultTypeInternal {
  constexpr GameServerLoadCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerLoadCharacterDefaultTypeInternal() {}
  union {
    GameServerLoadCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerLoadCharacterDefaultTypeInternal _GameServerLoadCharacter_default_instance_;
constexpr GameClientLoading::GameClientLoading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0})
  , state_(0)
{}
struct GameClientLoadingDefaultTypeInternal {
  constexpr GameClientLoadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientLoadingDefaultTypeInternal() {}
  union {
    GameClientLoading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientLoadingDefaultTypeInternal _GameClientLoading_default_instance_;
constexpr GameServerRespawnPlayer::GameServerRespawnPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_id_(int64_t{0})
  , gender_(false)
  , face_id_(0)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0){}
struct GameServerRespawnPlayerDefaultTypeInternal {
  constexpr GameServerRespawnPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerRespawnPlayerDefaultTypeInternal() {}
  union {
    GameServerRespawnPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerRespawnPlayerDefaultTypeInternal _GameServerRespawnPlayer_default_instance_;
constexpr GameClientMovePlayer::GameClientMovePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , state_(0)
  , radian_(0){}
struct GameClientMovePlayerDefaultTypeInternal {
  constexpr GameClientMovePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientMovePlayerDefaultTypeInternal() {}
  union {
    GameClientMovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientMovePlayerDefaultTypeInternal _GameClientMovePlayer_default_instance_;
constexpr GameServerMovePlayer::GameServerMovePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , character_id_(int64_t{0})
  , state_(0)
  , radian_(0){}
struct GameServerMovePlayerDefaultTypeInternal {
  constexpr GameServerMovePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMovePlayerDefaultTypeInternal() {}
  union {
    GameServerMovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMovePlayerDefaultTypeInternal _GameServerMovePlayer_default_instance_;
constexpr GameServerRespawnMonster::GameServerRespawnMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_(nullptr)
  , up_(nullptr)
  , look_(nullptr)
  , position_(nullptr)
  , object_id_(int64_t{0})
  , monster_id_(0)
  , hp_(0)
  , is_spawn_(false){}
struct GameServerRespawnMonsterDefaultTypeInternal {
  constexpr GameServerRespawnMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerRespawnMonsterDefaultTypeInternal() {}
  union {
    GameServerRespawnMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerRespawnMonsterDefaultTypeInternal _GameServerRespawnMonster_default_instance_;
constexpr GameServerMoveMonster::GameServerMoveMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_(nullptr)
  , up_(nullptr)
  , look_(nullptr)
  , position_(nullptr)
  , cright_(nullptr)
  , cup_(nullptr)
  , clook_(nullptr)
  , cposition_(nullptr)
  , object_id_(int64_t{0})
  , state_(0)
{}
struct GameServerMoveMonsterDefaultTypeInternal {
  constexpr GameServerMoveMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMoveMonsterDefaultTypeInternal() {}
  union {
    GameServerMoveMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMoveMonsterDefaultTypeInternal _GameServerMoveMonster_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fprotocol_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLogin, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLogin, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, account_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, face_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, str_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, dex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, int__),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, luk_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, max_hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, max_mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, exp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, money_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, face_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, radian_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, radian_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, monster_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, right_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, up_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, look_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, is_spawn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, right_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, up_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, look_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, cright_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, cup_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, clook_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, cposition_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::GameClientLogin)},
  { 6, -1, sizeof(::Protocol::GameServerLogin)},
  { 12, -1, sizeof(::Protocol::GameServerLoadCharacter)},
  { 38, -1, sizeof(::Protocol::GameClientLoading)},
  { 45, -1, sizeof(::Protocol::GameServerRespawnPlayer)},
  { 58, -1, sizeof(::Protocol::GameClientMovePlayer)},
  { 66, -1, sizeof(::Protocol::GameServerMovePlayer)},
  { 75, -1, sizeof(::Protocol::GameServerRespawnMonster)},
  { 88, -1, sizeof(::Protocol::GameServerMoveMonster)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerLoadCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientLoading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerRespawnPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientMovePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerMovePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerRespawnMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerMoveMonster_default_instance_),
};

const char descriptor_table_protodef_game_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023game_protocol.proto\022\010Protocol\032\017game_en"
  "um.proto\032\021game_struct.proto\"\037\n\017GameClien"
  "tLogin\022\014\n\004auth\030\001 \001(\003\"\037\n\017GameServerLogin\022"
  "\014\n\004auth\030\001 \001(\003\"\372\002\n\027GameServerLoadCharacte"
  "r\022#\n\005state\030\001 \001(\0162\024.Protocol.kLoadState\022\022"
  "\n\naccount_id\030\002 \001(\003\022\024\n\014character_id\030\003 \001(\003"
  "\022\014\n\004name\030\004 \001(\014\022\016\n\006gender\030\005 \001(\010\022\017\n\007face_i"
  "d\030\006 \001(\005\022\013\n\003str\030\007 \001(\005\022\013\n\003dex\030\010 \001(\005\022\013\n\003int"
  "\030\t \001(\005\022\013\n\003luk\030\n \001(\005\022\r\n\005pos_x\030\013 \001(\002\022\r\n\005po"
  "s_y\030\014 \001(\002\022\r\n\005pos_z\030\r \001(\002\022\n\n\002hp\030\016 \001(\005\022\016\n\006"
  "max_hp\030\017 \001(\005\022\n\n\002mp\030\020 \001(\005\022\016\n\006max_mp\030\021 \001(\005"
  "\022\r\n\005level\030\022 \001(\005\022\013\n\003exp\030\023 \001(\005\022\r\n\005money\030\024 "
  "\001(\005\022\035\n\005items\030\025 \003(\0132\016.Protocol.item\"F\n\021Ga"
  "meClientLoading\022#\n\005state\030\001 \001(\0162\024.Protoco"
  "l.kLoadState\022\014\n\004auth\030\002 \001(\003\"\252\001\n\027GameServe"
  "rRespawnPlayer\022\024\n\014character_id\030\001 \001(\003\022\014\n\004"
  "name\030\002 \001(\014\022\016\n\006gender\030\003 \001(\010\022\017\n\007face_id\030\004 "
  "\001(\005\022\r\n\005pos_x\030\005 \001(\002\022\r\n\005pos_y\030\006 \001(\002\022\r\n\005pos"
  "_z\030\007 \001(\002\022\035\n\005items\030\010 \003(\0132\016.Protocol.item\""
  "Y\n\024GameClientMovePlayer\022\r\n\005state\030\001 \001(\005\022\016"
  "\n\006radian\030\002 \001(\002\022\"\n\010position\030\003 \001(\0132\020.Proto"
  "col.float3\"o\n\024GameServerMovePlayer\022\024\n\014ch"
  "aracter_id\030\001 \001(\003\022\r\n\005state\030\002 \001(\005\022\016\n\006radia"
  "n\030\003 \001(\002\022\"\n\010position\030\004 \001(\0132\020.Protocol.flo"
  "at3\"\342\001\n\030GameServerRespawnMonster\022\021\n\tobje"
  "ct_id\030\001 \001(\003\022\022\n\nmonster_id\030\002 \001(\005\022\n\n\002hp\030\003 "
  "\001(\005\022\037\n\005right\030\004 \001(\0132\020.Protocol.float3\022\034\n\002"
  "up\030\005 \001(\0132\020.Protocol.float3\022\036\n\004look\030\006 \001(\013"
  "2\020.Protocol.float3\022\"\n\010position\030\007 \001(\0132\020.P"
  "rotocol.float3\022\020\n\010is_spawn\030\010 \001(\010\"\334\002\n\025Gam"
  "eServerMoveMonster\022\021\n\tobject_id\030\001 \001(\003\022&\n"
  "\005state\030\002 \001(\0162\027.Protocol.kMonsterState\022\037\n"
  "\005right\030\003 \001(\0132\020.Protocol.float3\022\034\n\002up\030\004 \001"
  "(\0132\020.Protocol.float3\022\036\n\004look\030\005 \001(\0132\020.Pro"
  "tocol.float3\022\"\n\010position\030\006 \001(\0132\020.Protoco"
  "l.float3\022 \n\006cright\030\007 \001(\0132\020.Protocol.floa"
  "t3\022\035\n\003cup\030\010 \001(\0132\020.Protocol.float3\022\037\n\005clo"
  "ok\030\t \001(\0132\020.Protocol.float3\022#\n\tcposition\030"
  "\n \001(\0132\020.Protocol.float3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_game_5fenum_2eproto,
  &::descriptor_table_game_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto = {
  false, false, 1551, descriptor_table_protodef_game_5fprotocol_2eproto, "game_protocol.proto", 
  &descriptor_table_game_5fprotocol_2eproto_once, descriptor_table_game_5fprotocol_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_game_5fprotocol_2eproto::offsets,
  file_level_metadata_game_5fprotocol_2eproto, file_level_enum_descriptors_game_5fprotocol_2eproto, file_level_service_descriptors_game_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_5fprotocol_2eproto_getter() {
  return &descriptor_table_game_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_5fprotocol_2eproto(&descriptor_table_game_5fprotocol_2eproto);
namespace Protocol {

// ===================================================================

class GameClientLogin::_Internal {
 public:
};

GameClientLogin::GameClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientLogin)
}
GameClientLogin::GameClientLogin(const GameClientLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_ = from.auth_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientLogin)
}

void GameClientLogin::SharedCtor() {
auth_ = int64_t{0};
}

GameClientLogin::~GameClientLogin() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientLogin::ArenaDtor(void* object) {
  GameClientLogin* _this = reinterpret_cast< GameClientLogin* >(object);
  (void)_this;
}
void GameClientLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientLogin)
  return target;
}

size_t GameClientLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientLogin)
    MergeFrom(*source);
  }
}

void GameClientLogin::MergeFrom(const GameClientLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
}

void GameClientLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientLogin::CopyFrom(const GameClientLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientLogin::IsInitialized() const {
  return true;
}

void GameClientLogin::InternalSwap(GameClientLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[0]);
}

// ===================================================================

class GameServerLogin::_Internal {
 public:
};

GameServerLogin::GameServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerLogin)
}
GameServerLogin::GameServerLogin(const GameServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_ = from.auth_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerLogin)
}

void GameServerLogin::SharedCtor() {
auth_ = int64_t{0};
}

GameServerLogin::~GameServerLogin() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerLogin::ArenaDtor(void* object) {
  GameServerLogin* _this = reinterpret_cast< GameServerLogin* >(object);
  (void)_this;
}
void GameServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerLogin)
  return target;
}

size_t GameServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerLogin)
    MergeFrom(*source);
  }
}

void GameServerLogin::MergeFrom(const GameServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
}

void GameServerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerLogin::CopyFrom(const GameServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerLogin::IsInitialized() const {
  return true;
}

void GameServerLogin::InternalSwap(GameServerLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[1]);
}

// ===================================================================

class GameServerLoadCharacter::_Internal {
 public:
};

void GameServerLoadCharacter::clear_items() {
  items_.Clear();
}
GameServerLoadCharacter::GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerLoadCharacter)
}
GameServerLoadCharacter::GameServerLoadCharacter(const GameServerLoadCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerLoadCharacter)
}

void GameServerLoadCharacter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(money_));
}

GameServerLoadCharacter::~GameServerLoadCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerLoadCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerLoadCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerLoadCharacter::ArenaDtor(void* object) {
  GameServerLoadCharacter* _this = reinterpret_cast< GameServerLoadCharacter* >(object);
  (void)_this;
}
void GameServerLoadCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerLoadCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerLoadCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerLoadCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  name_.ClearToEmpty();
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerLoadCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kLoadState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kLoadState>(val));
        } else goto handle_unusual;
        continue;
      // int64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 character_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 face_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          face_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 luk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          luk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_hp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_mp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 money = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.item items = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerLoadCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerLoadCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int64 account_id = 2;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_account_id(), target);
  }

  // int64 character_id = 3;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_character_id(), target);
  }

  // bytes name = 4;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // bool gender = 5;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gender(), target);
  }

  // int32 face_id = 6;
  if (this->face_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_face_id(), target);
  }

  // int32 str = 7;
  if (this->str() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_str(), target);
  }

  // int32 dex = 8;
  if (this->dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dex(), target);
  }

  // int32 int = 9;
  if (this->int_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_int_(), target);
  }

  // int32 luk = 10;
  if (this->luk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_luk(), target);
  }

  // float pos_x = 11;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_pos_x(), target);
  }

  // float pos_y = 12;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_pos_y(), target);
  }

  // float pos_z = 13;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_pos_z(), target);
  }

  // int32 hp = 14;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_hp(), target);
  }

  // int32 max_hp = 15;
  if (this->max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_max_hp(), target);
  }

  // int32 mp = 16;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mp(), target);
  }

  // int32 max_mp = 17;
  if (this->max_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_max_mp(), target);
  }

  // int32 level = 18;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_level(), target);
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_exp(), target);
  }

  // int32 money = 20;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_money(), target);
  }

  // repeated .Protocol.item items = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerLoadCharacter)
  return target;
}

size_t GameServerLoadCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerLoadCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.item items = 21;
  total_size += 2UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 4;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 account_id = 2;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_account_id());
  }

  // int64 character_id = 3;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool gender = 5;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 face_id = 6;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());
  }

  // int32 str = 7;
  if (this->str() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_str());
  }

  // int32 dex = 8;
  if (this->dex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dex());
  }

  // int32 int = 9;
  if (this->int_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_());
  }

  // int32 luk = 10;
  if (this->luk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_luk());
  }

  // float pos_x = 11;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 12;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_z = 13;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hp = 14;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 max_hp = 15;
  if (this->max_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_hp());
  }

  // int32 mp = 16;
  if (this->mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 max_mp = 17;
  if (this->max_mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_mp());
  }

  // int32 level = 18;
  if (this->level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exp());
  }

  // int32 money = 20;
  if (this->money() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerLoadCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerLoadCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerLoadCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerLoadCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerLoadCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerLoadCharacter)
    MergeFrom(*source);
  }
}

void GameServerLoadCharacter::MergeFrom(const GameServerLoadCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerLoadCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.face_id() != 0) {
    _internal_set_face_id(from._internal_face_id());
  }
  if (from.str() != 0) {
    _internal_set_str(from._internal_str());
  }
  if (from.dex() != 0) {
    _internal_set_dex(from._internal_dex());
  }
  if (from.int_() != 0) {
    _internal_set_int_(from._internal_int_());
  }
  if (from.luk() != 0) {
    _internal_set_luk(from._internal_luk());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.max_hp() != 0) {
    _internal_set_max_hp(from._internal_max_hp());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.max_mp() != 0) {
    _internal_set_max_mp(from._internal_max_mp());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void GameServerLoadCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerLoadCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerLoadCharacter::CopyFrom(const GameServerLoadCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerLoadCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerLoadCharacter::IsInitialized() const {
  return true;
}

void GameServerLoadCharacter::InternalSwap(GameServerLoadCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerLoadCharacter, money_)
      + sizeof(GameServerLoadCharacter::money_)
      - PROTOBUF_FIELD_OFFSET(GameServerLoadCharacter, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerLoadCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[2]);
}

// ===================================================================

class GameClientLoading::_Internal {
 public:
};

GameClientLoading::GameClientLoading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientLoading)
}
GameClientLoading::GameClientLoading(const GameClientLoading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auth_, &from.auth_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&auth_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientLoading)
}

void GameClientLoading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&auth_)) + sizeof(state_));
}

GameClientLoading::~GameClientLoading() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientLoading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientLoading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientLoading::ArenaDtor(void* object) {
  GameClientLoading* _this = reinterpret_cast< GameClientLoading* >(object);
  (void)_this;
}
void GameClientLoading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientLoading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientLoading::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientLoading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&auth_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientLoading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kLoadState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kLoadState>(val));
        } else goto handle_unusual;
        continue;
      // int64 auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientLoading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientLoading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int64 auth = 2;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientLoading)
  return target;
}

size_t GameClientLoading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientLoading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 2;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientLoading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientLoading)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientLoading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientLoading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientLoading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientLoading)
    MergeFrom(*source);
  }
}

void GameClientLoading::MergeFrom(const GameClientLoading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientLoading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GameClientLoading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientLoading::CopyFrom(const GameClientLoading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientLoading::IsInitialized() const {
  return true;
}

void GameClientLoading::InternalSwap(GameClientLoading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientLoading, state_)
      + sizeof(GameClientLoading::state_)
      - PROTOBUF_FIELD_OFFSET(GameClientLoading, auth_)>(
          reinterpret_cast<char*>(&auth_),
          reinterpret_cast<char*>(&other->auth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientLoading::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[3]);
}

// ===================================================================

class GameServerRespawnPlayer::_Internal {
 public:
};

void GameServerRespawnPlayer::clear_items() {
  items_.Clear();
}
GameServerRespawnPlayer::GameServerRespawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerRespawnPlayer)
}
GameServerRespawnPlayer::GameServerRespawnPlayer(const GameServerRespawnPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerRespawnPlayer)
}

void GameServerRespawnPlayer::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
}

GameServerRespawnPlayer::~GameServerRespawnPlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerRespawnPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRespawnPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerRespawnPlayer::ArenaDtor(void* object) {
  GameServerRespawnPlayer* _this = reinterpret_cast< GameServerRespawnPlayer* >(object);
  (void)_this;
}
void GameServerRespawnPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRespawnPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRespawnPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerRespawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  name_.ClearToEmpty();
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_z_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRespawnPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 face_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          face_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.item items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRespawnPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerRespawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool gender = 3;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gender(), target);
  }

  // int32 face_id = 4;
  if (this->face_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_face_id(), target);
  }

  // float pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pos_x(), target);
  }

  // float pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pos_y(), target);
  }

  // float pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pos_z(), target);
  }

  // repeated .Protocol.item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerRespawnPlayer)
  return target;
}

size_t GameServerRespawnPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerRespawnPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.item items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // bool gender = 3;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 face_id = 4;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());
  }

  // float pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRespawnPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerRespawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRespawnPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRespawnPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerRespawnPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerRespawnPlayer)
    MergeFrom(*source);
  }
}

void GameServerRespawnPlayer::MergeFrom(const GameServerRespawnPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerRespawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.face_id() != 0) {
    _internal_set_face_id(from._internal_face_id());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
}

void GameServerRespawnPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerRespawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRespawnPlayer::CopyFrom(const GameServerRespawnPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerRespawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRespawnPlayer::IsInitialized() const {
  return true;
}

void GameServerRespawnPlayer::InternalSwap(GameServerRespawnPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerRespawnPlayer, pos_z_)
      + sizeof(GameServerRespawnPlayer::pos_z_)
      - PROTOBUF_FIELD_OFFSET(GameServerRespawnPlayer, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRespawnPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[4]);
}

// ===================================================================

class GameClientMovePlayer::_Internal {
 public:
  static const ::Protocol::float3& position(const GameClientMovePlayer* msg);
};

const ::Protocol::float3&
GameClientMovePlayer::_Internal::position(const GameClientMovePlayer* msg) {
  return *msg->position_;
}
void GameClientMovePlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameClientMovePlayer::GameClientMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientMovePlayer)
}
GameClientMovePlayer::GameClientMovePlayer(const GameClientMovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&state_)) + sizeof(radian_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientMovePlayer)
}

void GameClientMovePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&position_)) + sizeof(radian_));
}

GameClientMovePlayer::~GameClientMovePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientMovePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientMovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GameClientMovePlayer::ArenaDtor(void* object) {
  GameClientMovePlayer* _this = reinterpret_cast< GameClientMovePlayer* >(object);
  (void)_this;
}
void GameClientMovePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientMovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientMovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radian_) -
      reinterpret_cast<char*>(&state_)) + sizeof(radian_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientMovePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientMovePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // float radian = 2;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radian(), target);
  }

  // .Protocol.float3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientMovePlayer)
  return target;
}

size_t GameClientMovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientMovePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float radian = 2;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientMovePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientMovePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientMovePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientMovePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientMovePlayer)
    MergeFrom(*source);
  }
}

void GameClientMovePlayer::MergeFrom(const GameClientMovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.radian() <= 0 && from.radian() >= 0)) {
    _internal_set_radian(from._internal_radian());
  }
}

void GameClientMovePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientMovePlayer::CopyFrom(const GameClientMovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientMovePlayer::IsInitialized() const {
  return true;
}

void GameClientMovePlayer::InternalSwap(GameClientMovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientMovePlayer, radian_)
      + sizeof(GameClientMovePlayer::radian_)
      - PROTOBUF_FIELD_OFFSET(GameClientMovePlayer, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientMovePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[5]);
}

// ===================================================================

class GameServerMovePlayer::_Internal {
 public:
  static const ::Protocol::float3& position(const GameServerMovePlayer* msg);
};

const ::Protocol::float3&
GameServerMovePlayer::_Internal::position(const GameServerMovePlayer* msg) {
  return *msg->position_;
}
void GameServerMovePlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerMovePlayer::GameServerMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerMovePlayer)
}
GameServerMovePlayer::GameServerMovePlayer(const GameServerMovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(radian_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerMovePlayer)
}

void GameServerMovePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&position_)) + sizeof(radian_));
}

GameServerMovePlayer::~GameServerMovePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerMovePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GameServerMovePlayer::ArenaDtor(void* object) {
  GameServerMovePlayer* _this = reinterpret_cast< GameServerMovePlayer* >(object);
  (void)_this;
}
void GameServerMovePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radian_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(radian_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMovePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radian = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMovePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // float radian = 3;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radian(), target);
  }

  // .Protocol.float3 position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerMovePlayer)
  return target;
}

size_t GameServerMovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerMovePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float radian = 3;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMovePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMovePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMovePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerMovePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerMovePlayer)
    MergeFrom(*source);
  }
}

void GameServerMovePlayer::MergeFrom(const GameServerMovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.radian() <= 0 && from.radian() >= 0)) {
    _internal_set_radian(from._internal_radian());
  }
}

void GameServerMovePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMovePlayer::CopyFrom(const GameServerMovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMovePlayer::IsInitialized() const {
  return true;
}

void GameServerMovePlayer::InternalSwap(GameServerMovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMovePlayer, radian_)
      + sizeof(GameServerMovePlayer::radian_)
      - PROTOBUF_FIELD_OFFSET(GameServerMovePlayer, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMovePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[6]);
}

// ===================================================================

class GameServerRespawnMonster::_Internal {
 public:
  static const ::Protocol::float3& right(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& up(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& look(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& position(const GameServerRespawnMonster* msg);
};

const ::Protocol::float3&
GameServerRespawnMonster::_Internal::right(const GameServerRespawnMonster* msg) {
  return *msg->right_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::up(const GameServerRespawnMonster* msg) {
  return *msg->up_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::look(const GameServerRespawnMonster* msg) {
  return *msg->look_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::position(const GameServerRespawnMonster* msg) {
  return *msg->position_;
}
void GameServerRespawnMonster::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
void GameServerRespawnMonster::clear_up() {
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
}
void GameServerRespawnMonster::clear_look() {
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
}
void GameServerRespawnMonster::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerRespawnMonster::GameServerRespawnMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerRespawnMonster)
}
GameServerRespawnMonster::GameServerRespawnMonster(const GameServerRespawnMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_right()) {
    right_ = new ::Protocol::float3(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_up()) {
    up_ = new ::Protocol::float3(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from._internal_has_look()) {
    look_ = new ::Protocol::float3(*from.look_);
  } else {
    look_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_spawn_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(is_spawn_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerRespawnMonster)
}

void GameServerRespawnMonster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&right_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_spawn_) -
    reinterpret_cast<char*>(&right_)) + sizeof(is_spawn_));
}

GameServerRespawnMonster::~GameServerRespawnMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerRespawnMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRespawnMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete look_;
  if (this != internal_default_instance()) delete position_;
}

void GameServerRespawnMonster::ArenaDtor(void* object) {
  GameServerRespawnMonster* _this = reinterpret_cast< GameServerRespawnMonster* >(object);
  (void)_this;
}
void GameServerRespawnMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRespawnMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRespawnMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerRespawnMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_spawn_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(is_spawn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRespawnMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 look = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_look(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_spawn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_spawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRespawnMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerRespawnMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 monster_id = 2;
  if (this->monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monster_id(), target);
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // .Protocol.float3 right = 4;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::right(this), target, stream);
  }

  // .Protocol.float3 up = 5;
  if (this->has_up()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::up(this), target, stream);
  }

  // .Protocol.float3 look = 6;
  if (this->has_look()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::look(this), target, stream);
  }

  // .Protocol.float3 position = 7;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // bool is_spawn = 8;
  if (this->is_spawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_spawn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerRespawnMonster)
  return target;
}

size_t GameServerRespawnMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerRespawnMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 right = 4;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .Protocol.float3 up = 5;
  if (this->has_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *up_);
  }

  // .Protocol.float3 look = 6;
  if (this->has_look()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *look_);
  }

  // .Protocol.float3 position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // int32 monster_id = 2;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monster_id());
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // bool is_spawn = 8;
  if (this->is_spawn() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRespawnMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerRespawnMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRespawnMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRespawnMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerRespawnMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerRespawnMonster)
    MergeFrom(*source);
  }
}

void GameServerRespawnMonster::MergeFrom(const GameServerRespawnMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerRespawnMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_right()) {
    _internal_mutable_right()->::Protocol::float3::MergeFrom(from._internal_right());
  }
  if (from.has_up()) {
    _internal_mutable_up()->::Protocol::float3::MergeFrom(from._internal_up());
  }
  if (from.has_look()) {
    _internal_mutable_look()->::Protocol::float3::MergeFrom(from._internal_look());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.monster_id() != 0) {
    _internal_set_monster_id(from._internal_monster_id());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.is_spawn() != 0) {
    _internal_set_is_spawn(from._internal_is_spawn());
  }
}

void GameServerRespawnMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerRespawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRespawnMonster::CopyFrom(const GameServerRespawnMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerRespawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRespawnMonster::IsInitialized() const {
  return true;
}

void GameServerRespawnMonster::InternalSwap(GameServerRespawnMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerRespawnMonster, is_spawn_)
      + sizeof(GameServerRespawnMonster::is_spawn_)
      - PROTOBUF_FIELD_OFFSET(GameServerRespawnMonster, right_)>(
          reinterpret_cast<char*>(&right_),
          reinterpret_cast<char*>(&other->right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRespawnMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[7]);
}

// ===================================================================

class GameServerMoveMonster::_Internal {
 public:
  static const ::Protocol::float3& right(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& up(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& look(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& position(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& cright(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& cup(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& clook(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& cposition(const GameServerMoveMonster* msg);
};

const ::Protocol::float3&
GameServerMoveMonster::_Internal::right(const GameServerMoveMonster* msg) {
  return *msg->right_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::up(const GameServerMoveMonster* msg) {
  return *msg->up_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::look(const GameServerMoveMonster* msg) {
  return *msg->look_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::position(const GameServerMoveMonster* msg) {
  return *msg->position_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::cright(const GameServerMoveMonster* msg) {
  return *msg->cright_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::cup(const GameServerMoveMonster* msg) {
  return *msg->cup_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::clook(const GameServerMoveMonster* msg) {
  return *msg->clook_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::cposition(const GameServerMoveMonster* msg) {
  return *msg->cposition_;
}
void GameServerMoveMonster::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
void GameServerMoveMonster::clear_up() {
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
}
void GameServerMoveMonster::clear_look() {
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
}
void GameServerMoveMonster::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void GameServerMoveMonster::clear_cright() {
  if (GetArenaForAllocation() == nullptr && cright_ != nullptr) {
    delete cright_;
  }
  cright_ = nullptr;
}
void GameServerMoveMonster::clear_cup() {
  if (GetArenaForAllocation() == nullptr && cup_ != nullptr) {
    delete cup_;
  }
  cup_ = nullptr;
}
void GameServerMoveMonster::clear_clook() {
  if (GetArenaForAllocation() == nullptr && clook_ != nullptr) {
    delete clook_;
  }
  clook_ = nullptr;
}
void GameServerMoveMonster::clear_cposition() {
  if (GetArenaForAllocation() == nullptr && cposition_ != nullptr) {
    delete cposition_;
  }
  cposition_ = nullptr;
}
GameServerMoveMonster::GameServerMoveMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerMoveMonster)
}
GameServerMoveMonster::GameServerMoveMonster(const GameServerMoveMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_right()) {
    right_ = new ::Protocol::float3(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_up()) {
    up_ = new ::Protocol::float3(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from._internal_has_look()) {
    look_ = new ::Protocol::float3(*from.look_);
  } else {
    look_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_cright()) {
    cright_ = new ::Protocol::float3(*from.cright_);
  } else {
    cright_ = nullptr;
  }
  if (from._internal_has_cup()) {
    cup_ = new ::Protocol::float3(*from.cup_);
  } else {
    cup_ = nullptr;
  }
  if (from._internal_has_clook()) {
    clook_ = new ::Protocol::float3(*from.clook_);
  } else {
    clook_ = nullptr;
  }
  if (from._internal_has_cposition()) {
    cposition_ = new ::Protocol::float3(*from.cposition_);
  } else {
    cposition_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerMoveMonster)
}

void GameServerMoveMonster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&right_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&right_)) + sizeof(state_));
}

GameServerMoveMonster::~GameServerMoveMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerMoveMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMoveMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete look_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete cright_;
  if (this != internal_default_instance()) delete cup_;
  if (this != internal_default_instance()) delete clook_;
  if (this != internal_default_instance()) delete cposition_;
}

void GameServerMoveMonster::ArenaDtor(void* object) {
  GameServerMoveMonster* _this = reinterpret_cast< GameServerMoveMonster* >(object);
  (void)_this;
}
void GameServerMoveMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMoveMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMoveMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerMoveMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cright_ != nullptr) {
    delete cright_;
  }
  cright_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cup_ != nullptr) {
    delete cup_;
  }
  cup_ = nullptr;
  if (GetArenaForAllocation() == nullptr && clook_ != nullptr) {
    delete clook_;
  }
  clook_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cposition_ != nullptr) {
    delete cposition_;
  }
  cposition_ = nullptr;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMoveMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.kMonsterState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kMonsterState>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 look = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_look(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 cright = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cright(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 cup = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 clook = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_clook(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 cposition = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cposition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMoveMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerMoveMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.kMonsterState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .Protocol.float3 right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .Protocol.float3 up = 4;
  if (this->has_up()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::up(this), target, stream);
  }

  // .Protocol.float3 look = 5;
  if (this->has_look()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::look(this), target, stream);
  }

  // .Protocol.float3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // .Protocol.float3 cright = 7;
  if (this->has_cright()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cright(this), target, stream);
  }

  // .Protocol.float3 cup = 8;
  if (this->has_cup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cup(this), target, stream);
  }

  // .Protocol.float3 clook = 9;
  if (this->has_clook()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::clook(this), target, stream);
  }

  // .Protocol.float3 cposition = 10;
  if (this->has_cposition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cposition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerMoveMonster)
  return target;
}

size_t GameServerMoveMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerMoveMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .Protocol.float3 up = 4;
  if (this->has_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *up_);
  }

  // .Protocol.float3 look = 5;
  if (this->has_look()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *look_);
  }

  // .Protocol.float3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .Protocol.float3 cright = 7;
  if (this->has_cright()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cright_);
  }

  // .Protocol.float3 cup = 8;
  if (this->has_cup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cup_);
  }

  // .Protocol.float3 clook = 9;
  if (this->has_clook()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clook_);
  }

  // .Protocol.float3 cposition = 10;
  if (this->has_cposition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cposition_);
  }

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // .Protocol.kMonsterState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMoveMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerMoveMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMoveMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMoveMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerMoveMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerMoveMonster)
    MergeFrom(*source);
  }
}

void GameServerMoveMonster::MergeFrom(const GameServerMoveMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerMoveMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_right()) {
    _internal_mutable_right()->::Protocol::float3::MergeFrom(from._internal_right());
  }
  if (from.has_up()) {
    _internal_mutable_up()->::Protocol::float3::MergeFrom(from._internal_up());
  }
  if (from.has_look()) {
    _internal_mutable_look()->::Protocol::float3::MergeFrom(from._internal_look());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.has_cright()) {
    _internal_mutable_cright()->::Protocol::float3::MergeFrom(from._internal_cright());
  }
  if (from.has_cup()) {
    _internal_mutable_cup()->::Protocol::float3::MergeFrom(from._internal_cup());
  }
  if (from.has_clook()) {
    _internal_mutable_clook()->::Protocol::float3::MergeFrom(from._internal_clook());
  }
  if (from.has_cposition()) {
    _internal_mutable_cposition()->::Protocol::float3::MergeFrom(from._internal_cposition());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GameServerMoveMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerMoveMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMoveMonster::CopyFrom(const GameServerMoveMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerMoveMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMoveMonster::IsInitialized() const {
  return true;
}

void GameServerMoveMonster::InternalSwap(GameServerMoveMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMoveMonster, state_)
      + sizeof(GameServerMoveMonster::state_)
      - PROTOBUF_FIELD_OFFSET(GameServerMoveMonster, right_)>(
          reinterpret_cast<char*>(&right_),
          reinterpret_cast<char*>(&other->right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMoveMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::GameClientLogin* Arena::CreateMaybeMessage< ::Protocol::GameClientLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerLogin* Arena::CreateMaybeMessage< ::Protocol::GameServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerLoadCharacter* Arena::CreateMaybeMessage< ::Protocol::GameServerLoadCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerLoadCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientLoading* Arena::CreateMaybeMessage< ::Protocol::GameClientLoading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientLoading >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerRespawnPlayer* Arena::CreateMaybeMessage< ::Protocol::GameServerRespawnPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerRespawnPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientMovePlayer* Arena::CreateMaybeMessage< ::Protocol::GameClientMovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientMovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerMovePlayer* Arena::CreateMaybeMessage< ::Protocol::GameServerMovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerMovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerRespawnMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerRespawnMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerRespawnMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerMoveMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerMoveMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerMoveMonster >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
