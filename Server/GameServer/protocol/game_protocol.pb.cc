// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#include "game_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr GameClientLogin::GameClientLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0}){}
struct GameClientLoginDefaultTypeInternal {
  constexpr GameClientLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientLoginDefaultTypeInternal() {}
  union {
    GameClientLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientLoginDefaultTypeInternal _GameClientLogin_default_instance_;
constexpr GameServerLogin::GameServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0}){}
struct GameServerLoginDefaultTypeInternal {
  constexpr GameServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerLoginDefaultTypeInternal() {}
  union {
    GameServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerLoginDefaultTypeInternal _GameServerLogin_default_instance_;
constexpr GameServerLoadCharacter::GameServerLoadCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , keymap_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(int64_t{0})
  , character_id_(int64_t{0})
  , state_(0)

  , gender_(false)
  , face_id_(0)
  , str_(0)
  , dex_(0)
  , int__(0)
  , luk_(0)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0)
  , hp_(0)
  , max_hp_(0)
  , mp_(0)
  , max_mp_(0)
  , level_(0)
  , exp_(0)
  , money_(0)
  , map_(0)
  , ap_(0){}
struct GameServerLoadCharacterDefaultTypeInternal {
  constexpr GameServerLoadCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerLoadCharacterDefaultTypeInternal() {}
  union {
    GameServerLoadCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerLoadCharacterDefaultTypeInternal _GameServerLoadCharacter_default_instance_;
constexpr GameClientLoading::GameClientLoading(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : auth_(int64_t{0})
  , state_(0)
{}
struct GameClientLoadingDefaultTypeInternal {
  constexpr GameClientLoadingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientLoadingDefaultTypeInternal() {}
  union {
    GameClientLoading _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientLoadingDefaultTypeInternal _GameClientLoading_default_instance_;
constexpr GameServerRespawnPlayer::GameServerRespawnPlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , character_id_(int64_t{0})
  , gender_(false)
  , face_id_(0)
  , pos_x_(0)
  , pos_y_(0)
  , pos_z_(0){}
struct GameServerRespawnPlayerDefaultTypeInternal {
  constexpr GameServerRespawnPlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerRespawnPlayerDefaultTypeInternal() {}
  union {
    GameServerRespawnPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerRespawnPlayerDefaultTypeInternal _GameServerRespawnPlayer_default_instance_;
constexpr GameClientMovePlayer::GameClientMovePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , state_(0)
  , radian_(0){}
struct GameClientMovePlayerDefaultTypeInternal {
  constexpr GameClientMovePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientMovePlayerDefaultTypeInternal() {}
  union {
    GameClientMovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientMovePlayerDefaultTypeInternal _GameClientMovePlayer_default_instance_;
constexpr GameServerMovePlayer::GameServerMovePlayer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , character_id_(int64_t{0})
  , state_(0)
  , radian_(0){}
struct GameServerMovePlayerDefaultTypeInternal {
  constexpr GameServerMovePlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMovePlayerDefaultTypeInternal() {}
  union {
    GameServerMovePlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMovePlayerDefaultTypeInternal _GameServerMovePlayer_default_instance_;
constexpr GameServerRespawnMonster::GameServerRespawnMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_(nullptr)
  , up_(nullptr)
  , look_(nullptr)
  , position_(nullptr)
  , object_id_(int64_t{0})
  , monster_id_(0)
  , hp_(0)
  , is_spawn_(false){}
struct GameServerRespawnMonsterDefaultTypeInternal {
  constexpr GameServerRespawnMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerRespawnMonsterDefaultTypeInternal() {}
  union {
    GameServerRespawnMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerRespawnMonsterDefaultTypeInternal _GameServerRespawnMonster_default_instance_;
constexpr GameServerMoveMonster::GameServerMoveMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : right_(nullptr)
  , up_(nullptr)
  , look_(nullptr)
  , position_(nullptr)
  , object_id_(int64_t{0})
  , state_(0)

  , skillid_(0){}
struct GameServerMoveMonsterDefaultTypeInternal {
  constexpr GameServerMoveMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMoveMonsterDefaultTypeInternal() {}
  union {
    GameServerMoveMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMoveMonsterDefaultTypeInternal _GameServerMoveMonster_default_instance_;
constexpr GameClientTakeDamage::GameClientTakeDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(int64_t{0})
  , monster_obj_id_(int64_t{0}){}
struct GameClientTakeDamageDefaultTypeInternal {
  constexpr GameClientTakeDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientTakeDamageDefaultTypeInternal() {}
  union {
    GameClientTakeDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientTakeDamageDefaultTypeInternal _GameClientTakeDamage_default_instance_;
constexpr GameServerTakeDamage::GameServerTakeDamage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(int64_t{0})
  , monster_obj_id_(int64_t{0})
  , damage_(int64_t{0}){}
struct GameServerTakeDamageDefaultTypeInternal {
  constexpr GameServerTakeDamageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerTakeDamageDefaultTypeInternal() {}
  union {
    GameServerTakeDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerTakeDamageDefaultTypeInternal _GameServerTakeDamage_default_instance_;
constexpr GameServerUpdateStat::GameServerUpdateStat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , value_(0){}
struct GameServerUpdateStatDefaultTypeInternal {
  constexpr GameServerUpdateStatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerUpdateStatDefaultTypeInternal() {}
  union {
    GameServerUpdateStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerUpdateStatDefaultTypeInternal _GameServerUpdateStat_default_instance_;
constexpr GameClientAttackMonster::GameClientAttackMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : monster_obj_id_()
  , _monster_obj_id_cached_byte_size_(){}
struct GameClientAttackMonsterDefaultTypeInternal {
  constexpr GameClientAttackMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientAttackMonsterDefaultTypeInternal() {}
  union {
    GameClientAttackMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientAttackMonsterDefaultTypeInternal _GameClientAttackMonster_default_instance_;
constexpr GameServerAttackMonster::GameServerAttackMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : damages_()
  , character_id_(int64_t{0}){}
struct GameServerAttackMonsterDefaultTypeInternal {
  constexpr GameServerAttackMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerAttackMonsterDefaultTypeInternal() {}
  union {
    GameServerAttackMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerAttackMonsterDefaultTypeInternal _GameServerAttackMonster_default_instance_;
constexpr GameServerMonsterStatUpdate::GameServerMonsterStatUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : monster_obj_id_(int64_t{0})
  , type_(0)

  , value_(0){}
struct GameServerMonsterStatUpdateDefaultTypeInternal {
  constexpr GameServerMonsterStatUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerMonsterStatUpdateDefaultTypeInternal() {}
  union {
    GameServerMonsterStatUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerMonsterStatUpdateDefaultTypeInternal _GameServerMonsterStatUpdate_default_instance_;
constexpr GameServerKillMonster::GameServerKillMonster(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : monster_obj_id_(int64_t{0}){}
struct GameServerKillMonsterDefaultTypeInternal {
  constexpr GameServerKillMonsterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerKillMonsterDefaultTypeInternal() {}
  union {
    GameServerKillMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerKillMonsterDefaultTypeInternal _GameServerKillMonster_default_instance_;
constexpr GameClientInventoryItemMove::GameClientInventoryItemMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : move_type_(0)

  , type_(0)

  , src_(0)
  , dst_(0){}
struct GameClientInventoryItemMoveDefaultTypeInternal {
  constexpr GameClientInventoryItemMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientInventoryItemMoveDefaultTypeInternal() {}
  union {
    GameClientInventoryItemMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientInventoryItemMoveDefaultTypeInternal _GameClientInventoryItemMove_default_instance_;
constexpr GameServerDressChange::GameServerDressChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_id_(int64_t{0})
  , item_type_(0)
  , item_id_(0){}
struct GameServerDressChangeDefaultTypeInternal {
  constexpr GameServerDressChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerDressChangeDefaultTypeInternal() {}
  union {
    GameServerDressChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerDressChangeDefaultTypeInternal _GameServerDressChange_default_instance_;
constexpr GameClientStatUp::GameClientStatUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)
{}
struct GameClientStatUpDefaultTypeInternal {
  constexpr GameClientStatUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientStatUpDefaultTypeInternal() {}
  union {
    GameClientStatUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientStatUpDefaultTypeInternal _GameClientStatUp_default_instance_;
constexpr GameServerStatUp::GameServerStatUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , value_(0)
  , ap_value_(0){}
struct GameServerStatUpDefaultTypeInternal {
  constexpr GameServerStatUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerStatUpDefaultTypeInternal() {}
  union {
    GameServerStatUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerStatUpDefaultTypeInternal _GameServerStatUp_default_instance_;
constexpr GameClientKeySet::GameClientKeySet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_value_(0)
  , type_(0)

  , value_(0){}
struct GameClientKeySetDefaultTypeInternal {
  constexpr GameClientKeySetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientKeySetDefaultTypeInternal() {}
  union {
    GameClientKeySet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientKeySetDefaultTypeInternal _GameClientKeySet_default_instance_;
constexpr GameClientItemApply::GameClientItemApply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , position_(0){}
struct GameClientItemApplyDefaultTypeInternal {
  constexpr GameClientItemApplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientItemApplyDefaultTypeInternal() {}
  union {
    GameClientItemApply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientItemApplyDefaultTypeInternal _GameClientItemApply_default_instance_;
constexpr GameServerItemQuantityUpdate::GameServerItemQuantityUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , position_(0)
  , quantity_(0){}
struct GameServerItemQuantityUpdateDefaultTypeInternal {
  constexpr GameServerItemQuantityUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerItemQuantityUpdateDefaultTypeInternal() {}
  union {
    GameServerItemQuantityUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerItemQuantityUpdateDefaultTypeInternal _GameServerItemQuantityUpdate_default_instance_;
constexpr GameClientResurrection::GameClientResurrection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameClientResurrectionDefaultTypeInternal {
  constexpr GameClientResurrectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientResurrectionDefaultTypeInternal() {}
  union {
    GameClientResurrection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientResurrectionDefaultTypeInternal _GameClientResurrection_default_instance_;
constexpr GameServerResurrection::GameServerResurrection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , character_id_(int64_t{0}){}
struct GameServerResurrectionDefaultTypeInternal {
  constexpr GameServerResurrectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerResurrectionDefaultTypeInternal() {}
  union {
    GameServerResurrection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerResurrectionDefaultTypeInternal _GameServerResurrection_default_instance_;
constexpr GameClientSpRecovery::GameClientSpRecovery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GameClientSpRecoveryDefaultTypeInternal {
  constexpr GameClientSpRecoveryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientSpRecoveryDefaultTypeInternal() {}
  union {
    GameClientSpRecovery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientSpRecoveryDefaultTypeInternal _GameClientSpRecovery_default_instance_;
constexpr GameClientApplySkill::GameClientApplySkill(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : skillid_(0){}
struct GameClientApplySkillDefaultTypeInternal {
  constexpr GameClientApplySkillDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientApplySkillDefaultTypeInternal() {}
  union {
    GameClientApplySkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientApplySkillDefaultTypeInternal _GameClientApplySkill_default_instance_;
constexpr GameClientChat::GameClientChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameClientChatDefaultTypeInternal {
  constexpr GameClientChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameClientChatDefaultTypeInternal() {}
  union {
    GameClientChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameClientChatDefaultTypeInternal _GameClientChat_default_instance_;
constexpr GameServerChat::GameServerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : contents_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GameServerChatDefaultTypeInternal {
  constexpr GameServerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GameServerChatDefaultTypeInternal() {}
  union {
    GameServerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GameServerChatDefaultTypeInternal _GameServerChat_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_game_5fprotocol_2eproto[29];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_game_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_game_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_game_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLogin, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLogin, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, account_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, face_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, str_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, dex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, int__),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, luk_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, pos_z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, max_hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, max_mp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, level_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, exp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, money_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, map_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, ap_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, items_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerLoadCharacter, keymap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientLoading, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, face_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_x_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_y_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, pos_z_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnPlayer, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, radian_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientMovePlayer, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, radian_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMovePlayer, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, monster_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, hp_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, right_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, up_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, look_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerRespawnMonster, is_spawn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, object_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, state_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, right_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, up_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, look_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMoveMonster, skillid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientTakeDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientTakeDamage, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientTakeDamage, monster_obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerTakeDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerTakeDamage, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerTakeDamage, monster_obj_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerTakeDamage, damage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerUpdateStat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerUpdateStat, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerUpdateStat, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientAttackMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientAttackMonster, monster_obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerAttackMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerAttackMonster, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerAttackMonster, damages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMonsterStatUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMonsterStatUpdate, monster_obj_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMonsterStatUpdate, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerMonsterStatUpdate, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerKillMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerKillMonster, monster_obj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientInventoryItemMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientInventoryItemMove, move_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientInventoryItemMove, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientInventoryItemMove, src_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientInventoryItemMove, dst_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerDressChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerDressChange, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerDressChange, item_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerDressChange, item_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientStatUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientStatUp, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerStatUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerStatUp, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerStatUp, value_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerStatUp, ap_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientKeySet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientKeySet, key_value_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientKeySet, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientKeySet, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientItemApply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientItemApply, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientItemApply, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerItemQuantityUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerItemQuantityUpdate, type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerItemQuantityUpdate, position_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerItemQuantityUpdate, quantity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientResurrection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerResurrection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerResurrection, character_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerResurrection, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientSpRecovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientApplySkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientApplySkill, skillid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameClientChat, contents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::GameServerChat, contents_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::GameClientLogin)},
  { 6, -1, sizeof(::Protocol::GameServerLogin)},
  { 12, -1, sizeof(::Protocol::GameServerLoadCharacter)},
  { 41, -1, sizeof(::Protocol::GameClientLoading)},
  { 48, -1, sizeof(::Protocol::GameServerRespawnPlayer)},
  { 61, -1, sizeof(::Protocol::GameClientMovePlayer)},
  { 69, -1, sizeof(::Protocol::GameServerMovePlayer)},
  { 78, -1, sizeof(::Protocol::GameServerRespawnMonster)},
  { 91, -1, sizeof(::Protocol::GameServerMoveMonster)},
  { 103, -1, sizeof(::Protocol::GameClientTakeDamage)},
  { 110, -1, sizeof(::Protocol::GameServerTakeDamage)},
  { 118, -1, sizeof(::Protocol::GameServerUpdateStat)},
  { 125, -1, sizeof(::Protocol::GameClientAttackMonster)},
  { 131, -1, sizeof(::Protocol::GameServerAttackMonster)},
  { 138, -1, sizeof(::Protocol::GameServerMonsterStatUpdate)},
  { 146, -1, sizeof(::Protocol::GameServerKillMonster)},
  { 152, -1, sizeof(::Protocol::GameClientInventoryItemMove)},
  { 161, -1, sizeof(::Protocol::GameServerDressChange)},
  { 169, -1, sizeof(::Protocol::GameClientStatUp)},
  { 175, -1, sizeof(::Protocol::GameServerStatUp)},
  { 183, -1, sizeof(::Protocol::GameClientKeySet)},
  { 191, -1, sizeof(::Protocol::GameClientItemApply)},
  { 198, -1, sizeof(::Protocol::GameServerItemQuantityUpdate)},
  { 206, -1, sizeof(::Protocol::GameClientResurrection)},
  { 211, -1, sizeof(::Protocol::GameServerResurrection)},
  { 218, -1, sizeof(::Protocol::GameClientSpRecovery)},
  { 223, -1, sizeof(::Protocol::GameClientApplySkill)},
  { 229, -1, sizeof(::Protocol::GameClientChat)},
  { 235, -1, sizeof(::Protocol::GameServerChat)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerLoadCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientLoading_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerRespawnPlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientMovePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerMovePlayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerRespawnMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerMoveMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientTakeDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerTakeDamage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerUpdateStat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientAttackMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerAttackMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerMonsterStatUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerKillMonster_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientInventoryItemMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerDressChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientStatUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerStatUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientKeySet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientItemApply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerItemQuantityUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientResurrection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerResurrection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientSpRecovery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientApplySkill_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameClientChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_GameServerChat_default_instance_),
};

const char descriptor_table_protodef_game_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023game_protocol.proto\022\010Protocol\032\017game_en"
  "um.proto\032\021game_struct.proto\"\037\n\017GameClien"
  "tLogin\022\014\n\004auth\030\001 \001(\003\"\037\n\017GameServerLogin\022"
  "\014\n\004auth\030\001 \001(\003\"\265\003\n\027GameServerLoadCharacte"
  "r\022#\n\005state\030\001 \001(\0162\024.Protocol.kLoadState\022\022"
  "\n\naccount_id\030\002 \001(\003\022\024\n\014character_id\030\003 \001(\003"
  "\022\014\n\004name\030\004 \001(\014\022\016\n\006gender\030\005 \001(\010\022\017\n\007face_i"
  "d\030\006 \001(\005\022\013\n\003str\030\007 \001(\005\022\013\n\003dex\030\010 \001(\005\022\013\n\003int"
  "\030\t \001(\005\022\013\n\003luk\030\n \001(\005\022\r\n\005pos_x\030\013 \001(\002\022\r\n\005po"
  "s_y\030\014 \001(\002\022\r\n\005pos_z\030\r \001(\002\022\n\n\002hp\030\016 \001(\005\022\016\n\006"
  "max_hp\030\017 \001(\005\022\n\n\002mp\030\020 \001(\005\022\016\n\006max_mp\030\021 \001(\005"
  "\022\r\n\005level\030\022 \001(\005\022\013\n\003exp\030\023 \001(\005\022\r\n\005money\030\024 "
  "\001(\005\022\013\n\003map\030\025 \001(\005\022\n\n\002ap\030\026 \001(\005\022\035\n\005items\030\027 "
  "\003(\0132\016.Protocol.item\022 \n\006keymap\030\030 \003(\0132\020.Pr"
  "otocol.keymap\"F\n\021GameClientLoading\022#\n\005st"
  "ate\030\001 \001(\0162\024.Protocol.kLoadState\022\014\n\004auth\030"
  "\002 \001(\003\"\252\001\n\027GameServerRespawnPlayer\022\024\n\014cha"
  "racter_id\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\022\016\n\006gender\030"
  "\003 \001(\010\022\017\n\007face_id\030\004 \001(\005\022\r\n\005pos_x\030\005 \001(\002\022\r\n"
  "\005pos_y\030\006 \001(\002\022\r\n\005pos_z\030\007 \001(\002\022\035\n\005items\030\010 \003"
  "(\0132\016.Protocol.item\"Y\n\024GameClientMovePlay"
  "er\022\r\n\005state\030\001 \001(\005\022\016\n\006radian\030\002 \001(\002\022\"\n\010pos"
  "ition\030\003 \001(\0132\020.Protocol.float3\"o\n\024GameSer"
  "verMovePlayer\022\024\n\014character_id\030\001 \001(\003\022\r\n\005s"
  "tate\030\002 \001(\005\022\016\n\006radian\030\003 \001(\002\022\"\n\010position\030\004"
  " \001(\0132\020.Protocol.float3\"\342\001\n\030GameServerRes"
  "pawnMonster\022\021\n\tobject_id\030\001 \001(\003\022\022\n\nmonste"
  "r_id\030\002 \001(\005\022\n\n\002hp\030\003 \001(\005\022\037\n\005right\030\004 \001(\0132\020."
  "Protocol.float3\022\034\n\002up\030\005 \001(\0132\020.Protocol.f"
  "loat3\022\036\n\004look\030\006 \001(\0132\020.Protocol.float3\022\"\n"
  "\010position\030\007 \001(\0132\020.Protocol.float3\022\020\n\010is_"
  "spawn\030\010 \001(\010\"\346\001\n\025GameServerMoveMonster\022\021\n"
  "\tobject_id\030\001 \001(\003\022&\n\005state\030\002 \001(\0162\027.Protoc"
  "ol.kMonsterState\022\037\n\005right\030\003 \001(\0132\020.Protoc"
  "ol.float3\022\034\n\002up\030\004 \001(\0132\020.Protocol.float3\022"
  "\036\n\004look\030\005 \001(\0132\020.Protocol.float3\022\"\n\010posit"
  "ion\030\006 \001(\0132\020.Protocol.float3\022\017\n\007skillId\030\007"
  " \001(\005\"D\n\024GameClientTakeDamage\022\024\n\014characte"
  "r_id\030\001 \001(\003\022\026\n\016monster_obj_id\030\002 \001(\003\"T\n\024Ga"
  "meServerTakeDamage\022\024\n\014character_id\030\001 \001(\003"
  "\022\026\n\016monster_obj_id\030\002 \001(\003\022\016\n\006damage\030\003 \001(\003"
  "\"N\n\024GameServerUpdateStat\022\'\n\004type\030\001 \001(\0162\031"
  ".Protocol.kPlayerStatType\022\r\n\005value\030\002 \001(\005"
  "\"1\n\027GameClientAttackMonster\022\026\n\016monster_o"
  "bj_id\030\001 \003(\003\"Y\n\027GameServerAttackMonster\022\024"
  "\n\014character_id\030\001 \001(\003\022(\n\007damages\030\002 \003(\0132\027."
  "Protocol.AttackMonster\"n\n\033GameServerMons"
  "terStatUpdate\022\026\n\016monster_obj_id\030\001 \001(\003\022(\n"
  "\004type\030\002 \001(\0162\032.Protocol.kMonsterStatType\022"
  "\r\n\005value\030\003 \001(\005\"/\n\025GameServerKillMonster\022"
  "\026\n\016monster_obj_id\030\001 \001(\003\"\224\001\n\033GameClientIn"
  "ventoryItemMove\0223\n\tmove_type\030\001 \001(\0162 .Pro"
  "tocol.kInventoryItemMoveType\022&\n\004type\030\002 \001"
  "(\0162\030.Protocol.kInventoryType\022\013\n\003src\030\003 \001("
  "\005\022\013\n\003dst\030\004 \001(\005\"Q\n\025GameServerDressChange\022"
  "\024\n\014character_id\030\001 \001(\003\022\021\n\titem_type\030\002 \001(\005"
  "\022\017\n\007item_id\030\003 \001(\005\"5\n\020GameClientStatUp\022!\n"
  "\004type\030\001 \001(\0162\023.Protocol.kStatType\"V\n\020Game"
  "ServerStatUp\022!\n\004type\030\001 \001(\0162\023.Protocol.kS"
  "tatType\022\r\n\005value\030\002 \001(\005\022\020\n\010ap_value\030\003 \001(\005"
  "\"Y\n\020GameClientKeySet\022\021\n\tkey_value\030\001 \001(\005\022"
  "#\n\004type\030\002 \001(\0162\025.Protocol.kKeySetType\022\r\n\005"
  "value\030\003 \001(\005\"O\n\023GameClientItemApply\022&\n\004ty"
  "pe\030\001 \001(\0162\030.Protocol.kInventoryType\022\020\n\010po"
  "sition\030\002 \001(\005\"j\n\034GameServerItemQuantityUp"
  "date\022&\n\004type\030\001 \001(\0162\030.Protocol.kInventory"
  "Type\022\020\n\010position\030\002 \001(\005\022\020\n\010quantity\030\003 \001(\005"
  "\"\030\n\026GameClientResurrection\"R\n\026GameServer"
  "Resurrection\022\024\n\014character_id\030\001 \001(\003\022\"\n\010po"
  "sition\030\002 \001(\0132\020.Protocol.float3\"\026\n\024GameCl"
  "ientSpRecovery\"\'\n\024GameClientApplySkill\022\017"
  "\n\007skillid\030\001 \001(\005\"\"\n\016GameClientChat\022\020\n\010con"
  "tents\030\001 \001(\014\"\"\n\016GameServerChat\022\020\n\010content"
  "s\030\001 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_game_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_game_5fenum_2eproto,
  &::descriptor_table_game_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_game_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto = {
  false, false, 2935, descriptor_table_protodef_game_5fprotocol_2eproto, "game_protocol.proto", 
  &descriptor_table_game_5fprotocol_2eproto_once, descriptor_table_game_5fprotocol_2eproto_deps, 2, 29,
  schemas, file_default_instances, TableStruct_game_5fprotocol_2eproto::offsets,
  file_level_metadata_game_5fprotocol_2eproto, file_level_enum_descriptors_game_5fprotocol_2eproto, file_level_service_descriptors_game_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_game_5fprotocol_2eproto_getter() {
  return &descriptor_table_game_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_game_5fprotocol_2eproto(&descriptor_table_game_5fprotocol_2eproto);
namespace Protocol {

// ===================================================================

class GameClientLogin::_Internal {
 public:
};

GameClientLogin::GameClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientLogin)
}
GameClientLogin::GameClientLogin(const GameClientLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_ = from.auth_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientLogin)
}

void GameClientLogin::SharedCtor() {
auth_ = int64_t{0};
}

GameClientLogin::~GameClientLogin() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientLogin::ArenaDtor(void* object) {
  GameClientLogin* _this = reinterpret_cast< GameClientLogin* >(object);
  (void)_this;
}
void GameClientLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientLogin)
  return target;
}

size_t GameClientLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientLogin)
    MergeFrom(*source);
  }
}

void GameClientLogin::MergeFrom(const GameClientLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
}

void GameClientLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientLogin::CopyFrom(const GameClientLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientLogin::IsInitialized() const {
  return true;
}

void GameClientLogin::InternalSwap(GameClientLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[0]);
}

// ===================================================================

class GameServerLogin::_Internal {
 public:
};

GameServerLogin::GameServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerLogin)
}
GameServerLogin::GameServerLogin(const GameServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  auth_ = from.auth_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerLogin)
}

void GameServerLogin::SharedCtor() {
auth_ = int64_t{0};
}

GameServerLogin::~GameServerLogin() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerLogin::ArenaDtor(void* object) {
  GameServerLogin* _this = reinterpret_cast< GameServerLogin* >(object);
  (void)_this;
}
void GameServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auth_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 auth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerLogin)
  return target;
}

size_t GameServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 1;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerLogin)
    MergeFrom(*source);
  }
}

void GameServerLogin::MergeFrom(const GameServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
}

void GameServerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerLogin::CopyFrom(const GameServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerLogin::IsInitialized() const {
  return true;
}

void GameServerLogin::InternalSwap(GameServerLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(auth_, other->auth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[1]);
}

// ===================================================================

class GameServerLoadCharacter::_Internal {
 public:
};

void GameServerLoadCharacter::clear_items() {
  items_.Clear();
}
void GameServerLoadCharacter::clear_keymap() {
  keymap_.Clear();
}
GameServerLoadCharacter::GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena),
  keymap_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerLoadCharacter)
}
GameServerLoadCharacter::GameServerLoadCharacter(const GameServerLoadCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_),
      keymap_(from.keymap_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(ap_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerLoadCharacter)
}

void GameServerLoadCharacter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ap_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(ap_));
}

GameServerLoadCharacter::~GameServerLoadCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerLoadCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerLoadCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerLoadCharacter::ArenaDtor(void* object) {
  GameServerLoadCharacter* _this = reinterpret_cast< GameServerLoadCharacter* >(object);
  (void)_this;
}
void GameServerLoadCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerLoadCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerLoadCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerLoadCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  keymap_.Clear();
  name_.ClearToEmpty();
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(ap_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerLoadCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kLoadState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kLoadState>(val));
        } else goto handle_unusual;
        continue;
      // int64 account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 character_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 face_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          face_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 str = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          int__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 luk = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          luk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 hp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_hp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          max_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 mp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_mp = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_mp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 level = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 exp = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 money = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 map = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ap = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.item items = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.keymap keymap = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_keymap(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerLoadCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerLoadCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int64 account_id = 2;
  if (this->account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_account_id(), target);
  }

  // int64 character_id = 3;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_character_id(), target);
  }

  // bytes name = 4;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_name(), target);
  }

  // bool gender = 5;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_gender(), target);
  }

  // int32 face_id = 6;
  if (this->face_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_face_id(), target);
  }

  // int32 str = 7;
  if (this->str() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_str(), target);
  }

  // int32 dex = 8;
  if (this->dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_dex(), target);
  }

  // int32 int = 9;
  if (this->int_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_int_(), target);
  }

  // int32 luk = 10;
  if (this->luk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_luk(), target);
  }

  // float pos_x = 11;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_pos_x(), target);
  }

  // float pos_y = 12;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_pos_y(), target);
  }

  // float pos_z = 13;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_pos_z(), target);
  }

  // int32 hp = 14;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_hp(), target);
  }

  // int32 max_hp = 15;
  if (this->max_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_max_hp(), target);
  }

  // int32 mp = 16;
  if (this->mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_mp(), target);
  }

  // int32 max_mp = 17;
  if (this->max_mp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->_internal_max_mp(), target);
  }

  // int32 level = 18;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_level(), target);
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_exp(), target);
  }

  // int32 money = 20;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_money(), target);
  }

  // int32 map = 21;
  if (this->map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->_internal_map(), target);
  }

  // int32 ap = 22;
  if (this->ap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_ap(), target);
  }

  // repeated .Protocol.item items = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_items(i), target, stream);
  }

  // repeated .Protocol.keymap keymap = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keymap_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_keymap(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerLoadCharacter)
  return target;
}

size_t GameServerLoadCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerLoadCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.item items = 23;
  total_size += 2UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Protocol.keymap keymap = 24;
  total_size += 2UL * this->_internal_keymap_size();
  for (const auto& msg : this->keymap_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 4;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 account_id = 2;
  if (this->account_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_account_id());
  }

  // int64 character_id = 3;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool gender = 5;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 face_id = 6;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());
  }

  // int32 str = 7;
  if (this->str() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_str());
  }

  // int32 dex = 8;
  if (this->dex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dex());
  }

  // int32 int = 9;
  if (this->int_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_int_());
  }

  // int32 luk = 10;
  if (this->luk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_luk());
  }

  // float pos_x = 11;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 12;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_z = 13;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 hp = 14;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // int32 max_hp = 15;
  if (this->max_hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_hp());
  }

  // int32 mp = 16;
  if (this->mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mp());
  }

  // int32 max_mp = 17;
  if (this->max_mp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_mp());
  }

  // int32 level = 18;
  if (this->level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_level());
  }

  // int32 exp = 19;
  if (this->exp() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_exp());
  }

  // int32 money = 20;
  if (this->money() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_money());
  }

  // int32 map = 21;
  if (this->map() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_map());
  }

  // int32 ap = 22;
  if (this->ap() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ap());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerLoadCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerLoadCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerLoadCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerLoadCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerLoadCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerLoadCharacter)
    MergeFrom(*source);
  }
}

void GameServerLoadCharacter::MergeFrom(const GameServerLoadCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerLoadCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  keymap_.MergeFrom(from.keymap_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.account_id() != 0) {
    _internal_set_account_id(from._internal_account_id());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.face_id() != 0) {
    _internal_set_face_id(from._internal_face_id());
  }
  if (from.str() != 0) {
    _internal_set_str(from._internal_str());
  }
  if (from.dex() != 0) {
    _internal_set_dex(from._internal_dex());
  }
  if (from.int_() != 0) {
    _internal_set_int_(from._internal_int_());
  }
  if (from.luk() != 0) {
    _internal_set_luk(from._internal_luk());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.max_hp() != 0) {
    _internal_set_max_hp(from._internal_max_hp());
  }
  if (from.mp() != 0) {
    _internal_set_mp(from._internal_mp());
  }
  if (from.max_mp() != 0) {
    _internal_set_max_mp(from._internal_max_mp());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.exp() != 0) {
    _internal_set_exp(from._internal_exp());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
  if (from.map() != 0) {
    _internal_set_map(from._internal_map());
  }
  if (from.ap() != 0) {
    _internal_set_ap(from._internal_ap());
  }
}

void GameServerLoadCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerLoadCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerLoadCharacter::CopyFrom(const GameServerLoadCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerLoadCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerLoadCharacter::IsInitialized() const {
  return true;
}

void GameServerLoadCharacter::InternalSwap(GameServerLoadCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  keymap_.InternalSwap(&other->keymap_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerLoadCharacter, ap_)
      + sizeof(GameServerLoadCharacter::ap_)
      - PROTOBUF_FIELD_OFFSET(GameServerLoadCharacter, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerLoadCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[2]);
}

// ===================================================================

class GameClientLoading::_Internal {
 public:
};

GameClientLoading::GameClientLoading(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientLoading)
}
GameClientLoading::GameClientLoading(const GameClientLoading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&auth_, &from.auth_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&auth_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientLoading)
}

void GameClientLoading::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&auth_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&auth_)) + sizeof(state_));
}

GameClientLoading::~GameClientLoading() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientLoading)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientLoading::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientLoading::ArenaDtor(void* object) {
  GameClientLoading* _this = reinterpret_cast< GameClientLoading* >(object);
  (void)_this;
}
void GameClientLoading::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientLoading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientLoading::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientLoading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&auth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&auth_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientLoading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kLoadState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kLoadState>(val));
        } else goto handle_unusual;
        continue;
      // int64 auth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientLoading::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientLoading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int64 auth = 2;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientLoading)
  return target;
}

size_t GameClientLoading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientLoading)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 auth = 2;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  // .Protocol.kLoadState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientLoading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientLoading)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientLoading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientLoading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientLoading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientLoading)
    MergeFrom(*source);
  }
}

void GameClientLoading::MergeFrom(const GameClientLoading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientLoading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void GameClientLoading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientLoading::CopyFrom(const GameClientLoading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientLoading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientLoading::IsInitialized() const {
  return true;
}

void GameClientLoading::InternalSwap(GameClientLoading* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientLoading, state_)
      + sizeof(GameClientLoading::state_)
      - PROTOBUF_FIELD_OFFSET(GameClientLoading, auth_)>(
          reinterpret_cast<char*>(&auth_),
          reinterpret_cast<char*>(&other->auth_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientLoading::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[3]);
}

// ===================================================================

class GameServerRespawnPlayer::_Internal {
 public:
};

void GameServerRespawnPlayer::clear_items() {
  items_.Clear();
}
GameServerRespawnPlayer::GameServerRespawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  items_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerRespawnPlayer)
}
GameServerRespawnPlayer::GameServerRespawnPlayer(const GameServerRespawnPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerRespawnPlayer)
}

void GameServerRespawnPlayer::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pos_z_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
}

GameServerRespawnPlayer::~GameServerRespawnPlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerRespawnPlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRespawnPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerRespawnPlayer::ArenaDtor(void* object) {
  GameServerRespawnPlayer* _this = reinterpret_cast< GameServerRespawnPlayer* >(object);
  (void)_this;
}
void GameServerRespawnPlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRespawnPlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRespawnPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerRespawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  name_.ClearToEmpty();
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pos_z_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(pos_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRespawnPlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 face_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          face_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float pos_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float pos_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          pos_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.item items = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRespawnPlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerRespawnPlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool gender = 3;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_gender(), target);
  }

  // int32 face_id = 4;
  if (this->face_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_face_id(), target);
  }

  // float pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_pos_x(), target);
  }

  // float pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_pos_y(), target);
  }

  // float pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_pos_z(), target);
  }

  // repeated .Protocol.item items = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerRespawnPlayer)
  return target;
}

size_t GameServerRespawnPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerRespawnPlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.item items = 8;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // bool gender = 3;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 face_id = 4;
  if (this->face_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_face_id());
  }

  // float pos_x = 5;
  if (!(this->pos_x() <= 0 && this->pos_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_y = 6;
  if (!(this->pos_y() <= 0 && this->pos_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float pos_z = 7;
  if (!(this->pos_z() <= 0 && this->pos_z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRespawnPlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerRespawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRespawnPlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRespawnPlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerRespawnPlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerRespawnPlayer)
    MergeFrom(*source);
  }
}

void GameServerRespawnPlayer::MergeFrom(const GameServerRespawnPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerRespawnPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.face_id() != 0) {
    _internal_set_face_id(from._internal_face_id());
  }
  if (!(from.pos_x() <= 0 && from.pos_x() >= 0)) {
    _internal_set_pos_x(from._internal_pos_x());
  }
  if (!(from.pos_y() <= 0 && from.pos_y() >= 0)) {
    _internal_set_pos_y(from._internal_pos_y());
  }
  if (!(from.pos_z() <= 0 && from.pos_z() >= 0)) {
    _internal_set_pos_z(from._internal_pos_z());
  }
}

void GameServerRespawnPlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerRespawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRespawnPlayer::CopyFrom(const GameServerRespawnPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerRespawnPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRespawnPlayer::IsInitialized() const {
  return true;
}

void GameServerRespawnPlayer::InternalSwap(GameServerRespawnPlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerRespawnPlayer, pos_z_)
      + sizeof(GameServerRespawnPlayer::pos_z_)
      - PROTOBUF_FIELD_OFFSET(GameServerRespawnPlayer, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRespawnPlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[4]);
}

// ===================================================================

class GameClientMovePlayer::_Internal {
 public:
  static const ::Protocol::float3& position(const GameClientMovePlayer* msg);
};

const ::Protocol::float3&
GameClientMovePlayer::_Internal::position(const GameClientMovePlayer* msg) {
  return *msg->position_;
}
void GameClientMovePlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameClientMovePlayer::GameClientMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientMovePlayer)
}
GameClientMovePlayer::GameClientMovePlayer(const GameClientMovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&state_)) + sizeof(radian_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientMovePlayer)
}

void GameClientMovePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&position_)) + sizeof(radian_));
}

GameClientMovePlayer::~GameClientMovePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientMovePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientMovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GameClientMovePlayer::ArenaDtor(void* object) {
  GameClientMovePlayer* _this = reinterpret_cast< GameClientMovePlayer* >(object);
  (void)_this;
}
void GameClientMovePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientMovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientMovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radian_) -
      reinterpret_cast<char*>(&state_)) + sizeof(radian_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientMovePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radian = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientMovePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_state(), target);
  }

  // float radian = 2;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_radian(), target);
  }

  // .Protocol.float3 position = 3;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientMovePlayer)
  return target;
}

size_t GameClientMovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientMovePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float radian = 2;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientMovePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientMovePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientMovePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientMovePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientMovePlayer)
    MergeFrom(*source);
  }
}

void GameClientMovePlayer::MergeFrom(const GameClientMovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.radian() <= 0 && from.radian() >= 0)) {
    _internal_set_radian(from._internal_radian());
  }
}

void GameClientMovePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientMovePlayer::CopyFrom(const GameClientMovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientMovePlayer::IsInitialized() const {
  return true;
}

void GameClientMovePlayer::InternalSwap(GameClientMovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientMovePlayer, radian_)
      + sizeof(GameClientMovePlayer::radian_)
      - PROTOBUF_FIELD_OFFSET(GameClientMovePlayer, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientMovePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[5]);
}

// ===================================================================

class GameServerMovePlayer::_Internal {
 public:
  static const ::Protocol::float3& position(const GameServerMovePlayer* msg);
};

const ::Protocol::float3&
GameServerMovePlayer::_Internal::position(const GameServerMovePlayer* msg) {
  return *msg->position_;
}
void GameServerMovePlayer::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerMovePlayer::GameServerMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerMovePlayer)
}
GameServerMovePlayer::GameServerMovePlayer(const GameServerMovePlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(radian_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerMovePlayer)
}

void GameServerMovePlayer::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&radian_) -
    reinterpret_cast<char*>(&position_)) + sizeof(radian_));
}

GameServerMovePlayer::~GameServerMovePlayer() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerMovePlayer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMovePlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GameServerMovePlayer::ArenaDtor(void* object) {
  GameServerMovePlayer* _this = reinterpret_cast< GameServerMovePlayer* >(object);
  (void)_this;
}
void GameServerMovePlayer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMovePlayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMovePlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radian_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(radian_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMovePlayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float radian = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          radian_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMovePlayer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerMovePlayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // int32 state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // float radian = 3;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_radian(), target);
  }

  // .Protocol.float3 position = 4;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerMovePlayer)
  return target;
}

size_t GameServerMovePlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerMovePlayer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 position = 4;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // int32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_state());
  }

  // float radian = 3;
  if (!(this->radian() <= 0 && this->radian() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMovePlayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMovePlayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMovePlayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerMovePlayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerMovePlayer)
    MergeFrom(*source);
  }
}

void GameServerMovePlayer::MergeFrom(const GameServerMovePlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerMovePlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (!(from.radian() <= 0 && from.radian() >= 0)) {
    _internal_set_radian(from._internal_radian());
  }
}

void GameServerMovePlayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMovePlayer::CopyFrom(const GameServerMovePlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerMovePlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMovePlayer::IsInitialized() const {
  return true;
}

void GameServerMovePlayer::InternalSwap(GameServerMovePlayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMovePlayer, radian_)
      + sizeof(GameServerMovePlayer::radian_)
      - PROTOBUF_FIELD_OFFSET(GameServerMovePlayer, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMovePlayer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[6]);
}

// ===================================================================

class GameServerRespawnMonster::_Internal {
 public:
  static const ::Protocol::float3& right(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& up(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& look(const GameServerRespawnMonster* msg);
  static const ::Protocol::float3& position(const GameServerRespawnMonster* msg);
};

const ::Protocol::float3&
GameServerRespawnMonster::_Internal::right(const GameServerRespawnMonster* msg) {
  return *msg->right_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::up(const GameServerRespawnMonster* msg) {
  return *msg->up_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::look(const GameServerRespawnMonster* msg) {
  return *msg->look_;
}
const ::Protocol::float3&
GameServerRespawnMonster::_Internal::position(const GameServerRespawnMonster* msg) {
  return *msg->position_;
}
void GameServerRespawnMonster::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
void GameServerRespawnMonster::clear_up() {
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
}
void GameServerRespawnMonster::clear_look() {
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
}
void GameServerRespawnMonster::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerRespawnMonster::GameServerRespawnMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerRespawnMonster)
}
GameServerRespawnMonster::GameServerRespawnMonster(const GameServerRespawnMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_right()) {
    right_ = new ::Protocol::float3(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_up()) {
    up_ = new ::Protocol::float3(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from._internal_has_look()) {
    look_ = new ::Protocol::float3(*from.look_);
  } else {
    look_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_spawn_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(is_spawn_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerRespawnMonster)
}

void GameServerRespawnMonster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&right_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_spawn_) -
    reinterpret_cast<char*>(&right_)) + sizeof(is_spawn_));
}

GameServerRespawnMonster::~GameServerRespawnMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerRespawnMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerRespawnMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete look_;
  if (this != internal_default_instance()) delete position_;
}

void GameServerRespawnMonster::ArenaDtor(void* object) {
  GameServerRespawnMonster* _this = reinterpret_cast< GameServerRespawnMonster* >(object);
  (void)_this;
}
void GameServerRespawnMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerRespawnMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerRespawnMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerRespawnMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_spawn_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(is_spawn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerRespawnMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 monster_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 up = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 look = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_look(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_spawn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_spawn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerRespawnMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerRespawnMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // int32 monster_id = 2;
  if (this->monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_monster_id(), target);
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
  }

  // .Protocol.float3 right = 4;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::right(this), target, stream);
  }

  // .Protocol.float3 up = 5;
  if (this->has_up()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::up(this), target, stream);
  }

  // .Protocol.float3 look = 6;
  if (this->has_look()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::look(this), target, stream);
  }

  // .Protocol.float3 position = 7;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::position(this), target, stream);
  }

  // bool is_spawn = 8;
  if (this->is_spawn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_spawn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerRespawnMonster)
  return target;
}

size_t GameServerRespawnMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerRespawnMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 right = 4;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .Protocol.float3 up = 5;
  if (this->has_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *up_);
  }

  // .Protocol.float3 look = 6;
  if (this->has_look()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *look_);
  }

  // .Protocol.float3 position = 7;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // int32 monster_id = 2;
  if (this->monster_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_monster_id());
  }

  // int32 hp = 3;
  if (this->hp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hp());
  }

  // bool is_spawn = 8;
  if (this->is_spawn() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerRespawnMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerRespawnMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerRespawnMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerRespawnMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerRespawnMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerRespawnMonster)
    MergeFrom(*source);
  }
}

void GameServerRespawnMonster::MergeFrom(const GameServerRespawnMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerRespawnMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_right()) {
    _internal_mutable_right()->::Protocol::float3::MergeFrom(from._internal_right());
  }
  if (from.has_up()) {
    _internal_mutable_up()->::Protocol::float3::MergeFrom(from._internal_up());
  }
  if (from.has_look()) {
    _internal_mutable_look()->::Protocol::float3::MergeFrom(from._internal_look());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.monster_id() != 0) {
    _internal_set_monster_id(from._internal_monster_id());
  }
  if (from.hp() != 0) {
    _internal_set_hp(from._internal_hp());
  }
  if (from.is_spawn() != 0) {
    _internal_set_is_spawn(from._internal_is_spawn());
  }
}

void GameServerRespawnMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerRespawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerRespawnMonster::CopyFrom(const GameServerRespawnMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerRespawnMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerRespawnMonster::IsInitialized() const {
  return true;
}

void GameServerRespawnMonster::InternalSwap(GameServerRespawnMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerRespawnMonster, is_spawn_)
      + sizeof(GameServerRespawnMonster::is_spawn_)
      - PROTOBUF_FIELD_OFFSET(GameServerRespawnMonster, right_)>(
          reinterpret_cast<char*>(&right_),
          reinterpret_cast<char*>(&other->right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerRespawnMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[7]);
}

// ===================================================================

class GameServerMoveMonster::_Internal {
 public:
  static const ::Protocol::float3& right(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& up(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& look(const GameServerMoveMonster* msg);
  static const ::Protocol::float3& position(const GameServerMoveMonster* msg);
};

const ::Protocol::float3&
GameServerMoveMonster::_Internal::right(const GameServerMoveMonster* msg) {
  return *msg->right_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::up(const GameServerMoveMonster* msg) {
  return *msg->up_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::look(const GameServerMoveMonster* msg) {
  return *msg->look_;
}
const ::Protocol::float3&
GameServerMoveMonster::_Internal::position(const GameServerMoveMonster* msg) {
  return *msg->position_;
}
void GameServerMoveMonster::clear_right() {
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
void GameServerMoveMonster::clear_up() {
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
}
void GameServerMoveMonster::clear_look() {
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
}
void GameServerMoveMonster::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerMoveMonster::GameServerMoveMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerMoveMonster)
}
GameServerMoveMonster::GameServerMoveMonster(const GameServerMoveMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_right()) {
    right_ = new ::Protocol::float3(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_up()) {
    up_ = new ::Protocol::float3(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from._internal_has_look()) {
    look_ = new ::Protocol::float3(*from.look_);
  } else {
    look_ = nullptr;
  }
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&object_id_, &from.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&object_id_)) + sizeof(skillid_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerMoveMonster)
}

void GameServerMoveMonster::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&right_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&skillid_) -
    reinterpret_cast<char*>(&right_)) + sizeof(skillid_));
}

GameServerMoveMonster::~GameServerMoveMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerMoveMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMoveMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete look_;
  if (this != internal_default_instance()) delete position_;
}

void GameServerMoveMonster::ArenaDtor(void* object) {
  GameServerMoveMonster* _this = reinterpret_cast< GameServerMoveMonster* >(object);
  (void)_this;
}
void GameServerMoveMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMoveMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMoveMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerMoveMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && up_ != nullptr) {
    delete up_;
  }
  up_ = nullptr;
  if (GetArenaForAllocation() == nullptr && look_ != nullptr) {
    delete look_;
  }
  look_ = nullptr;
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skillid_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(skillid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMoveMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.kMonsterState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::Protocol::kMonsterState>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 up = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_up(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 look = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_look(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 skillId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMoveMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerMoveMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_object_id(), target);
  }

  // .Protocol.kMonsterState state = 2;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .Protocol.float3 right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  // .Protocol.float3 up = 4;
  if (this->has_up()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::up(this), target, stream);
  }

  // .Protocol.float3 look = 5;
  if (this->has_look()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::look(this), target, stream);
  }

  // .Protocol.float3 position = 6;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::position(this), target, stream);
  }

  // int32 skillId = 7;
  if (this->skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerMoveMonster)
  return target;
}

size_t GameServerMoveMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerMoveMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .Protocol.float3 up = 4;
  if (this->has_up()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *up_);
  }

  // .Protocol.float3 look = 5;
  if (this->has_look()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *look_);
  }

  // .Protocol.float3 position = 6;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 object_id = 1;
  if (this->object_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_object_id());
  }

  // .Protocol.kMonsterState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 skillId = 7;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMoveMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerMoveMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMoveMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMoveMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerMoveMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerMoveMonster)
    MergeFrom(*source);
  }
}

void GameServerMoveMonster::MergeFrom(const GameServerMoveMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerMoveMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_right()) {
    _internal_mutable_right()->::Protocol::float3::MergeFrom(from._internal_right());
  }
  if (from.has_up()) {
    _internal_mutable_up()->::Protocol::float3::MergeFrom(from._internal_up());
  }
  if (from.has_look()) {
    _internal_mutable_look()->::Protocol::float3::MergeFrom(from._internal_look());
  }
  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.object_id() != 0) {
    _internal_set_object_id(from._internal_object_id());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
}

void GameServerMoveMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerMoveMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMoveMonster::CopyFrom(const GameServerMoveMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerMoveMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMoveMonster::IsInitialized() const {
  return true;
}

void GameServerMoveMonster::InternalSwap(GameServerMoveMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMoveMonster, skillid_)
      + sizeof(GameServerMoveMonster::skillid_)
      - PROTOBUF_FIELD_OFFSET(GameServerMoveMonster, right_)>(
          reinterpret_cast<char*>(&right_),
          reinterpret_cast<char*>(&other->right_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMoveMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[8]);
}

// ===================================================================

class GameClientTakeDamage::_Internal {
 public:
};

GameClientTakeDamage::GameClientTakeDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientTakeDamage)
}
GameClientTakeDamage::GameClientTakeDamage(const GameClientTakeDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&monster_obj_id_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(monster_obj_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientTakeDamage)
}

void GameClientTakeDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&monster_obj_id_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(monster_obj_id_));
}

GameClientTakeDamage::~GameClientTakeDamage() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientTakeDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientTakeDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientTakeDamage::ArenaDtor(void* object) {
  GameClientTakeDamage* _this = reinterpret_cast< GameClientTakeDamage* >(object);
  (void)_this;
}
void GameClientTakeDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientTakeDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientTakeDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientTakeDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&monster_obj_id_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(monster_obj_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientTakeDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 monster_obj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monster_obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientTakeDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientTakeDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // int64 monster_obj_id = 2;
  if (this->monster_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_monster_obj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientTakeDamage)
  return target;
}

size_t GameClientTakeDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientTakeDamage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // int64 monster_obj_id = 2;
  if (this->monster_obj_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_monster_obj_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientTakeDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientTakeDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientTakeDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientTakeDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientTakeDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientTakeDamage)
    MergeFrom(*source);
  }
}

void GameClientTakeDamage::MergeFrom(const GameClientTakeDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientTakeDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.monster_obj_id() != 0) {
    _internal_set_monster_obj_id(from._internal_monster_obj_id());
  }
}

void GameClientTakeDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientTakeDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientTakeDamage::CopyFrom(const GameClientTakeDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientTakeDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientTakeDamage::IsInitialized() const {
  return true;
}

void GameClientTakeDamage::InternalSwap(GameClientTakeDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientTakeDamage, monster_obj_id_)
      + sizeof(GameClientTakeDamage::monster_obj_id_)
      - PROTOBUF_FIELD_OFFSET(GameClientTakeDamage, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientTakeDamage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[9]);
}

// ===================================================================

class GameServerTakeDamage::_Internal {
 public:
};

GameServerTakeDamage::GameServerTakeDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerTakeDamage)
}
GameServerTakeDamage::GameServerTakeDamage(const GameServerTakeDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(damage_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerTakeDamage)
}

void GameServerTakeDamage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&damage_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(damage_));
}

GameServerTakeDamage::~GameServerTakeDamage() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerTakeDamage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerTakeDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerTakeDamage::ArenaDtor(void* object) {
  GameServerTakeDamage* _this = reinterpret_cast< GameServerTakeDamage* >(object);
  (void)_this;
}
void GameServerTakeDamage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerTakeDamage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerTakeDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerTakeDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&damage_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(damage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerTakeDamage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 monster_obj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          monster_obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 damage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerTakeDamage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerTakeDamage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // int64 monster_obj_id = 2;
  if (this->monster_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_monster_obj_id(), target);
  }

  // int64 damage = 3;
  if (this->damage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_damage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerTakeDamage)
  return target;
}

size_t GameServerTakeDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerTakeDamage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // int64 monster_obj_id = 2;
  if (this->monster_obj_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_monster_obj_id());
  }

  // int64 damage = 3;
  if (this->damage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_damage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerTakeDamage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerTakeDamage)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerTakeDamage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerTakeDamage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerTakeDamage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerTakeDamage)
    MergeFrom(*source);
  }
}

void GameServerTakeDamage::MergeFrom(const GameServerTakeDamage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerTakeDamage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.monster_obj_id() != 0) {
    _internal_set_monster_obj_id(from._internal_monster_obj_id());
  }
  if (from.damage() != 0) {
    _internal_set_damage(from._internal_damage());
  }
}

void GameServerTakeDamage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerTakeDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerTakeDamage::CopyFrom(const GameServerTakeDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerTakeDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerTakeDamage::IsInitialized() const {
  return true;
}

void GameServerTakeDamage::InternalSwap(GameServerTakeDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerTakeDamage, damage_)
      + sizeof(GameServerTakeDamage::damage_)
      - PROTOBUF_FIELD_OFFSET(GameServerTakeDamage, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerTakeDamage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[10]);
}

// ===================================================================

class GameServerUpdateStat::_Internal {
 public:
};

GameServerUpdateStat::GameServerUpdateStat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerUpdateStat)
}
GameServerUpdateStat::GameServerUpdateStat(const GameServerUpdateStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerUpdateStat)
}

void GameServerUpdateStat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

GameServerUpdateStat::~GameServerUpdateStat() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerUpdateStat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerUpdateStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerUpdateStat::ArenaDtor(void* object) {
  GameServerUpdateStat* _this = reinterpret_cast< GameServerUpdateStat* >(object);
  (void)_this;
}
void GameServerUpdateStat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerUpdateStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerUpdateStat::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerUpdateStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerUpdateStat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kPlayerStatType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kPlayerStatType>(val));
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerUpdateStat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerUpdateStat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kPlayerStatType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerUpdateStat)
  return target;
}

size_t GameServerUpdateStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerUpdateStat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kPlayerStatType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerUpdateStat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerUpdateStat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerUpdateStat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerUpdateStat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerUpdateStat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerUpdateStat)
    MergeFrom(*source);
  }
}

void GameServerUpdateStat::MergeFrom(const GameServerUpdateStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerUpdateStat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void GameServerUpdateStat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerUpdateStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerUpdateStat::CopyFrom(const GameServerUpdateStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerUpdateStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerUpdateStat::IsInitialized() const {
  return true;
}

void GameServerUpdateStat::InternalSwap(GameServerUpdateStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerUpdateStat, value_)
      + sizeof(GameServerUpdateStat::value_)
      - PROTOBUF_FIELD_OFFSET(GameServerUpdateStat, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerUpdateStat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[11]);
}

// ===================================================================

class GameClientAttackMonster::_Internal {
 public:
};

GameClientAttackMonster::GameClientAttackMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  monster_obj_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientAttackMonster)
}
GameClientAttackMonster::GameClientAttackMonster(const GameClientAttackMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      monster_obj_id_(from.monster_obj_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientAttackMonster)
}

void GameClientAttackMonster::SharedCtor() {
}

GameClientAttackMonster::~GameClientAttackMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientAttackMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientAttackMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientAttackMonster::ArenaDtor(void* object) {
  GameClientAttackMonster* _this = reinterpret_cast< GameClientAttackMonster* >(object);
  (void)_this;
}
void GameClientAttackMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientAttackMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientAttackMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientAttackMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_obj_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientAttackMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 monster_obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_monster_obj_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_monster_obj_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientAttackMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientAttackMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 monster_obj_id = 1;
  {
    int byte_size = _monster_obj_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_monster_obj_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientAttackMonster)
  return target;
}

size_t GameClientAttackMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientAttackMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 monster_obj_id = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->monster_obj_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _monster_obj_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientAttackMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientAttackMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientAttackMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientAttackMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientAttackMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientAttackMonster)
    MergeFrom(*source);
  }
}

void GameClientAttackMonster::MergeFrom(const GameClientAttackMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientAttackMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  monster_obj_id_.MergeFrom(from.monster_obj_id_);
}

void GameClientAttackMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientAttackMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientAttackMonster::CopyFrom(const GameClientAttackMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientAttackMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientAttackMonster::IsInitialized() const {
  return true;
}

void GameClientAttackMonster::InternalSwap(GameClientAttackMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  monster_obj_id_.InternalSwap(&other->monster_obj_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientAttackMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[12]);
}

// ===================================================================

class GameServerAttackMonster::_Internal {
 public:
};

void GameServerAttackMonster::clear_damages() {
  damages_.Clear();
}
GameServerAttackMonster::GameServerAttackMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  damages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerAttackMonster)
}
GameServerAttackMonster::GameServerAttackMonster(const GameServerAttackMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      damages_(from.damages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerAttackMonster)
}

void GameServerAttackMonster::SharedCtor() {
character_id_ = int64_t{0};
}

GameServerAttackMonster::~GameServerAttackMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerAttackMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerAttackMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerAttackMonster::ArenaDtor(void* object) {
  GameServerAttackMonster* _this = reinterpret_cast< GameServerAttackMonster* >(object);
  (void)_this;
}
void GameServerAttackMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerAttackMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerAttackMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerAttackMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  damages_.Clear();
  character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerAttackMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Protocol.AttackMonster damages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_damages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerAttackMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerAttackMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // repeated .Protocol.AttackMonster damages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_damages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_damages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerAttackMonster)
  return target;
}

size_t GameServerAttackMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerAttackMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.AttackMonster damages = 2;
  total_size += 1UL * this->_internal_damages_size();
  for (const auto& msg : this->damages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerAttackMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerAttackMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerAttackMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerAttackMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerAttackMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerAttackMonster)
    MergeFrom(*source);
  }
}

void GameServerAttackMonster::MergeFrom(const GameServerAttackMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerAttackMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  damages_.MergeFrom(from.damages_);
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
}

void GameServerAttackMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerAttackMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerAttackMonster::CopyFrom(const GameServerAttackMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerAttackMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerAttackMonster::IsInitialized() const {
  return true;
}

void GameServerAttackMonster::InternalSwap(GameServerAttackMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  damages_.InternalSwap(&other->damages_);
  swap(character_id_, other->character_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerAttackMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[13]);
}

// ===================================================================

class GameServerMonsterStatUpdate::_Internal {
 public:
};

GameServerMonsterStatUpdate::GameServerMonsterStatUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerMonsterStatUpdate)
}
GameServerMonsterStatUpdate::GameServerMonsterStatUpdate(const GameServerMonsterStatUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&monster_obj_id_, &from.monster_obj_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&monster_obj_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerMonsterStatUpdate)
}

void GameServerMonsterStatUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&monster_obj_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&monster_obj_id_)) + sizeof(value_));
}

GameServerMonsterStatUpdate::~GameServerMonsterStatUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerMonsterStatUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerMonsterStatUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerMonsterStatUpdate::ArenaDtor(void* object) {
  GameServerMonsterStatUpdate* _this = reinterpret_cast< GameServerMonsterStatUpdate* >(object);
  (void)_this;
}
void GameServerMonsterStatUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerMonsterStatUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerMonsterStatUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerMonsterStatUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&monster_obj_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&monster_obj_id_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerMonsterStatUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 monster_obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monster_obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.kMonsterStatType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kMonsterStatType>(val));
        } else goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerMonsterStatUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerMonsterStatUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 monster_obj_id = 1;
  if (this->monster_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_monster_obj_id(), target);
  }

  // .Protocol.kMonsterStatType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerMonsterStatUpdate)
  return target;
}

size_t GameServerMonsterStatUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerMonsterStatUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 monster_obj_id = 1;
  if (this->monster_obj_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_monster_obj_id());
  }

  // .Protocol.kMonsterStatType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerMonsterStatUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerMonsterStatUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerMonsterStatUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerMonsterStatUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerMonsterStatUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerMonsterStatUpdate)
    MergeFrom(*source);
  }
}

void GameServerMonsterStatUpdate::MergeFrom(const GameServerMonsterStatUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerMonsterStatUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monster_obj_id() != 0) {
    _internal_set_monster_obj_id(from._internal_monster_obj_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void GameServerMonsterStatUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerMonsterStatUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerMonsterStatUpdate::CopyFrom(const GameServerMonsterStatUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerMonsterStatUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerMonsterStatUpdate::IsInitialized() const {
  return true;
}

void GameServerMonsterStatUpdate::InternalSwap(GameServerMonsterStatUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerMonsterStatUpdate, value_)
      + sizeof(GameServerMonsterStatUpdate::value_)
      - PROTOBUF_FIELD_OFFSET(GameServerMonsterStatUpdate, monster_obj_id_)>(
          reinterpret_cast<char*>(&monster_obj_id_),
          reinterpret_cast<char*>(&other->monster_obj_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerMonsterStatUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[14]);
}

// ===================================================================

class GameServerKillMonster::_Internal {
 public:
};

GameServerKillMonster::GameServerKillMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerKillMonster)
}
GameServerKillMonster::GameServerKillMonster(const GameServerKillMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  monster_obj_id_ = from.monster_obj_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerKillMonster)
}

void GameServerKillMonster::SharedCtor() {
monster_obj_id_ = int64_t{0};
}

GameServerKillMonster::~GameServerKillMonster() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerKillMonster)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerKillMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerKillMonster::ArenaDtor(void* object) {
  GameServerKillMonster* _this = reinterpret_cast< GameServerKillMonster* >(object);
  (void)_this;
}
void GameServerKillMonster::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerKillMonster::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerKillMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerKillMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  monster_obj_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerKillMonster::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 monster_obj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          monster_obj_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerKillMonster::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerKillMonster)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 monster_obj_id = 1;
  if (this->monster_obj_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_monster_obj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerKillMonster)
  return target;
}

size_t GameServerKillMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerKillMonster)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 monster_obj_id = 1;
  if (this->monster_obj_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_monster_obj_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerKillMonster::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerKillMonster)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerKillMonster* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerKillMonster>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerKillMonster)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerKillMonster)
    MergeFrom(*source);
  }
}

void GameServerKillMonster::MergeFrom(const GameServerKillMonster& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerKillMonster)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.monster_obj_id() != 0) {
    _internal_set_monster_obj_id(from._internal_monster_obj_id());
  }
}

void GameServerKillMonster::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerKillMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerKillMonster::CopyFrom(const GameServerKillMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerKillMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerKillMonster::IsInitialized() const {
  return true;
}

void GameServerKillMonster::InternalSwap(GameServerKillMonster* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(monster_obj_id_, other->monster_obj_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerKillMonster::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[15]);
}

// ===================================================================

class GameClientInventoryItemMove::_Internal {
 public:
};

GameClientInventoryItemMove::GameClientInventoryItemMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientInventoryItemMove)
}
GameClientInventoryItemMove::GameClientInventoryItemMove(const GameClientInventoryItemMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&move_type_, &from.move_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&move_type_)) + sizeof(dst_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientInventoryItemMove)
}

void GameClientInventoryItemMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&move_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dst_) -
    reinterpret_cast<char*>(&move_type_)) + sizeof(dst_));
}

GameClientInventoryItemMove::~GameClientInventoryItemMove() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientInventoryItemMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientInventoryItemMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientInventoryItemMove::ArenaDtor(void* object) {
  GameClientInventoryItemMove* _this = reinterpret_cast< GameClientInventoryItemMove* >(object);
  (void)_this;
}
void GameClientInventoryItemMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientInventoryItemMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientInventoryItemMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientInventoryItemMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&move_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dst_) -
      reinterpret_cast<char*>(&move_type_)) + sizeof(dst_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientInventoryItemMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kInventoryItemMoveType move_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_move_type(static_cast<::Protocol::kInventoryItemMoveType>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.kInventoryType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kInventoryType>(val));
        } else goto handle_unusual;
        continue;
      // int32 src = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dst = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientInventoryItemMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientInventoryItemMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kInventoryItemMoveType move_type = 1;
  if (this->move_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_move_type(), target);
  }

  // .Protocol.kInventoryType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 src = 3;
  if (this->src() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_src(), target);
  }

  // int32 dst = 4;
  if (this->dst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_dst(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientInventoryItemMove)
  return target;
}

size_t GameClientInventoryItemMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientInventoryItemMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kInventoryItemMoveType move_type = 1;
  if (this->move_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_move_type());
  }

  // .Protocol.kInventoryType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 src = 3;
  if (this->src() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src());
  }

  // int32 dst = 4;
  if (this->dst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dst());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientInventoryItemMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientInventoryItemMove)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientInventoryItemMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientInventoryItemMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientInventoryItemMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientInventoryItemMove)
    MergeFrom(*source);
  }
}

void GameClientInventoryItemMove::MergeFrom(const GameClientInventoryItemMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientInventoryItemMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.move_type() != 0) {
    _internal_set_move_type(from._internal_move_type());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.src() != 0) {
    _internal_set_src(from._internal_src());
  }
  if (from.dst() != 0) {
    _internal_set_dst(from._internal_dst());
  }
}

void GameClientInventoryItemMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientInventoryItemMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientInventoryItemMove::CopyFrom(const GameClientInventoryItemMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientInventoryItemMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientInventoryItemMove::IsInitialized() const {
  return true;
}

void GameClientInventoryItemMove::InternalSwap(GameClientInventoryItemMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientInventoryItemMove, dst_)
      + sizeof(GameClientInventoryItemMove::dst_)
      - PROTOBUF_FIELD_OFFSET(GameClientInventoryItemMove, move_type_)>(
          reinterpret_cast<char*>(&move_type_),
          reinterpret_cast<char*>(&other->move_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientInventoryItemMove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[16]);
}

// ===================================================================

class GameServerDressChange::_Internal {
 public:
};

GameServerDressChange::GameServerDressChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerDressChange)
}
GameServerDressChange::GameServerDressChange(const GameServerDressChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&character_id_, &from.character_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerDressChange)
}

void GameServerDressChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&character_id_)) + sizeof(item_id_));
}

GameServerDressChange::~GameServerDressChange() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerDressChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerDressChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerDressChange::ArenaDtor(void* object) {
  GameServerDressChange* _this = reinterpret_cast< GameServerDressChange* >(object);
  (void)_this;
}
void GameServerDressChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerDressChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerDressChange::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerDressChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&character_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&character_id_)) + sizeof(item_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerDressChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 item_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerDressChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerDressChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // int32 item_type = 2;
  if (this->item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_type(), target);
  }

  // int32 item_id = 3;
  if (this->item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerDressChange)
  return target;
}

size_t GameServerDressChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerDressChange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  // int32 item_type = 2;
  if (this->item_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_type());
  }

  // int32 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_item_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerDressChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerDressChange)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerDressChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerDressChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerDressChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerDressChange)
    MergeFrom(*source);
  }
}

void GameServerDressChange::MergeFrom(const GameServerDressChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerDressChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
  if (from.item_type() != 0) {
    _internal_set_item_type(from._internal_item_type());
  }
  if (from.item_id() != 0) {
    _internal_set_item_id(from._internal_item_id());
  }
}

void GameServerDressChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerDressChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerDressChange::CopyFrom(const GameServerDressChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerDressChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerDressChange::IsInitialized() const {
  return true;
}

void GameServerDressChange::InternalSwap(GameServerDressChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerDressChange, item_id_)
      + sizeof(GameServerDressChange::item_id_)
      - PROTOBUF_FIELD_OFFSET(GameServerDressChange, character_id_)>(
          reinterpret_cast<char*>(&character_id_),
          reinterpret_cast<char*>(&other->character_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerDressChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[17]);
}

// ===================================================================

class GameClientStatUp::_Internal {
 public:
};

GameClientStatUp::GameClientStatUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientStatUp)
}
GameClientStatUp::GameClientStatUp(const GameClientStatUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientStatUp)
}

void GameClientStatUp::SharedCtor() {
type_ = 0;
}

GameClientStatUp::~GameClientStatUp() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientStatUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientStatUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientStatUp::ArenaDtor(void* object) {
  GameClientStatUp* _this = reinterpret_cast< GameClientStatUp* >(object);
  (void)_this;
}
void GameClientStatUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientStatUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientStatUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientStatUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientStatUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kStatType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kStatType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientStatUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientStatUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kStatType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientStatUp)
  return target;
}

size_t GameClientStatUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientStatUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kStatType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientStatUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientStatUp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientStatUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientStatUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientStatUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientStatUp)
    MergeFrom(*source);
  }
}

void GameClientStatUp::MergeFrom(const GameClientStatUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientStatUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GameClientStatUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientStatUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientStatUp::CopyFrom(const GameClientStatUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientStatUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientStatUp::IsInitialized() const {
  return true;
}

void GameClientStatUp::InternalSwap(GameClientStatUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientStatUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[18]);
}

// ===================================================================

class GameServerStatUp::_Internal {
 public:
};

GameServerStatUp::GameServerStatUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerStatUp)
}
GameServerStatUp::GameServerStatUp(const GameServerStatUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ap_value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ap_value_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerStatUp)
}

void GameServerStatUp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ap_value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(ap_value_));
}

GameServerStatUp::~GameServerStatUp() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerStatUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerStatUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerStatUp::ArenaDtor(void* object) {
  GameServerStatUp* _this = reinterpret_cast< GameServerStatUp* >(object);
  (void)_this;
}
void GameServerStatUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerStatUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerStatUp::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerStatUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ap_value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(ap_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerStatUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kStatType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kStatType>(val));
        } else goto handle_unusual;
        continue;
      // int32 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ap_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ap_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerStatUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerStatUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kStatType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_value(), target);
  }

  // int32 ap_value = 3;
  if (this->ap_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ap_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerStatUp)
  return target;
}

size_t GameServerStatUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerStatUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kStatType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  // int32 ap_value = 3;
  if (this->ap_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ap_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerStatUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerStatUp)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerStatUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerStatUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerStatUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerStatUp)
    MergeFrom(*source);
  }
}

void GameServerStatUp::MergeFrom(const GameServerStatUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerStatUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.ap_value() != 0) {
    _internal_set_ap_value(from._internal_ap_value());
  }
}

void GameServerStatUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerStatUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerStatUp::CopyFrom(const GameServerStatUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerStatUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerStatUp::IsInitialized() const {
  return true;
}

void GameServerStatUp::InternalSwap(GameServerStatUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerStatUp, ap_value_)
      + sizeof(GameServerStatUp::ap_value_)
      - PROTOBUF_FIELD_OFFSET(GameServerStatUp, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerStatUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[19]);
}

// ===================================================================

class GameClientKeySet::_Internal {
 public:
};

GameClientKeySet::GameClientKeySet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientKeySet)
}
GameClientKeySet::GameClientKeySet(const GameClientKeySet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_value_, &from.key_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_value_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientKeySet)
}

void GameClientKeySet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&key_value_)) + sizeof(value_));
}

GameClientKeySet::~GameClientKeySet() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientKeySet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientKeySet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientKeySet::ArenaDtor(void* object) {
  GameClientKeySet* _this = reinterpret_cast< GameClientKeySet* >(object);
  (void)_this;
}
void GameClientKeySet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientKeySet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientKeySet::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientKeySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&key_value_)) + sizeof(value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientKeySet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 key_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.kKeySetType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kKeySetType>(val));
        } else goto handle_unusual;
        continue;
      // int32 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientKeySet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientKeySet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key_value = 1;
  if (this->key_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_value(), target);
  }

  // .Protocol.kKeySetType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // int32 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientKeySet)
  return target;
}

size_t GameClientKeySet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientKeySet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key_value = 1;
  if (this->key_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_value());
  }

  // .Protocol.kKeySetType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientKeySet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientKeySet)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientKeySet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientKeySet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientKeySet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientKeySet)
    MergeFrom(*source);
  }
}

void GameClientKeySet::MergeFrom(const GameClientKeySet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientKeySet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_value() != 0) {
    _internal_set_key_value(from._internal_key_value());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void GameClientKeySet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientKeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientKeySet::CopyFrom(const GameClientKeySet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientKeySet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientKeySet::IsInitialized() const {
  return true;
}

void GameClientKeySet::InternalSwap(GameClientKeySet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientKeySet, value_)
      + sizeof(GameClientKeySet::value_)
      - PROTOBUF_FIELD_OFFSET(GameClientKeySet, key_value_)>(
          reinterpret_cast<char*>(&key_value_),
          reinterpret_cast<char*>(&other->key_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientKeySet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[20]);
}

// ===================================================================

class GameClientItemApply::_Internal {
 public:
};

GameClientItemApply::GameClientItemApply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientItemApply)
}
GameClientItemApply::GameClientItemApply(const GameClientItemApply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientItemApply)
}

void GameClientItemApply::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&type_)) + sizeof(position_));
}

GameClientItemApply::~GameClientItemApply() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientItemApply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientItemApply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientItemApply::ArenaDtor(void* object) {
  GameClientItemApply* _this = reinterpret_cast< GameClientItemApply* >(object);
  (void)_this;
}
void GameClientItemApply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientItemApply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientItemApply::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientItemApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&type_)) + sizeof(position_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientItemApply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kInventoryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kInventoryType>(val));
        } else goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientItemApply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientItemApply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kInventoryType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientItemApply)
  return target;
}

size_t GameClientItemApply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientItemApply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kInventoryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientItemApply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientItemApply)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientItemApply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientItemApply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientItemApply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientItemApply)
    MergeFrom(*source);
  }
}

void GameClientItemApply::MergeFrom(const GameClientItemApply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientItemApply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
}

void GameClientItemApply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientItemApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientItemApply::CopyFrom(const GameClientItemApply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientItemApply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientItemApply::IsInitialized() const {
  return true;
}

void GameClientItemApply::InternalSwap(GameClientItemApply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameClientItemApply, position_)
      + sizeof(GameClientItemApply::position_)
      - PROTOBUF_FIELD_OFFSET(GameClientItemApply, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientItemApply::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[21]);
}

// ===================================================================

class GameServerItemQuantityUpdate::_Internal {
 public:
};

GameServerItemQuantityUpdate::GameServerItemQuantityUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerItemQuantityUpdate)
}
GameServerItemQuantityUpdate::GameServerItemQuantityUpdate(const GameServerItemQuantityUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerItemQuantityUpdate)
}

void GameServerItemQuantityUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&type_)) + sizeof(quantity_));
}

GameServerItemQuantityUpdate::~GameServerItemQuantityUpdate() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerItemQuantityUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerItemQuantityUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameServerItemQuantityUpdate::ArenaDtor(void* object) {
  GameServerItemQuantityUpdate* _this = reinterpret_cast< GameServerItemQuantityUpdate* >(object);
  (void)_this;
}
void GameServerItemQuantityUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerItemQuantityUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerItemQuantityUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerItemQuantityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&type_)) + sizeof(quantity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerItemQuantityUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kInventoryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::kInventoryType>(val));
        } else goto handle_unusual;
        continue;
      // int32 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 quantity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerItemQuantityUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerItemQuantityUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kInventoryType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 position = 2;
  if (this->position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_position(), target);
  }

  // int32 quantity = 3;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_quantity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerItemQuantityUpdate)
  return target;
}

size_t GameServerItemQuantityUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerItemQuantityUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kInventoryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 position = 2;
  if (this->position() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_position());
  }

  // int32 quantity = 3;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_quantity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerItemQuantityUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerItemQuantityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerItemQuantityUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerItemQuantityUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerItemQuantityUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerItemQuantityUpdate)
    MergeFrom(*source);
  }
}

void GameServerItemQuantityUpdate::MergeFrom(const GameServerItemQuantityUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerItemQuantityUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.position() != 0) {
    _internal_set_position(from._internal_position());
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
}

void GameServerItemQuantityUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerItemQuantityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerItemQuantityUpdate::CopyFrom(const GameServerItemQuantityUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerItemQuantityUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerItemQuantityUpdate::IsInitialized() const {
  return true;
}

void GameServerItemQuantityUpdate::InternalSwap(GameServerItemQuantityUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerItemQuantityUpdate, quantity_)
      + sizeof(GameServerItemQuantityUpdate::quantity_)
      - PROTOBUF_FIELD_OFFSET(GameServerItemQuantityUpdate, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerItemQuantityUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[22]);
}

// ===================================================================

class GameClientResurrection::_Internal {
 public:
};

GameClientResurrection::GameClientResurrection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientResurrection)
}
GameClientResurrection::GameClientResurrection(const GameClientResurrection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientResurrection)
}

void GameClientResurrection::SharedCtor() {
}

GameClientResurrection::~GameClientResurrection() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientResurrection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientResurrection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientResurrection::ArenaDtor(void* object) {
  GameClientResurrection* _this = reinterpret_cast< GameClientResurrection* >(object);
  (void)_this;
}
void GameClientResurrection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientResurrection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientResurrection::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientResurrection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientResurrection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientResurrection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientResurrection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientResurrection)
  return target;
}

size_t GameClientResurrection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientResurrection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientResurrection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientResurrection)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientResurrection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientResurrection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientResurrection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientResurrection)
    MergeFrom(*source);
  }
}

void GameClientResurrection::MergeFrom(const GameClientResurrection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientResurrection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameClientResurrection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientResurrection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientResurrection::CopyFrom(const GameClientResurrection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientResurrection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientResurrection::IsInitialized() const {
  return true;
}

void GameClientResurrection::InternalSwap(GameClientResurrection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientResurrection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[23]);
}

// ===================================================================

class GameServerResurrection::_Internal {
 public:
  static const ::Protocol::float3& position(const GameServerResurrection* msg);
};

const ::Protocol::float3&
GameServerResurrection::_Internal::position(const GameServerResurrection* msg) {
  return *msg->position_;
}
void GameServerResurrection::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
GameServerResurrection::GameServerResurrection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerResurrection)
}
GameServerResurrection::GameServerResurrection(const GameServerResurrection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::Protocol::float3(*from.position_);
  } else {
    position_ = nullptr;
  }
  character_id_ = from.character_id_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerResurrection)
}

void GameServerResurrection::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&character_id_) -
    reinterpret_cast<char*>(&position_)) + sizeof(character_id_));
}

GameServerResurrection::~GameServerResurrection() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerResurrection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerResurrection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
}

void GameServerResurrection::ArenaDtor(void* object) {
  GameServerResurrection* _this = reinterpret_cast< GameServerResurrection* >(object);
  (void)_this;
}
void GameServerResurrection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerResurrection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerResurrection::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerResurrection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  character_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerResurrection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 character_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          character_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Protocol.float3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerResurrection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerResurrection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_character_id(), target);
  }

  // .Protocol.float3 position = 2;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerResurrection)
  return target;
}

size_t GameServerResurrection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerResurrection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.float3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // int64 character_id = 1;
  if (this->character_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_character_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerResurrection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerResurrection)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerResurrection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerResurrection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerResurrection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerResurrection)
    MergeFrom(*source);
  }
}

void GameServerResurrection::MergeFrom(const GameServerResurrection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerResurrection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::Protocol::float3::MergeFrom(from._internal_position());
  }
  if (from.character_id() != 0) {
    _internal_set_character_id(from._internal_character_id());
  }
}

void GameServerResurrection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerResurrection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerResurrection::CopyFrom(const GameServerResurrection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerResurrection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerResurrection::IsInitialized() const {
  return true;
}

void GameServerResurrection::InternalSwap(GameServerResurrection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameServerResurrection, character_id_)
      + sizeof(GameServerResurrection::character_id_)
      - PROTOBUF_FIELD_OFFSET(GameServerResurrection, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerResurrection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[24]);
}

// ===================================================================

class GameClientSpRecovery::_Internal {
 public:
};

GameClientSpRecovery::GameClientSpRecovery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientSpRecovery)
}
GameClientSpRecovery::GameClientSpRecovery(const GameClientSpRecovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientSpRecovery)
}

void GameClientSpRecovery::SharedCtor() {
}

GameClientSpRecovery::~GameClientSpRecovery() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientSpRecovery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientSpRecovery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientSpRecovery::ArenaDtor(void* object) {
  GameClientSpRecovery* _this = reinterpret_cast< GameClientSpRecovery* >(object);
  (void)_this;
}
void GameClientSpRecovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientSpRecovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientSpRecovery::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientSpRecovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientSpRecovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientSpRecovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientSpRecovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientSpRecovery)
  return target;
}

size_t GameClientSpRecovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientSpRecovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientSpRecovery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientSpRecovery)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientSpRecovery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientSpRecovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientSpRecovery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientSpRecovery)
    MergeFrom(*source);
  }
}

void GameClientSpRecovery::MergeFrom(const GameClientSpRecovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientSpRecovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GameClientSpRecovery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientSpRecovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientSpRecovery::CopyFrom(const GameClientSpRecovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientSpRecovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientSpRecovery::IsInitialized() const {
  return true;
}

void GameClientSpRecovery::InternalSwap(GameClientSpRecovery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientSpRecovery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[25]);
}

// ===================================================================

class GameClientApplySkill::_Internal {
 public:
};

GameClientApplySkill::GameClientApplySkill(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientApplySkill)
}
GameClientApplySkill::GameClientApplySkill(const GameClientApplySkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  skillid_ = from.skillid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientApplySkill)
}

void GameClientApplySkill::SharedCtor() {
skillid_ = 0;
}

GameClientApplySkill::~GameClientApplySkill() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientApplySkill)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientApplySkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameClientApplySkill::ArenaDtor(void* object) {
  GameClientApplySkill* _this = reinterpret_cast< GameClientApplySkill* >(object);
  (void)_this;
}
void GameClientApplySkill::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientApplySkill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientApplySkill::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientApplySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skillid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientApplySkill::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skillid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          skillid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientApplySkill::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientApplySkill)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->skillid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_skillid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientApplySkill)
  return target;
}

size_t GameClientApplySkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientApplySkill)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skillid = 1;
  if (this->skillid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_skillid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientApplySkill::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientApplySkill)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientApplySkill* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientApplySkill>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientApplySkill)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientApplySkill)
    MergeFrom(*source);
  }
}

void GameClientApplySkill::MergeFrom(const GameClientApplySkill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientApplySkill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.skillid() != 0) {
    _internal_set_skillid(from._internal_skillid());
  }
}

void GameClientApplySkill::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientApplySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientApplySkill::CopyFrom(const GameClientApplySkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientApplySkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientApplySkill::IsInitialized() const {
  return true;
}

void GameClientApplySkill::InternalSwap(GameClientApplySkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(skillid_, other->skillid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientApplySkill::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[26]);
}

// ===================================================================

class GameClientChat::_Internal {
 public:
};

GameClientChat::GameClientChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameClientChat)
}
GameClientChat::GameClientChat(const GameClientChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.GameClientChat)
}

void GameClientChat::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameClientChat::~GameClientChat() {
  // @@protoc_insertion_point(destructor:Protocol.GameClientChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameClientChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameClientChat::ArenaDtor(void* object) {
  GameClientChat* _this = reinterpret_cast< GameClientChat* >(object);
  (void)_this;
}
void GameClientChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameClientChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameClientChat::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameClientChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameClientChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameClientChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contents = 1;
  if (!this->contents().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameClientChat)
  return target;
}

size_t GameClientChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameClientChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contents = 1;
  if (!this->contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contents());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameClientChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameClientChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameClientChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameClientChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameClientChat)
    MergeFrom(*source);
  }
}

void GameClientChat::MergeFrom(const GameClientChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameClientChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
}

void GameClientChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameClientChat::CopyFrom(const GameClientChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameClientChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameClientChat::IsInitialized() const {
  return true;
}

void GameClientChat::InternalSwap(GameClientChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, GetArenaForAllocation(),
      &other->contents_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameClientChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[27]);
}

// ===================================================================

class GameServerChat::_Internal {
 public:
};

GameServerChat::GameServerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.GameServerChat)
}
GameServerChat::GameServerChat(const GameServerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_contents().empty()) {
    contents_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_contents(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.GameServerChat)
}

void GameServerChat::SharedCtor() {
contents_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GameServerChat::~GameServerChat() {
  // @@protoc_insertion_point(destructor:Protocol.GameServerChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GameServerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  contents_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GameServerChat::ArenaDtor(void* object) {
  GameServerChat* _this = reinterpret_cast< GameServerChat* >(object);
  (void)_this;
}
void GameServerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GameServerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GameServerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.GameServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contents_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameServerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes contents = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_contents();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameServerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.GameServerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes contents = 1;
  if (!this->contents().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_contents(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.GameServerChat)
  return target;
}

size_t GameServerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.GameServerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes contents = 1;
  if (!this->contents().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_contents());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameServerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.GameServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const GameServerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameServerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.GameServerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.GameServerChat)
    MergeFrom(*source);
  }
}

void GameServerChat::MergeFrom(const GameServerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.GameServerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.contents().empty()) {
    _internal_set_contents(from._internal_contents());
  }
}

void GameServerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.GameServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameServerChat::CopyFrom(const GameServerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.GameServerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameServerChat::IsInitialized() const {
  return true;
}

void GameServerChat::InternalSwap(GameServerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &contents_, GetArenaForAllocation(),
      &other->contents_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GameServerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_game_5fprotocol_2eproto_getter, &descriptor_table_game_5fprotocol_2eproto_once,
      file_level_metadata_game_5fprotocol_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::GameClientLogin* Arena::CreateMaybeMessage< ::Protocol::GameClientLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerLogin* Arena::CreateMaybeMessage< ::Protocol::GameServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerLoadCharacter* Arena::CreateMaybeMessage< ::Protocol::GameServerLoadCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerLoadCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientLoading* Arena::CreateMaybeMessage< ::Protocol::GameClientLoading >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientLoading >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerRespawnPlayer* Arena::CreateMaybeMessage< ::Protocol::GameServerRespawnPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerRespawnPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientMovePlayer* Arena::CreateMaybeMessage< ::Protocol::GameClientMovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientMovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerMovePlayer* Arena::CreateMaybeMessage< ::Protocol::GameServerMovePlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerMovePlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerRespawnMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerRespawnMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerRespawnMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerMoveMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerMoveMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerMoveMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientTakeDamage* Arena::CreateMaybeMessage< ::Protocol::GameClientTakeDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientTakeDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerTakeDamage* Arena::CreateMaybeMessage< ::Protocol::GameServerTakeDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerTakeDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerUpdateStat* Arena::CreateMaybeMessage< ::Protocol::GameServerUpdateStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerUpdateStat >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientAttackMonster* Arena::CreateMaybeMessage< ::Protocol::GameClientAttackMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientAttackMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerAttackMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerAttackMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerAttackMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerMonsterStatUpdate* Arena::CreateMaybeMessage< ::Protocol::GameServerMonsterStatUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerMonsterStatUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerKillMonster* Arena::CreateMaybeMessage< ::Protocol::GameServerKillMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerKillMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientInventoryItemMove* Arena::CreateMaybeMessage< ::Protocol::GameClientInventoryItemMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientInventoryItemMove >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerDressChange* Arena::CreateMaybeMessage< ::Protocol::GameServerDressChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerDressChange >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientStatUp* Arena::CreateMaybeMessage< ::Protocol::GameClientStatUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientStatUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerStatUp* Arena::CreateMaybeMessage< ::Protocol::GameServerStatUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerStatUp >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientKeySet* Arena::CreateMaybeMessage< ::Protocol::GameClientKeySet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientKeySet >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientItemApply* Arena::CreateMaybeMessage< ::Protocol::GameClientItemApply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientItemApply >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerItemQuantityUpdate* Arena::CreateMaybeMessage< ::Protocol::GameServerItemQuantityUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerItemQuantityUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientResurrection* Arena::CreateMaybeMessage< ::Protocol::GameClientResurrection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientResurrection >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerResurrection* Arena::CreateMaybeMessage< ::Protocol::GameServerResurrection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerResurrection >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientSpRecovery* Arena::CreateMaybeMessage< ::Protocol::GameClientSpRecovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientSpRecovery >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientApplySkill* Arena::CreateMaybeMessage< ::Protocol::GameClientApplySkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientApplySkill >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameClientChat* Arena::CreateMaybeMessage< ::Protocol::GameClientChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameClientChat >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::GameServerChat* Arena::CreateMaybeMessage< ::Protocol::GameServerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::GameServerChat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
