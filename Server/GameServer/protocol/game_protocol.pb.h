// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace Protocol {
class GameClientLogin;
struct GameClientLoginDefaultTypeInternal;
extern GameClientLoginDefaultTypeInternal _GameClientLogin_default_instance_;
class GameServerLogin;
struct GameServerLoginDefaultTypeInternal;
extern GameServerLoginDefaultTypeInternal _GameServerLogin_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::GameClientLogin* Arena::CreateMaybeMessage<::Protocol::GameClientLogin>(Arena*);
template<> ::Protocol::GameServerLogin* Arena::CreateMaybeMessage<::Protocol::GameServerLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class GameClientLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameClientLogin) */ {
 public:
  inline GameClientLogin() : GameClientLogin(nullptr) {}
  ~GameClientLogin() override;
  explicit constexpr GameClientLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientLogin(const GameClientLogin& from);
  GameClientLogin(GameClientLogin&& from) noexcept
    : GameClientLogin() {
    *this = ::std::move(from);
  }

  inline GameClientLogin& operator=(const GameClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientLogin& operator=(GameClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientLogin* internal_default_instance() {
    return reinterpret_cast<const GameClientLogin*>(
               &_GameClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientLogin& a, GameClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientLogin* New() const final {
    return new GameClientLogin();
  }

  GameClientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientLogin& from);
  void MergeFrom(const GameClientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameClientLogin";
  }
  protected:
  explicit GameClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kAuthFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // string auth = 3;
  void clear_auth();
  const std::string& auth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameClientLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerLogin) */ {
 public:
  inline GameServerLogin() : GameServerLogin(nullptr) {}
  ~GameServerLogin() override;
  explicit constexpr GameServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerLogin(const GameServerLogin& from);
  GameServerLogin(GameServerLogin&& from) noexcept
    : GameServerLogin() {
    *this = ::std::move(from);
  }

  inline GameServerLogin& operator=(const GameServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerLogin& operator=(GameServerLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerLogin* internal_default_instance() {
    return reinterpret_cast<const GameServerLogin*>(
               &_GameServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerLogin& a, GameServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerLogin* New() const final {
    return new GameServerLogin();
  }

  GameServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerLogin& from);
  void MergeFrom(const GameServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerLogin";
  }
  protected:
  explicit GameServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kAuthFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // string auth = 3;
  void clear_auth();
  const std::string& auth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientLogin

// string id = 1;
inline void GameClientLogin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GameClientLogin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLogin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameClientLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameClientLogin.id)
}
inline std::string* GameClientLogin::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameClientLogin.id)
  return _internal_mutable_id();
}
inline const std::string& GameClientLogin::_internal_id() const {
  return id_.Get();
}
inline void GameClientLogin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameClientLogin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameClientLogin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.GameClientLogin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameClientLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameClientLogin.id)
}

// string pw = 2;
inline void GameClientLogin::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& GameClientLogin::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLogin.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameClientLogin::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameClientLogin.pw)
}
inline std::string* GameClientLogin::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameClientLogin.pw)
  return _internal_mutable_pw();
}
inline const std::string& GameClientLogin::_internal_pw() const {
  return pw_.Get();
}
inline void GameClientLogin::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameClientLogin::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameClientLogin::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.GameClientLogin.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameClientLogin::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameClientLogin.pw)
}

// string auth = 3;
inline void GameClientLogin::clear_auth() {
  auth_.ClearToEmpty();
}
inline const std::string& GameClientLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLogin.auth)
  return _internal_auth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameClientLogin::set_auth(ArgT0&& arg0, ArgT... args) {
 
 auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameClientLogin.auth)
}
inline std::string* GameClientLogin::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameClientLogin.auth)
  return _internal_mutable_auth();
}
inline const std::string& GameClientLogin::_internal_auth() const {
  return auth_.Get();
}
inline void GameClientLogin::_internal_set_auth(const std::string& value) {
  
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameClientLogin::_internal_mutable_auth() {
  
  return auth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameClientLogin::release_auth() {
  // @@protoc_insertion_point(field_release:Protocol.GameClientLogin.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameClientLogin::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameClientLogin.auth)
}

// -------------------------------------------------------------------

// GameServerLogin

// string id = 1;
inline void GameServerLogin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GameServerLogin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLogin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerLogin.id)
}
inline std::string* GameServerLogin::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLogin.id)
  return _internal_mutable_id();
}
inline const std::string& GameServerLogin::_internal_id() const {
  return id_.Get();
}
inline void GameServerLogin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerLogin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerLogin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerLogin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerLogin.id)
}

// string pw = 2;
inline void GameServerLogin::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& GameServerLogin::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLogin.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerLogin::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerLogin.pw)
}
inline std::string* GameServerLogin::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLogin.pw)
  return _internal_mutable_pw();
}
inline const std::string& GameServerLogin::_internal_pw() const {
  return pw_.Get();
}
inline void GameServerLogin::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerLogin::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerLogin::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerLogin.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerLogin::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerLogin.pw)
}

// string auth = 3;
inline void GameServerLogin::clear_auth() {
  auth_.ClearToEmpty();
}
inline const std::string& GameServerLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLogin.auth)
  return _internal_auth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerLogin::set_auth(ArgT0&& arg0, ArgT... args) {
 
 auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerLogin.auth)
}
inline std::string* GameServerLogin::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLogin.auth)
  return _internal_mutable_auth();
}
inline const std::string& GameServerLogin::_internal_auth() const {
  return auth_.Get();
}
inline void GameServerLogin::_internal_set_auth(const std::string& value) {
  
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerLogin::_internal_mutable_auth() {
  
  return auth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerLogin::release_auth() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerLogin.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerLogin::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerLogin.auth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
