// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace Protocol {
class GameClientLogin;
struct GameClientLoginDefaultTypeInternal;
extern GameClientLoginDefaultTypeInternal _GameClientLogin_default_instance_;
class GameServerLoadCharacter;
struct GameServerLoadCharacterDefaultTypeInternal;
extern GameServerLoadCharacterDefaultTypeInternal _GameServerLoadCharacter_default_instance_;
class GameServerLogin;
struct GameServerLoginDefaultTypeInternal;
extern GameServerLoginDefaultTypeInternal _GameServerLogin_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::GameClientLogin* Arena::CreateMaybeMessage<::Protocol::GameClientLogin>(Arena*);
template<> ::Protocol::GameServerLoadCharacter* Arena::CreateMaybeMessage<::Protocol::GameServerLoadCharacter>(Arena*);
template<> ::Protocol::GameServerLogin* Arena::CreateMaybeMessage<::Protocol::GameServerLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class GameClientLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameClientLogin) */ {
 public:
  inline GameClientLogin() : GameClientLogin(nullptr) {}
  ~GameClientLogin() override;
  explicit constexpr GameClientLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientLogin(const GameClientLogin& from);
  GameClientLogin(GameClientLogin&& from) noexcept
    : GameClientLogin() {
    *this = ::std::move(from);
  }

  inline GameClientLogin& operator=(const GameClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientLogin& operator=(GameClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientLogin* internal_default_instance() {
    return reinterpret_cast<const GameClientLogin*>(
               &_GameClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientLogin& a, GameClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientLogin* New() const final {
    return new GameClientLogin();
  }

  GameClientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientLogin& from);
  void MergeFrom(const GameClientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameClientLogin";
  }
  protected:
  explicit GameClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
  };
  // int64 auth = 1;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameClientLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerLogin) */ {
 public:
  inline GameServerLogin() : GameServerLogin(nullptr) {}
  ~GameServerLogin() override;
  explicit constexpr GameServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerLogin(const GameServerLogin& from);
  GameServerLogin(GameServerLogin&& from) noexcept
    : GameServerLogin() {
    *this = ::std::move(from);
  }

  inline GameServerLogin& operator=(const GameServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerLogin& operator=(GameServerLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerLogin* internal_default_instance() {
    return reinterpret_cast<const GameServerLogin*>(
               &_GameServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerLogin& a, GameServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerLogin* New() const final {
    return new GameServerLogin();
  }

  GameServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerLogin& from);
  void MergeFrom(const GameServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerLogin";
  }
  protected:
  explicit GameServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
  };
  // int64 auth = 1;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerLoadCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerLoadCharacter) */ {
 public:
  inline GameServerLoadCharacter() : GameServerLoadCharacter(nullptr) {}
  ~GameServerLoadCharacter() override;
  explicit constexpr GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerLoadCharacter(const GameServerLoadCharacter& from);
  GameServerLoadCharacter(GameServerLoadCharacter&& from) noexcept
    : GameServerLoadCharacter() {
    *this = ::std::move(from);
  }

  inline GameServerLoadCharacter& operator=(const GameServerLoadCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerLoadCharacter& operator=(GameServerLoadCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerLoadCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerLoadCharacter* internal_default_instance() {
    return reinterpret_cast<const GameServerLoadCharacter*>(
               &_GameServerLoadCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameServerLoadCharacter& a, GameServerLoadCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerLoadCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerLoadCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerLoadCharacter* New() const final {
    return new GameServerLoadCharacter();
  }

  GameServerLoadCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerLoadCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerLoadCharacter& from);
  void MergeFrom(const GameServerLoadCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerLoadCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerLoadCharacter";
  }
  protected:
  explicit GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 11,
    kNameFieldNumber = 4,
    kAccountIdFieldNumber = 2,
    kCharacterIdFieldNumber = 3,
    kStateFieldNumber = 1,
    kGenderFieldNumber = 5,
    kFaceIdFieldNumber = 6,
    kStrFieldNumber = 7,
    kDexFieldNumber = 8,
    kIntFieldNumber = 9,
    kLukFieldNumber = 10,
  };
  // repeated .Protocol.item items = 11;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
      mutable_items();
  private:
  const ::Protocol::item& _internal_items(int index) const;
  ::Protocol::item* _internal_add_items();
  public:
  const ::Protocol::item& items(int index) const;
  ::Protocol::item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
      items() const;

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::int64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 character_id = 3;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int64 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.kLoadState state = 1;
  void clear_state();
  ::Protocol::kLoadState state() const;
  void set_state(::Protocol::kLoadState value);
  private:
  ::Protocol::kLoadState _internal_state() const;
  void _internal_set_state(::Protocol::kLoadState value);
  public:

  // bool gender = 5;
  void clear_gender();
  bool gender() const;
  void set_gender(bool value);
  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);
  public:

  // int32 face_id = 6;
  void clear_face_id();
  ::PROTOBUF_NAMESPACE_ID::int32 face_id() const;
  void set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_face_id() const;
  void _internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 str = 7;
  void clear_str();
  ::PROTOBUF_NAMESPACE_ID::int32 str() const;
  void set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_str() const;
  void _internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dex = 8;
  void clear_dex();
  ::PROTOBUF_NAMESPACE_ID::int32 dex() const;
  void set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dex() const;
  void _internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int = 9;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_() const;
  void _internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 luk = 10;
  void clear_luk();
  ::PROTOBUF_NAMESPACE_ID::int32 luk() const;
  void set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luk() const;
  void _internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerLoadCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 character_id_;
  int state_;
  bool gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 face_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 str_;
  ::PROTOBUF_NAMESPACE_ID::int32 dex_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  ::PROTOBUF_NAMESPACE_ID::int32 luk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientLogin

// int64 auth = 1;
inline void GameClientLogin::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLogin::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLogin.auth)
  return _internal_auth();
}
inline void GameClientLogin::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void GameClientLogin::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientLogin.auth)
}

// -------------------------------------------------------------------

// GameServerLogin

// int64 auth = 1;
inline void GameServerLogin::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLogin::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLogin.auth)
  return _internal_auth();
}
inline void GameServerLogin::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void GameServerLogin::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLogin.auth)
}

// -------------------------------------------------------------------

// GameServerLoadCharacter

// .Protocol.kLoadState state = 1;
inline void GameServerLoadCharacter::clear_state() {
  state_ = 0;
}
inline ::Protocol::kLoadState GameServerLoadCharacter::_internal_state() const {
  return static_cast< ::Protocol::kLoadState >(state_);
}
inline ::Protocol::kLoadState GameServerLoadCharacter::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.state)
  return _internal_state();
}
inline void GameServerLoadCharacter::_internal_set_state(::Protocol::kLoadState value) {
  
  state_ = value;
}
inline void GameServerLoadCharacter::set_state(::Protocol::kLoadState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.state)
}

// int64 account_id = 2;
inline void GameServerLoadCharacter::clear_account_id() {
  account_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::account_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.account_id)
  return _internal_account_id();
}
inline void GameServerLoadCharacter::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_id_ = value;
}
inline void GameServerLoadCharacter::set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.account_id)
}

// int64 character_id = 3;
inline void GameServerLoadCharacter::clear_character_id() {
  character_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.character_id)
  return _internal_character_id();
}
inline void GameServerLoadCharacter::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  character_id_ = value;
}
inline void GameServerLoadCharacter::set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.character_id)
}

// bytes name = 4;
inline void GameServerLoadCharacter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameServerLoadCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerLoadCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.name)
}
inline std::string* GameServerLoadCharacter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLoadCharacter.name)
  return _internal_mutable_name();
}
inline const std::string& GameServerLoadCharacter::_internal_name() const {
  return name_.Get();
}
inline void GameServerLoadCharacter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerLoadCharacter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerLoadCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerLoadCharacter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerLoadCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerLoadCharacter.name)
}

// bool gender = 5;
inline void GameServerLoadCharacter::clear_gender() {
  gender_ = false;
}
inline bool GameServerLoadCharacter::_internal_gender() const {
  return gender_;
}
inline bool GameServerLoadCharacter::gender() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.gender)
  return _internal_gender();
}
inline void GameServerLoadCharacter::_internal_set_gender(bool value) {
  
  gender_ = value;
}
inline void GameServerLoadCharacter::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.gender)
}

// int32 face_id = 6;
inline void GameServerLoadCharacter::clear_face_id() {
  face_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_face_id() const {
  return face_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::face_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.face_id)
  return _internal_face_id();
}
inline void GameServerLoadCharacter::_internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  face_id_ = value;
}
inline void GameServerLoadCharacter::set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_face_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.face_id)
}

// int32 str = 7;
inline void GameServerLoadCharacter::clear_str() {
  str_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_str() const {
  return str_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::str() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.str)
  return _internal_str();
}
inline void GameServerLoadCharacter::_internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  str_ = value;
}
inline void GameServerLoadCharacter::set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.str)
}

// int32 dex = 8;
inline void GameServerLoadCharacter::clear_dex() {
  dex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_dex() const {
  return dex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::dex() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.dex)
  return _internal_dex();
}
inline void GameServerLoadCharacter::_internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dex_ = value;
}
inline void GameServerLoadCharacter::set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dex(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.dex)
}

// int32 int = 9;
inline void GameServerLoadCharacter::clear_int_() {
  int__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_int_() const {
  return int__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::int_() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.int)
  return _internal_int_();
}
inline void GameServerLoadCharacter::_internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int__ = value;
}
inline void GameServerLoadCharacter::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.int)
}

// int32 luk = 10;
inline void GameServerLoadCharacter::clear_luk() {
  luk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_luk() const {
  return luk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::luk() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.luk)
  return _internal_luk();
}
inline void GameServerLoadCharacter::_internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luk_ = value;
}
inline void GameServerLoadCharacter::set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luk(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.luk)
}

// repeated .Protocol.item items = 11;
inline int GameServerLoadCharacter::_internal_items_size() const {
  return items_.size();
}
inline int GameServerLoadCharacter::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::item* GameServerLoadCharacter::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLoadCharacter.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
GameServerLoadCharacter::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.GameServerLoadCharacter.items)
  return &items_;
}
inline const ::Protocol::item& GameServerLoadCharacter::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::item& GameServerLoadCharacter::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.items)
  return _internal_items(index);
}
inline ::Protocol::item* GameServerLoadCharacter::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::item* GameServerLoadCharacter::add_items() {
  // @@protoc_insertion_point(field_add:Protocol.GameServerLoadCharacter.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
GameServerLoadCharacter::items() const {
  // @@protoc_insertion_point(field_list:Protocol.GameServerLoadCharacter.items)
  return items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
