// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "game_enum.pb.h"
#include "game_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_game_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_game_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_game_5fprotocol_2eproto;
namespace Protocol {
class GameClientLoading;
struct GameClientLoadingDefaultTypeInternal;
extern GameClientLoadingDefaultTypeInternal _GameClientLoading_default_instance_;
class GameClientLogin;
struct GameClientLoginDefaultTypeInternal;
extern GameClientLoginDefaultTypeInternal _GameClientLogin_default_instance_;
class GameClientMovePlayer;
struct GameClientMovePlayerDefaultTypeInternal;
extern GameClientMovePlayerDefaultTypeInternal _GameClientMovePlayer_default_instance_;
class GameServerLoadCharacter;
struct GameServerLoadCharacterDefaultTypeInternal;
extern GameServerLoadCharacterDefaultTypeInternal _GameServerLoadCharacter_default_instance_;
class GameServerLogin;
struct GameServerLoginDefaultTypeInternal;
extern GameServerLoginDefaultTypeInternal _GameServerLogin_default_instance_;
class GameServerMoveMonster;
struct GameServerMoveMonsterDefaultTypeInternal;
extern GameServerMoveMonsterDefaultTypeInternal _GameServerMoveMonster_default_instance_;
class GameServerMovePlayer;
struct GameServerMovePlayerDefaultTypeInternal;
extern GameServerMovePlayerDefaultTypeInternal _GameServerMovePlayer_default_instance_;
class GameServerRespawnMonster;
struct GameServerRespawnMonsterDefaultTypeInternal;
extern GameServerRespawnMonsterDefaultTypeInternal _GameServerRespawnMonster_default_instance_;
class GameServerRespawnPlayer;
struct GameServerRespawnPlayerDefaultTypeInternal;
extern GameServerRespawnPlayerDefaultTypeInternal _GameServerRespawnPlayer_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::GameClientLoading* Arena::CreateMaybeMessage<::Protocol::GameClientLoading>(Arena*);
template<> ::Protocol::GameClientLogin* Arena::CreateMaybeMessage<::Protocol::GameClientLogin>(Arena*);
template<> ::Protocol::GameClientMovePlayer* Arena::CreateMaybeMessage<::Protocol::GameClientMovePlayer>(Arena*);
template<> ::Protocol::GameServerLoadCharacter* Arena::CreateMaybeMessage<::Protocol::GameServerLoadCharacter>(Arena*);
template<> ::Protocol::GameServerLogin* Arena::CreateMaybeMessage<::Protocol::GameServerLogin>(Arena*);
template<> ::Protocol::GameServerMoveMonster* Arena::CreateMaybeMessage<::Protocol::GameServerMoveMonster>(Arena*);
template<> ::Protocol::GameServerMovePlayer* Arena::CreateMaybeMessage<::Protocol::GameServerMovePlayer>(Arena*);
template<> ::Protocol::GameServerRespawnMonster* Arena::CreateMaybeMessage<::Protocol::GameServerRespawnMonster>(Arena*);
template<> ::Protocol::GameServerRespawnPlayer* Arena::CreateMaybeMessage<::Protocol::GameServerRespawnPlayer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class GameClientLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameClientLogin) */ {
 public:
  inline GameClientLogin() : GameClientLogin(nullptr) {}
  ~GameClientLogin() override;
  explicit constexpr GameClientLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientLogin(const GameClientLogin& from);
  GameClientLogin(GameClientLogin&& from) noexcept
    : GameClientLogin() {
    *this = ::std::move(from);
  }

  inline GameClientLogin& operator=(const GameClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientLogin& operator=(GameClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientLogin* internal_default_instance() {
    return reinterpret_cast<const GameClientLogin*>(
               &_GameClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameClientLogin& a, GameClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientLogin* New() const final {
    return new GameClientLogin();
  }

  GameClientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientLogin& from);
  void MergeFrom(const GameClientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameClientLogin";
  }
  protected:
  explicit GameClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
  };
  // int64 auth = 1;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameClientLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerLogin) */ {
 public:
  inline GameServerLogin() : GameServerLogin(nullptr) {}
  ~GameServerLogin() override;
  explicit constexpr GameServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerLogin(const GameServerLogin& from);
  GameServerLogin(GameServerLogin&& from) noexcept
    : GameServerLogin() {
    *this = ::std::move(from);
  }

  inline GameServerLogin& operator=(const GameServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerLogin& operator=(GameServerLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerLogin* internal_default_instance() {
    return reinterpret_cast<const GameServerLogin*>(
               &_GameServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GameServerLogin& a, GameServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerLogin* New() const final {
    return new GameServerLogin();
  }

  GameServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerLogin& from);
  void MergeFrom(const GameServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerLogin";
  }
  protected:
  explicit GameServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 1,
  };
  // int64 auth = 1;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerLoadCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerLoadCharacter) */ {
 public:
  inline GameServerLoadCharacter() : GameServerLoadCharacter(nullptr) {}
  ~GameServerLoadCharacter() override;
  explicit constexpr GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerLoadCharacter(const GameServerLoadCharacter& from);
  GameServerLoadCharacter(GameServerLoadCharacter&& from) noexcept
    : GameServerLoadCharacter() {
    *this = ::std::move(from);
  }

  inline GameServerLoadCharacter& operator=(const GameServerLoadCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerLoadCharacter& operator=(GameServerLoadCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerLoadCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerLoadCharacter* internal_default_instance() {
    return reinterpret_cast<const GameServerLoadCharacter*>(
               &_GameServerLoadCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GameServerLoadCharacter& a, GameServerLoadCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerLoadCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerLoadCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerLoadCharacter* New() const final {
    return new GameServerLoadCharacter();
  }

  GameServerLoadCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerLoadCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerLoadCharacter& from);
  void MergeFrom(const GameServerLoadCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerLoadCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerLoadCharacter";
  }
  protected:
  explicit GameServerLoadCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 21,
    kNameFieldNumber = 4,
    kAccountIdFieldNumber = 2,
    kCharacterIdFieldNumber = 3,
    kStateFieldNumber = 1,
    kGenderFieldNumber = 5,
    kFaceIdFieldNumber = 6,
    kStrFieldNumber = 7,
    kDexFieldNumber = 8,
    kIntFieldNumber = 9,
    kLukFieldNumber = 10,
    kPosXFieldNumber = 11,
    kPosYFieldNumber = 12,
    kPosZFieldNumber = 13,
    kHpFieldNumber = 14,
    kMaxHpFieldNumber = 15,
    kMpFieldNumber = 16,
    kMaxMpFieldNumber = 17,
    kLevelFieldNumber = 18,
    kExpFieldNumber = 19,
    kMoneyFieldNumber = 20,
  };
  // repeated .Protocol.item items = 21;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
      mutable_items();
  private:
  const ::Protocol::item& _internal_items(int index) const;
  ::Protocol::item* _internal_add_items();
  public:
  const ::Protocol::item& items(int index) const;
  ::Protocol::item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
      items() const;

  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 account_id = 2;
  void clear_account_id();
  ::PROTOBUF_NAMESPACE_ID::int64 account_id() const;
  void set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account_id() const;
  void _internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 character_id = 3;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int64 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.kLoadState state = 1;
  void clear_state();
  ::Protocol::kLoadState state() const;
  void set_state(::Protocol::kLoadState value);
  private:
  ::Protocol::kLoadState _internal_state() const;
  void _internal_set_state(::Protocol::kLoadState value);
  public:

  // bool gender = 5;
  void clear_gender();
  bool gender() const;
  void set_gender(bool value);
  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);
  public:

  // int32 face_id = 6;
  void clear_face_id();
  ::PROTOBUF_NAMESPACE_ID::int32 face_id() const;
  void set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_face_id() const;
  void _internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 str = 7;
  void clear_str();
  ::PROTOBUF_NAMESPACE_ID::int32 str() const;
  void set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_str() const;
  void _internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dex = 8;
  void clear_dex();
  ::PROTOBUF_NAMESPACE_ID::int32 dex() const;
  void set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dex() const;
  void _internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 int = 9;
  void clear_int_();
  ::PROTOBUF_NAMESPACE_ID::int32 int_() const;
  void set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_() const;
  void _internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 luk = 10;
  void clear_luk();
  ::PROTOBUF_NAMESPACE_ID::int32 luk() const;
  void set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_luk() const;
  void _internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 11;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 12;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 13;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // int32 hp = 14;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_hp = 15;
  void clear_max_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp() const;
  void set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_hp() const;
  void _internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 mp = 16;
  void clear_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 mp() const;
  void set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mp() const;
  void _internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_mp = 17;
  void clear_max_mp();
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp() const;
  void set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_mp() const;
  void _internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level = 18;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 exp = 19;
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 money = 20;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int32 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerLoadCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 character_id_;
  int state_;
  bool gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 face_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 str_;
  ::PROTOBUF_NAMESPACE_ID::int32 dex_;
  ::PROTOBUF_NAMESPACE_ID::int32 int__;
  ::PROTOBUF_NAMESPACE_ID::int32 luk_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_mp_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientLoading final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameClientLoading) */ {
 public:
  inline GameClientLoading() : GameClientLoading(nullptr) {}
  ~GameClientLoading() override;
  explicit constexpr GameClientLoading(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientLoading(const GameClientLoading& from);
  GameClientLoading(GameClientLoading&& from) noexcept
    : GameClientLoading() {
    *this = ::std::move(from);
  }

  inline GameClientLoading& operator=(const GameClientLoading& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientLoading& operator=(GameClientLoading&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientLoading& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientLoading* internal_default_instance() {
    return reinterpret_cast<const GameClientLoading*>(
               &_GameClientLoading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameClientLoading& a, GameClientLoading& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientLoading* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientLoading* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientLoading* New() const final {
    return new GameClientLoading();
  }

  GameClientLoading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientLoading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientLoading& from);
  void MergeFrom(const GameClientLoading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientLoading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameClientLoading";
  }
  protected:
  explicit GameClientLoading(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // int64 auth = 2;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.kLoadState state = 1;
  void clear_state();
  ::Protocol::kLoadState state() const;
  void set_state(::Protocol::kLoadState value);
  private:
  ::Protocol::kLoadState _internal_state() const;
  void _internal_set_state(::Protocol::kLoadState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameClientLoading)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerRespawnPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerRespawnPlayer) */ {
 public:
  inline GameServerRespawnPlayer() : GameServerRespawnPlayer(nullptr) {}
  ~GameServerRespawnPlayer() override;
  explicit constexpr GameServerRespawnPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerRespawnPlayer(const GameServerRespawnPlayer& from);
  GameServerRespawnPlayer(GameServerRespawnPlayer&& from) noexcept
    : GameServerRespawnPlayer() {
    *this = ::std::move(from);
  }

  inline GameServerRespawnPlayer& operator=(const GameServerRespawnPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerRespawnPlayer& operator=(GameServerRespawnPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerRespawnPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerRespawnPlayer* internal_default_instance() {
    return reinterpret_cast<const GameServerRespawnPlayer*>(
               &_GameServerRespawnPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GameServerRespawnPlayer& a, GameServerRespawnPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerRespawnPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerRespawnPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerRespawnPlayer* New() const final {
    return new GameServerRespawnPlayer();
  }

  GameServerRespawnPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerRespawnPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerRespawnPlayer& from);
  void MergeFrom(const GameServerRespawnPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerRespawnPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerRespawnPlayer";
  }
  protected:
  explicit GameServerRespawnPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 8,
    kNameFieldNumber = 2,
    kCharacterIdFieldNumber = 1,
    kGenderFieldNumber = 3,
    kFaceIdFieldNumber = 4,
    kPosXFieldNumber = 5,
    kPosYFieldNumber = 6,
    kPosZFieldNumber = 7,
  };
  // repeated .Protocol.item items = 8;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::Protocol::item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
      mutable_items();
  private:
  const ::Protocol::item& _internal_items(int index) const;
  ::Protocol::item* _internal_add_items();
  public:
  const ::Protocol::item& items(int index) const;
  ::Protocol::item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
      items() const;

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int64 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool gender = 3;
  void clear_gender();
  bool gender() const;
  void set_gender(bool value);
  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);
  public:

  // int32 face_id = 4;
  void clear_face_id();
  ::PROTOBUF_NAMESPACE_ID::int32 face_id() const;
  void set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_face_id() const;
  void _internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float pos_x = 5;
  void clear_pos_x();
  float pos_x() const;
  void set_pos_x(float value);
  private:
  float _internal_pos_x() const;
  void _internal_set_pos_x(float value);
  public:

  // float pos_y = 6;
  void clear_pos_y();
  float pos_y() const;
  void set_pos_y(float value);
  private:
  float _internal_pos_y() const;
  void _internal_set_pos_y(float value);
  public:

  // float pos_z = 7;
  void clear_pos_z();
  float pos_z() const;
  void set_pos_z(float value);
  private:
  float _internal_pos_z() const;
  void _internal_set_pos_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerRespawnPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item > items_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 character_id_;
  bool gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 face_id_;
  float pos_x_;
  float pos_y_;
  float pos_z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameClientMovePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameClientMovePlayer) */ {
 public:
  inline GameClientMovePlayer() : GameClientMovePlayer(nullptr) {}
  ~GameClientMovePlayer() override;
  explicit constexpr GameClientMovePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameClientMovePlayer(const GameClientMovePlayer& from);
  GameClientMovePlayer(GameClientMovePlayer&& from) noexcept
    : GameClientMovePlayer() {
    *this = ::std::move(from);
  }

  inline GameClientMovePlayer& operator=(const GameClientMovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameClientMovePlayer& operator=(GameClientMovePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameClientMovePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameClientMovePlayer* internal_default_instance() {
    return reinterpret_cast<const GameClientMovePlayer*>(
               &_GameClientMovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameClientMovePlayer& a, GameClientMovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameClientMovePlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameClientMovePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameClientMovePlayer* New() const final {
    return new GameClientMovePlayer();
  }

  GameClientMovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameClientMovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameClientMovePlayer& from);
  void MergeFrom(const GameClientMovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameClientMovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameClientMovePlayer";
  }
  protected:
  explicit GameClientMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 3,
    kStateFieldNumber = 1,
    kRadianFieldNumber = 2,
  };
  // .Protocol.float3 position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::float3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_position();
  ::Protocol::float3* mutable_position();
  void set_allocated_position(::Protocol::float3* position);
  private:
  const ::Protocol::float3& _internal_position() const;
  ::Protocol::float3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::float3* position);
  ::Protocol::float3* unsafe_arena_release_position();

  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float radian = 2;
  void clear_radian();
  float radian() const;
  void set_radian(float value);
  private:
  float _internal_radian() const;
  void _internal_set_radian(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameClientMovePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::float3* position_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  float radian_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerMovePlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerMovePlayer) */ {
 public:
  inline GameServerMovePlayer() : GameServerMovePlayer(nullptr) {}
  ~GameServerMovePlayer() override;
  explicit constexpr GameServerMovePlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerMovePlayer(const GameServerMovePlayer& from);
  GameServerMovePlayer(GameServerMovePlayer&& from) noexcept
    : GameServerMovePlayer() {
    *this = ::std::move(from);
  }

  inline GameServerMovePlayer& operator=(const GameServerMovePlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerMovePlayer& operator=(GameServerMovePlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerMovePlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerMovePlayer* internal_default_instance() {
    return reinterpret_cast<const GameServerMovePlayer*>(
               &_GameServerMovePlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameServerMovePlayer& a, GameServerMovePlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerMovePlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerMovePlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerMovePlayer* New() const final {
    return new GameServerMovePlayer();
  }

  GameServerMovePlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerMovePlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerMovePlayer& from);
  void MergeFrom(const GameServerMovePlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerMovePlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerMovePlayer";
  }
  protected:
  explicit GameServerMovePlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 4,
    kCharacterIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kRadianFieldNumber = 3,
  };
  // .Protocol.float3 position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::float3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_position();
  ::Protocol::float3* mutable_position();
  void set_allocated_position(::Protocol::float3* position);
  private:
  const ::Protocol::float3& _internal_position() const;
  ::Protocol::float3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::float3* position);
  ::Protocol::float3* unsafe_arena_release_position();

  // int64 character_id = 1;
  void clear_character_id();
  ::PROTOBUF_NAMESPACE_ID::int64 character_id() const;
  void set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_character_id() const;
  void _internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float radian = 3;
  void clear_radian();
  float radian() const;
  void set_radian(float value);
  private:
  float _internal_radian() const;
  void _internal_set_radian(float value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerMovePlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::float3* position_;
  ::PROTOBUF_NAMESPACE_ID::int64 character_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  float radian_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerRespawnMonster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerRespawnMonster) */ {
 public:
  inline GameServerRespawnMonster() : GameServerRespawnMonster(nullptr) {}
  ~GameServerRespawnMonster() override;
  explicit constexpr GameServerRespawnMonster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerRespawnMonster(const GameServerRespawnMonster& from);
  GameServerRespawnMonster(GameServerRespawnMonster&& from) noexcept
    : GameServerRespawnMonster() {
    *this = ::std::move(from);
  }

  inline GameServerRespawnMonster& operator=(const GameServerRespawnMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerRespawnMonster& operator=(GameServerRespawnMonster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerRespawnMonster& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerRespawnMonster* internal_default_instance() {
    return reinterpret_cast<const GameServerRespawnMonster*>(
               &_GameServerRespawnMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameServerRespawnMonster& a, GameServerRespawnMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerRespawnMonster* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerRespawnMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerRespawnMonster* New() const final {
    return new GameServerRespawnMonster();
  }

  GameServerRespawnMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerRespawnMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerRespawnMonster& from);
  void MergeFrom(const GameServerRespawnMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerRespawnMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerRespawnMonster";
  }
  protected:
  explicit GameServerRespawnMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightFieldNumber = 4,
    kUpFieldNumber = 5,
    kLookFieldNumber = 6,
    kPositionFieldNumber = 7,
    kObjectIdFieldNumber = 1,
    kMonsterIdFieldNumber = 2,
    kHpFieldNumber = 3,
    kIsSpawnFieldNumber = 8,
  };
  // .Protocol.float3 right = 4;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::Protocol::float3& right() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_right();
  ::Protocol::float3* mutable_right();
  void set_allocated_right(::Protocol::float3* right);
  private:
  const ::Protocol::float3& _internal_right() const;
  ::Protocol::float3* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::Protocol::float3* right);
  ::Protocol::float3* unsafe_arena_release_right();

  // .Protocol.float3 up = 5;
  bool has_up() const;
  private:
  bool _internal_has_up() const;
  public:
  void clear_up();
  const ::Protocol::float3& up() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_up();
  ::Protocol::float3* mutable_up();
  void set_allocated_up(::Protocol::float3* up);
  private:
  const ::Protocol::float3& _internal_up() const;
  ::Protocol::float3* _internal_mutable_up();
  public:
  void unsafe_arena_set_allocated_up(
      ::Protocol::float3* up);
  ::Protocol::float3* unsafe_arena_release_up();

  // .Protocol.float3 look = 6;
  bool has_look() const;
  private:
  bool _internal_has_look() const;
  public:
  void clear_look();
  const ::Protocol::float3& look() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_look();
  ::Protocol::float3* mutable_look();
  void set_allocated_look(::Protocol::float3* look);
  private:
  const ::Protocol::float3& _internal_look() const;
  ::Protocol::float3* _internal_mutable_look();
  public:
  void unsafe_arena_set_allocated_look(
      ::Protocol::float3* look);
  ::Protocol::float3* unsafe_arena_release_look();

  // .Protocol.float3 position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::float3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_position();
  ::Protocol::float3* mutable_position();
  void set_allocated_position(::Protocol::float3* position);
  private:
  const ::Protocol::float3& _internal_position() const;
  ::Protocol::float3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::float3* position);
  ::Protocol::float3* unsafe_arena_release_position();

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 monster_id = 2;
  void clear_monster_id();
  ::PROTOBUF_NAMESPACE_ID::int32 monster_id() const;
  void set_monster_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_monster_id() const;
  void _internal_set_monster_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp = 3;
  void clear_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 hp() const;
  void set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp() const;
  void _internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_spawn = 8;
  void clear_is_spawn();
  bool is_spawn() const;
  void set_is_spawn(bool value);
  private:
  bool _internal_is_spawn() const;
  void _internal_set_is_spawn(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerRespawnMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::float3* right_;
  ::Protocol::float3* up_;
  ::Protocol::float3* look_;
  ::Protocol::float3* position_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 monster_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_;
  bool is_spawn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class GameServerMoveMonster final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.GameServerMoveMonster) */ {
 public:
  inline GameServerMoveMonster() : GameServerMoveMonster(nullptr) {}
  ~GameServerMoveMonster() override;
  explicit constexpr GameServerMoveMonster(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameServerMoveMonster(const GameServerMoveMonster& from);
  GameServerMoveMonster(GameServerMoveMonster&& from) noexcept
    : GameServerMoveMonster() {
    *this = ::std::move(from);
  }

  inline GameServerMoveMonster& operator=(const GameServerMoveMonster& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameServerMoveMonster& operator=(GameServerMoveMonster&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameServerMoveMonster& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameServerMoveMonster* internal_default_instance() {
    return reinterpret_cast<const GameServerMoveMonster*>(
               &_GameServerMoveMonster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GameServerMoveMonster& a, GameServerMoveMonster& b) {
    a.Swap(&b);
  }
  inline void Swap(GameServerMoveMonster* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameServerMoveMonster* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameServerMoveMonster* New() const final {
    return new GameServerMoveMonster();
  }

  GameServerMoveMonster* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameServerMoveMonster>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameServerMoveMonster& from);
  void MergeFrom(const GameServerMoveMonster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameServerMoveMonster* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.GameServerMoveMonster";
  }
  protected:
  explicit GameServerMoveMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRightFieldNumber = 3,
    kUpFieldNumber = 4,
    kLookFieldNumber = 5,
    kPositionFieldNumber = 6,
    kCrightFieldNumber = 7,
    kCupFieldNumber = 8,
    kClookFieldNumber = 9,
    kCpositionFieldNumber = 10,
    kObjectIdFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .Protocol.float3 right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::Protocol::float3& right() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_right();
  ::Protocol::float3* mutable_right();
  void set_allocated_right(::Protocol::float3* right);
  private:
  const ::Protocol::float3& _internal_right() const;
  ::Protocol::float3* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::Protocol::float3* right);
  ::Protocol::float3* unsafe_arena_release_right();

  // .Protocol.float3 up = 4;
  bool has_up() const;
  private:
  bool _internal_has_up() const;
  public:
  void clear_up();
  const ::Protocol::float3& up() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_up();
  ::Protocol::float3* mutable_up();
  void set_allocated_up(::Protocol::float3* up);
  private:
  const ::Protocol::float3& _internal_up() const;
  ::Protocol::float3* _internal_mutable_up();
  public:
  void unsafe_arena_set_allocated_up(
      ::Protocol::float3* up);
  ::Protocol::float3* unsafe_arena_release_up();

  // .Protocol.float3 look = 5;
  bool has_look() const;
  private:
  bool _internal_has_look() const;
  public:
  void clear_look();
  const ::Protocol::float3& look() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_look();
  ::Protocol::float3* mutable_look();
  void set_allocated_look(::Protocol::float3* look);
  private:
  const ::Protocol::float3& _internal_look() const;
  ::Protocol::float3* _internal_mutable_look();
  public:
  void unsafe_arena_set_allocated_look(
      ::Protocol::float3* look);
  ::Protocol::float3* unsafe_arena_release_look();

  // .Protocol.float3 position = 6;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::Protocol::float3& position() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_position();
  ::Protocol::float3* mutable_position();
  void set_allocated_position(::Protocol::float3* position);
  private:
  const ::Protocol::float3& _internal_position() const;
  ::Protocol::float3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::Protocol::float3* position);
  ::Protocol::float3* unsafe_arena_release_position();

  // .Protocol.float3 cright = 7;
  bool has_cright() const;
  private:
  bool _internal_has_cright() const;
  public:
  void clear_cright();
  const ::Protocol::float3& cright() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_cright();
  ::Protocol::float3* mutable_cright();
  void set_allocated_cright(::Protocol::float3* cright);
  private:
  const ::Protocol::float3& _internal_cright() const;
  ::Protocol::float3* _internal_mutable_cright();
  public:
  void unsafe_arena_set_allocated_cright(
      ::Protocol::float3* cright);
  ::Protocol::float3* unsafe_arena_release_cright();

  // .Protocol.float3 cup = 8;
  bool has_cup() const;
  private:
  bool _internal_has_cup() const;
  public:
  void clear_cup();
  const ::Protocol::float3& cup() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_cup();
  ::Protocol::float3* mutable_cup();
  void set_allocated_cup(::Protocol::float3* cup);
  private:
  const ::Protocol::float3& _internal_cup() const;
  ::Protocol::float3* _internal_mutable_cup();
  public:
  void unsafe_arena_set_allocated_cup(
      ::Protocol::float3* cup);
  ::Protocol::float3* unsafe_arena_release_cup();

  // .Protocol.float3 clook = 9;
  bool has_clook() const;
  private:
  bool _internal_has_clook() const;
  public:
  void clear_clook();
  const ::Protocol::float3& clook() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_clook();
  ::Protocol::float3* mutable_clook();
  void set_allocated_clook(::Protocol::float3* clook);
  private:
  const ::Protocol::float3& _internal_clook() const;
  ::Protocol::float3* _internal_mutable_clook();
  public:
  void unsafe_arena_set_allocated_clook(
      ::Protocol::float3* clook);
  ::Protocol::float3* unsafe_arena_release_clook();

  // .Protocol.float3 cposition = 10;
  bool has_cposition() const;
  private:
  bool _internal_has_cposition() const;
  public:
  void clear_cposition();
  const ::Protocol::float3& cposition() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::float3* release_cposition();
  ::Protocol::float3* mutable_cposition();
  void set_allocated_cposition(::Protocol::float3* cposition);
  private:
  const ::Protocol::float3& _internal_cposition() const;
  ::Protocol::float3* _internal_mutable_cposition();
  public:
  void unsafe_arena_set_allocated_cposition(
      ::Protocol::float3* cposition);
  ::Protocol::float3* unsafe_arena_release_cposition();

  // int64 object_id = 1;
  void clear_object_id();
  ::PROTOBUF_NAMESPACE_ID::int64 object_id() const;
  void set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_object_id() const;
  void _internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Protocol.kMonsterState state = 2;
  void clear_state();
  ::Protocol::kMonsterState state() const;
  void set_state(::Protocol::kMonsterState value);
  private:
  ::Protocol::kMonsterState _internal_state() const;
  void _internal_set_state(::Protocol::kMonsterState value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.GameServerMoveMonster)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::float3* right_;
  ::Protocol::float3* up_;
  ::Protocol::float3* look_;
  ::Protocol::float3* position_;
  ::Protocol::float3* cright_;
  ::Protocol::float3* cup_;
  ::Protocol::float3* clook_;
  ::Protocol::float3* cposition_;
  ::PROTOBUF_NAMESPACE_ID::int64 object_id_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_game_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameClientLogin

// int64 auth = 1;
inline void GameClientLogin::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLogin::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLogin.auth)
  return _internal_auth();
}
inline void GameClientLogin::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void GameClientLogin::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientLogin.auth)
}

// -------------------------------------------------------------------

// GameServerLogin

// int64 auth = 1;
inline void GameServerLogin::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLogin::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLogin.auth)
  return _internal_auth();
}
inline void GameServerLogin::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void GameServerLogin::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLogin.auth)
}

// -------------------------------------------------------------------

// GameServerLoadCharacter

// .Protocol.kLoadState state = 1;
inline void GameServerLoadCharacter::clear_state() {
  state_ = 0;
}
inline ::Protocol::kLoadState GameServerLoadCharacter::_internal_state() const {
  return static_cast< ::Protocol::kLoadState >(state_);
}
inline ::Protocol::kLoadState GameServerLoadCharacter::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.state)
  return _internal_state();
}
inline void GameServerLoadCharacter::_internal_set_state(::Protocol::kLoadState value) {
  
  state_ = value;
}
inline void GameServerLoadCharacter::set_state(::Protocol::kLoadState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.state)
}

// int64 account_id = 2;
inline void GameServerLoadCharacter::clear_account_id() {
  account_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::_internal_account_id() const {
  return account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::account_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.account_id)
  return _internal_account_id();
}
inline void GameServerLoadCharacter::_internal_set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_id_ = value;
}
inline void GameServerLoadCharacter::set_account_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.account_id)
}

// int64 character_id = 3;
inline void GameServerLoadCharacter::clear_character_id() {
  character_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerLoadCharacter::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.character_id)
  return _internal_character_id();
}
inline void GameServerLoadCharacter::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  character_id_ = value;
}
inline void GameServerLoadCharacter::set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.character_id)
}

// bytes name = 4;
inline void GameServerLoadCharacter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameServerLoadCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerLoadCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.name)
}
inline std::string* GameServerLoadCharacter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLoadCharacter.name)
  return _internal_mutable_name();
}
inline const std::string& GameServerLoadCharacter::_internal_name() const {
  return name_.Get();
}
inline void GameServerLoadCharacter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerLoadCharacter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerLoadCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerLoadCharacter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerLoadCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerLoadCharacter.name)
}

// bool gender = 5;
inline void GameServerLoadCharacter::clear_gender() {
  gender_ = false;
}
inline bool GameServerLoadCharacter::_internal_gender() const {
  return gender_;
}
inline bool GameServerLoadCharacter::gender() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.gender)
  return _internal_gender();
}
inline void GameServerLoadCharacter::_internal_set_gender(bool value) {
  
  gender_ = value;
}
inline void GameServerLoadCharacter::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.gender)
}

// int32 face_id = 6;
inline void GameServerLoadCharacter::clear_face_id() {
  face_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_face_id() const {
  return face_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::face_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.face_id)
  return _internal_face_id();
}
inline void GameServerLoadCharacter::_internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  face_id_ = value;
}
inline void GameServerLoadCharacter::set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_face_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.face_id)
}

// int32 str = 7;
inline void GameServerLoadCharacter::clear_str() {
  str_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_str() const {
  return str_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::str() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.str)
  return _internal_str();
}
inline void GameServerLoadCharacter::_internal_set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  str_ = value;
}
inline void GameServerLoadCharacter::set_str(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_str(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.str)
}

// int32 dex = 8;
inline void GameServerLoadCharacter::clear_dex() {
  dex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_dex() const {
  return dex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::dex() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.dex)
  return _internal_dex();
}
inline void GameServerLoadCharacter::_internal_set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dex_ = value;
}
inline void GameServerLoadCharacter::set_dex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dex(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.dex)
}

// int32 int = 9;
inline void GameServerLoadCharacter::clear_int_() {
  int__ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_int_() const {
  return int__;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::int_() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.int)
  return _internal_int_();
}
inline void GameServerLoadCharacter::_internal_set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  int__ = value;
}
inline void GameServerLoadCharacter::set_int_(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.int)
}

// int32 luk = 10;
inline void GameServerLoadCharacter::clear_luk() {
  luk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_luk() const {
  return luk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::luk() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.luk)
  return _internal_luk();
}
inline void GameServerLoadCharacter::_internal_set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  luk_ = value;
}
inline void GameServerLoadCharacter::set_luk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_luk(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.luk)
}

// float pos_x = 11;
inline void GameServerLoadCharacter::clear_pos_x() {
  pos_x_ = 0;
}
inline float GameServerLoadCharacter::_internal_pos_x() const {
  return pos_x_;
}
inline float GameServerLoadCharacter::pos_x() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.pos_x)
  return _internal_pos_x();
}
inline void GameServerLoadCharacter::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void GameServerLoadCharacter::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.pos_x)
}

// float pos_y = 12;
inline void GameServerLoadCharacter::clear_pos_y() {
  pos_y_ = 0;
}
inline float GameServerLoadCharacter::_internal_pos_y() const {
  return pos_y_;
}
inline float GameServerLoadCharacter::pos_y() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.pos_y)
  return _internal_pos_y();
}
inline void GameServerLoadCharacter::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void GameServerLoadCharacter::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.pos_y)
}

// float pos_z = 13;
inline void GameServerLoadCharacter::clear_pos_z() {
  pos_z_ = 0;
}
inline float GameServerLoadCharacter::_internal_pos_z() const {
  return pos_z_;
}
inline float GameServerLoadCharacter::pos_z() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.pos_z)
  return _internal_pos_z();
}
inline void GameServerLoadCharacter::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void GameServerLoadCharacter::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.pos_z)
}

// int32 hp = 14;
inline void GameServerLoadCharacter::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.hp)
  return _internal_hp();
}
inline void GameServerLoadCharacter::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void GameServerLoadCharacter::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.hp)
}

// int32 max_hp = 15;
inline void GameServerLoadCharacter::clear_max_hp() {
  max_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_max_hp() const {
  return max_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::max_hp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.max_hp)
  return _internal_max_hp();
}
inline void GameServerLoadCharacter::_internal_set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_hp_ = value;
}
inline void GameServerLoadCharacter::set_max_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.max_hp)
}

// int32 mp = 16;
inline void GameServerLoadCharacter::clear_mp() {
  mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_mp() const {
  return mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::mp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.mp)
  return _internal_mp();
}
inline void GameServerLoadCharacter::_internal_set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mp_ = value;
}
inline void GameServerLoadCharacter::set_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.mp)
}

// int32 max_mp = 17;
inline void GameServerLoadCharacter::clear_max_mp() {
  max_mp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_max_mp() const {
  return max_mp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::max_mp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.max_mp)
  return _internal_max_mp();
}
inline void GameServerLoadCharacter::_internal_set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_mp_ = value;
}
inline void GameServerLoadCharacter::set_max_mp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_mp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.max_mp)
}

// int32 level = 18;
inline void GameServerLoadCharacter::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::level() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.level)
  return _internal_level();
}
inline void GameServerLoadCharacter::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void GameServerLoadCharacter::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.level)
}

// int32 exp = 19;
inline void GameServerLoadCharacter::clear_exp() {
  exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_exp() const {
  return exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::exp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.exp)
  return _internal_exp();
}
inline void GameServerLoadCharacter::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exp_ = value;
}
inline void GameServerLoadCharacter::set_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.exp)
}

// int32 money = 20;
inline void GameServerLoadCharacter::clear_money() {
  money_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerLoadCharacter::money() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.money)
  return _internal_money();
}
inline void GameServerLoadCharacter::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  money_ = value;
}
inline void GameServerLoadCharacter::set_money(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerLoadCharacter.money)
}

// repeated .Protocol.item items = 21;
inline int GameServerLoadCharacter::_internal_items_size() const {
  return items_.size();
}
inline int GameServerLoadCharacter::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::item* GameServerLoadCharacter::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerLoadCharacter.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
GameServerLoadCharacter::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.GameServerLoadCharacter.items)
  return &items_;
}
inline const ::Protocol::item& GameServerLoadCharacter::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::item& GameServerLoadCharacter::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerLoadCharacter.items)
  return _internal_items(index);
}
inline ::Protocol::item* GameServerLoadCharacter::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::item* GameServerLoadCharacter::add_items() {
  // @@protoc_insertion_point(field_add:Protocol.GameServerLoadCharacter.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
GameServerLoadCharacter::items() const {
  // @@protoc_insertion_point(field_list:Protocol.GameServerLoadCharacter.items)
  return items_;
}

// -------------------------------------------------------------------

// GameClientLoading

// .Protocol.kLoadState state = 1;
inline void GameClientLoading::clear_state() {
  state_ = 0;
}
inline ::Protocol::kLoadState GameClientLoading::_internal_state() const {
  return static_cast< ::Protocol::kLoadState >(state_);
}
inline ::Protocol::kLoadState GameClientLoading::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLoading.state)
  return _internal_state();
}
inline void GameClientLoading::_internal_set_state(::Protocol::kLoadState value) {
  
  state_ = value;
}
inline void GameClientLoading::set_state(::Protocol::kLoadState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientLoading.state)
}

// int64 auth = 2;
inline void GameClientLoading::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLoading::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameClientLoading::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientLoading.auth)
  return _internal_auth();
}
inline void GameClientLoading::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void GameClientLoading::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientLoading.auth)
}

// -------------------------------------------------------------------

// GameServerRespawnPlayer

// int64 character_id = 1;
inline void GameServerRespawnPlayer::clear_character_id() {
  character_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRespawnPlayer::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRespawnPlayer::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.character_id)
  return _internal_character_id();
}
inline void GameServerRespawnPlayer::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  character_id_ = value;
}
inline void GameServerRespawnPlayer::set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.character_id)
}

// bytes name = 2;
inline void GameServerRespawnPlayer::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GameServerRespawnPlayer::name() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GameServerRespawnPlayer::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.name)
}
inline std::string* GameServerRespawnPlayer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnPlayer.name)
  return _internal_mutable_name();
}
inline const std::string& GameServerRespawnPlayer::_internal_name() const {
  return name_.Get();
}
inline void GameServerRespawnPlayer::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GameServerRespawnPlayer::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GameServerRespawnPlayer::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerRespawnPlayer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GameServerRespawnPlayer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerRespawnPlayer.name)
}

// bool gender = 3;
inline void GameServerRespawnPlayer::clear_gender() {
  gender_ = false;
}
inline bool GameServerRespawnPlayer::_internal_gender() const {
  return gender_;
}
inline bool GameServerRespawnPlayer::gender() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.gender)
  return _internal_gender();
}
inline void GameServerRespawnPlayer::_internal_set_gender(bool value) {
  
  gender_ = value;
}
inline void GameServerRespawnPlayer::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.gender)
}

// int32 face_id = 4;
inline void GameServerRespawnPlayer::clear_face_id() {
  face_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnPlayer::_internal_face_id() const {
  return face_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnPlayer::face_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.face_id)
  return _internal_face_id();
}
inline void GameServerRespawnPlayer::_internal_set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  face_id_ = value;
}
inline void GameServerRespawnPlayer::set_face_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_face_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.face_id)
}

// float pos_x = 5;
inline void GameServerRespawnPlayer::clear_pos_x() {
  pos_x_ = 0;
}
inline float GameServerRespawnPlayer::_internal_pos_x() const {
  return pos_x_;
}
inline float GameServerRespawnPlayer::pos_x() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.pos_x)
  return _internal_pos_x();
}
inline void GameServerRespawnPlayer::_internal_set_pos_x(float value) {
  
  pos_x_ = value;
}
inline void GameServerRespawnPlayer::set_pos_x(float value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.pos_x)
}

// float pos_y = 6;
inline void GameServerRespawnPlayer::clear_pos_y() {
  pos_y_ = 0;
}
inline float GameServerRespawnPlayer::_internal_pos_y() const {
  return pos_y_;
}
inline float GameServerRespawnPlayer::pos_y() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.pos_y)
  return _internal_pos_y();
}
inline void GameServerRespawnPlayer::_internal_set_pos_y(float value) {
  
  pos_y_ = value;
}
inline void GameServerRespawnPlayer::set_pos_y(float value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.pos_y)
}

// float pos_z = 7;
inline void GameServerRespawnPlayer::clear_pos_z() {
  pos_z_ = 0;
}
inline float GameServerRespawnPlayer::_internal_pos_z() const {
  return pos_z_;
}
inline float GameServerRespawnPlayer::pos_z() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.pos_z)
  return _internal_pos_z();
}
inline void GameServerRespawnPlayer::_internal_set_pos_z(float value) {
  
  pos_z_ = value;
}
inline void GameServerRespawnPlayer::set_pos_z(float value) {
  _internal_set_pos_z(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnPlayer.pos_z)
}

// repeated .Protocol.item items = 8;
inline int GameServerRespawnPlayer::_internal_items_size() const {
  return items_.size();
}
inline int GameServerRespawnPlayer::items_size() const {
  return _internal_items_size();
}
inline ::Protocol::item* GameServerRespawnPlayer::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnPlayer.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >*
GameServerRespawnPlayer::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.GameServerRespawnPlayer.items)
  return &items_;
}
inline const ::Protocol::item& GameServerRespawnPlayer::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::Protocol::item& GameServerRespawnPlayer::items(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnPlayer.items)
  return _internal_items(index);
}
inline ::Protocol::item* GameServerRespawnPlayer::_internal_add_items() {
  return items_.Add();
}
inline ::Protocol::item* GameServerRespawnPlayer::add_items() {
  // @@protoc_insertion_point(field_add:Protocol.GameServerRespawnPlayer.items)
  return _internal_add_items();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::item >&
GameServerRespawnPlayer::items() const {
  // @@protoc_insertion_point(field_list:Protocol.GameServerRespawnPlayer.items)
  return items_;
}

// -------------------------------------------------------------------

// GameClientMovePlayer

// int32 state = 1;
inline void GameClientMovePlayer::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientMovePlayer::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameClientMovePlayer::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientMovePlayer.state)
  return _internal_state();
}
inline void GameClientMovePlayer::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void GameClientMovePlayer::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientMovePlayer.state)
}

// float radian = 2;
inline void GameClientMovePlayer::clear_radian() {
  radian_ = 0;
}
inline float GameClientMovePlayer::_internal_radian() const {
  return radian_;
}
inline float GameClientMovePlayer::radian() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientMovePlayer.radian)
  return _internal_radian();
}
inline void GameClientMovePlayer::_internal_set_radian(float value) {
  
  radian_ = value;
}
inline void GameClientMovePlayer::set_radian(float value) {
  _internal_set_radian(value);
  // @@protoc_insertion_point(field_set:Protocol.GameClientMovePlayer.radian)
}

// .Protocol.float3 position = 3;
inline bool GameClientMovePlayer::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameClientMovePlayer::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::float3& GameClientMovePlayer::_internal_position() const {
  const ::Protocol::float3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameClientMovePlayer::position() const {
  // @@protoc_insertion_point(field_get:Protocol.GameClientMovePlayer.position)
  return _internal_position();
}
inline void GameClientMovePlayer::unsafe_arena_set_allocated_position(
    ::Protocol::float3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameClientMovePlayer.position)
}
inline ::Protocol::float3* GameClientMovePlayer::release_position() {
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameClientMovePlayer::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.GameClientMovePlayer.position)
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameClientMovePlayer::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::float3* GameClientMovePlayer::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameClientMovePlayer.position)
  return _internal_mutable_position();
}
inline void GameClientMovePlayer::set_allocated_position(::Protocol::float3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameClientMovePlayer.position)
}

// -------------------------------------------------------------------

// GameServerMovePlayer

// int64 character_id = 1;
inline void GameServerMovePlayer::clear_character_id() {
  character_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMovePlayer::_internal_character_id() const {
  return character_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMovePlayer::character_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMovePlayer.character_id)
  return _internal_character_id();
}
inline void GameServerMovePlayer::_internal_set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  character_id_ = value;
}
inline void GameServerMovePlayer::set_character_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_character_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerMovePlayer.character_id)
}

// int32 state = 2;
inline void GameServerMovePlayer::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerMovePlayer::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerMovePlayer::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMovePlayer.state)
  return _internal_state();
}
inline void GameServerMovePlayer::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void GameServerMovePlayer::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerMovePlayer.state)
}

// float radian = 3;
inline void GameServerMovePlayer::clear_radian() {
  radian_ = 0;
}
inline float GameServerMovePlayer::_internal_radian() const {
  return radian_;
}
inline float GameServerMovePlayer::radian() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMovePlayer.radian)
  return _internal_radian();
}
inline void GameServerMovePlayer::_internal_set_radian(float value) {
  
  radian_ = value;
}
inline void GameServerMovePlayer::set_radian(float value) {
  _internal_set_radian(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerMovePlayer.radian)
}

// .Protocol.float3 position = 4;
inline bool GameServerMovePlayer::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameServerMovePlayer::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::float3& GameServerMovePlayer::_internal_position() const {
  const ::Protocol::float3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMovePlayer::position() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMovePlayer.position)
  return _internal_position();
}
inline void GameServerMovePlayer::unsafe_arena_set_allocated_position(
    ::Protocol::float3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMovePlayer.position)
}
inline ::Protocol::float3* GameServerMovePlayer::release_position() {
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMovePlayer::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMovePlayer.position)
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMovePlayer::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::float3* GameServerMovePlayer::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMovePlayer.position)
  return _internal_mutable_position();
}
inline void GameServerMovePlayer::set_allocated_position(::Protocol::float3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMovePlayer.position)
}

// -------------------------------------------------------------------

// GameServerRespawnMonster

// int64 object_id = 1;
inline void GameServerRespawnMonster::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRespawnMonster::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerRespawnMonster::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.object_id)
  return _internal_object_id();
}
inline void GameServerRespawnMonster::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerRespawnMonster::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnMonster.object_id)
}

// int32 monster_id = 2;
inline void GameServerRespawnMonster::clear_monster_id() {
  monster_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnMonster::_internal_monster_id() const {
  return monster_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnMonster::monster_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.monster_id)
  return _internal_monster_id();
}
inline void GameServerRespawnMonster::_internal_set_monster_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  monster_id_ = value;
}
inline void GameServerRespawnMonster::set_monster_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_monster_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnMonster.monster_id)
}

// int32 hp = 3;
inline void GameServerRespawnMonster::clear_hp() {
  hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnMonster::_internal_hp() const {
  return hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GameServerRespawnMonster::hp() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.hp)
  return _internal_hp();
}
inline void GameServerRespawnMonster::_internal_set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_ = value;
}
inline void GameServerRespawnMonster::set_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnMonster.hp)
}

// .Protocol.float3 right = 4;
inline bool GameServerRespawnMonster::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool GameServerRespawnMonster::has_right() const {
  return _internal_has_right();
}
inline const ::Protocol::float3& GameServerRespawnMonster::_internal_right() const {
  const ::Protocol::float3* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerRespawnMonster::right() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.right)
  return _internal_right();
}
inline void GameServerRespawnMonster::unsafe_arena_set_allocated_right(
    ::Protocol::float3* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerRespawnMonster.right)
}
inline ::Protocol::float3* GameServerRespawnMonster::release_right() {
  
  ::Protocol::float3* temp = right_;
  right_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerRespawnMonster.right)
  
  ::Protocol::float3* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    right_ = p;
  }
  return right_;
}
inline ::Protocol::float3* GameServerRespawnMonster::mutable_right() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnMonster.right)
  return _internal_mutable_right();
}
inline void GameServerRespawnMonster::set_allocated_right(::Protocol::float3* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right));
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerRespawnMonster.right)
}

// .Protocol.float3 up = 5;
inline bool GameServerRespawnMonster::_internal_has_up() const {
  return this != internal_default_instance() && up_ != nullptr;
}
inline bool GameServerRespawnMonster::has_up() const {
  return _internal_has_up();
}
inline const ::Protocol::float3& GameServerRespawnMonster::_internal_up() const {
  const ::Protocol::float3* p = up_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerRespawnMonster::up() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.up)
  return _internal_up();
}
inline void GameServerRespawnMonster::unsafe_arena_set_allocated_up(
    ::Protocol::float3* up) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_);
  }
  up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerRespawnMonster.up)
}
inline ::Protocol::float3* GameServerRespawnMonster::release_up() {
  
  ::Protocol::float3* temp = up_;
  up_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::unsafe_arena_release_up() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerRespawnMonster.up)
  
  ::Protocol::float3* temp = up_;
  up_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::_internal_mutable_up() {
  
  if (up_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    up_ = p;
  }
  return up_;
}
inline ::Protocol::float3* GameServerRespawnMonster::mutable_up() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnMonster.up)
  return _internal_mutable_up();
}
inline void GameServerRespawnMonster::set_allocated_up(::Protocol::float3* up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_);
  }
  if (up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up));
    if (message_arena != submessage_arena) {
      up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up, submessage_arena);
    }
    
  } else {
    
  }
  up_ = up;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerRespawnMonster.up)
}

// .Protocol.float3 look = 6;
inline bool GameServerRespawnMonster::_internal_has_look() const {
  return this != internal_default_instance() && look_ != nullptr;
}
inline bool GameServerRespawnMonster::has_look() const {
  return _internal_has_look();
}
inline const ::Protocol::float3& GameServerRespawnMonster::_internal_look() const {
  const ::Protocol::float3* p = look_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerRespawnMonster::look() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.look)
  return _internal_look();
}
inline void GameServerRespawnMonster::unsafe_arena_set_allocated_look(
    ::Protocol::float3* look) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_);
  }
  look_ = look;
  if (look) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerRespawnMonster.look)
}
inline ::Protocol::float3* GameServerRespawnMonster::release_look() {
  
  ::Protocol::float3* temp = look_;
  look_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::unsafe_arena_release_look() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerRespawnMonster.look)
  
  ::Protocol::float3* temp = look_;
  look_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::_internal_mutable_look() {
  
  if (look_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    look_ = p;
  }
  return look_;
}
inline ::Protocol::float3* GameServerRespawnMonster::mutable_look() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnMonster.look)
  return _internal_mutable_look();
}
inline void GameServerRespawnMonster::set_allocated_look(::Protocol::float3* look) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_);
  }
  if (look) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look));
    if (message_arena != submessage_arena) {
      look = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, look, submessage_arena);
    }
    
  } else {
    
  }
  look_ = look;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerRespawnMonster.look)
}

// .Protocol.float3 position = 7;
inline bool GameServerRespawnMonster::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameServerRespawnMonster::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::float3& GameServerRespawnMonster::_internal_position() const {
  const ::Protocol::float3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerRespawnMonster::position() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.position)
  return _internal_position();
}
inline void GameServerRespawnMonster::unsafe_arena_set_allocated_position(
    ::Protocol::float3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerRespawnMonster.position)
}
inline ::Protocol::float3* GameServerRespawnMonster::release_position() {
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerRespawnMonster.position)
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerRespawnMonster::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::float3* GameServerRespawnMonster::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerRespawnMonster.position)
  return _internal_mutable_position();
}
inline void GameServerRespawnMonster::set_allocated_position(::Protocol::float3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerRespawnMonster.position)
}

// bool is_spawn = 8;
inline void GameServerRespawnMonster::clear_is_spawn() {
  is_spawn_ = false;
}
inline bool GameServerRespawnMonster::_internal_is_spawn() const {
  return is_spawn_;
}
inline bool GameServerRespawnMonster::is_spawn() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerRespawnMonster.is_spawn)
  return _internal_is_spawn();
}
inline void GameServerRespawnMonster::_internal_set_is_spawn(bool value) {
  
  is_spawn_ = value;
}
inline void GameServerRespawnMonster::set_is_spawn(bool value) {
  _internal_set_is_spawn(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerRespawnMonster.is_spawn)
}

// -------------------------------------------------------------------

// GameServerMoveMonster

// int64 object_id = 1;
inline void GameServerMoveMonster::clear_object_id() {
  object_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMoveMonster::_internal_object_id() const {
  return object_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GameServerMoveMonster::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.object_id)
  return _internal_object_id();
}
inline void GameServerMoveMonster::_internal_set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  object_id_ = value;
}
inline void GameServerMoveMonster::set_object_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerMoveMonster.object_id)
}

// .Protocol.kMonsterState state = 2;
inline void GameServerMoveMonster::clear_state() {
  state_ = 0;
}
inline ::Protocol::kMonsterState GameServerMoveMonster::_internal_state() const {
  return static_cast< ::Protocol::kMonsterState >(state_);
}
inline ::Protocol::kMonsterState GameServerMoveMonster::state() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.state)
  return _internal_state();
}
inline void GameServerMoveMonster::_internal_set_state(::Protocol::kMonsterState value) {
  
  state_ = value;
}
inline void GameServerMoveMonster::set_state(::Protocol::kMonsterState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.GameServerMoveMonster.state)
}

// .Protocol.float3 right = 3;
inline bool GameServerMoveMonster::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool GameServerMoveMonster::has_right() const {
  return _internal_has_right();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_right() const {
  const ::Protocol::float3* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::right() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.right)
  return _internal_right();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_right(
    ::Protocol::float3* right) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.right)
}
inline ::Protocol::float3* GameServerMoveMonster::release_right() {
  
  ::Protocol::float3* temp = right_;
  right_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.right)
  
  ::Protocol::float3* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    right_ = p;
  }
  return right_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_right() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.right)
  return _internal_mutable_right();
}
inline void GameServerMoveMonster::set_allocated_right(::Protocol::float3* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right));
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.right)
}

// .Protocol.float3 up = 4;
inline bool GameServerMoveMonster::_internal_has_up() const {
  return this != internal_default_instance() && up_ != nullptr;
}
inline bool GameServerMoveMonster::has_up() const {
  return _internal_has_up();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_up() const {
  const ::Protocol::float3* p = up_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::up() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.up)
  return _internal_up();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_up(
    ::Protocol::float3* up) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_);
  }
  up_ = up;
  if (up) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.up)
}
inline ::Protocol::float3* GameServerMoveMonster::release_up() {
  
  ::Protocol::float3* temp = up_;
  up_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_up() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.up)
  
  ::Protocol::float3* temp = up_;
  up_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_up() {
  
  if (up_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    up_ = p;
  }
  return up_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_up() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.up)
  return _internal_mutable_up();
}
inline void GameServerMoveMonster::set_allocated_up(::Protocol::float3* up) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(up_);
  }
  if (up) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(up));
    if (message_arena != submessage_arena) {
      up = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, up, submessage_arena);
    }
    
  } else {
    
  }
  up_ = up;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.up)
}

// .Protocol.float3 look = 5;
inline bool GameServerMoveMonster::_internal_has_look() const {
  return this != internal_default_instance() && look_ != nullptr;
}
inline bool GameServerMoveMonster::has_look() const {
  return _internal_has_look();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_look() const {
  const ::Protocol::float3* p = look_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::look() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.look)
  return _internal_look();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_look(
    ::Protocol::float3* look) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_);
  }
  look_ = look;
  if (look) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.look)
}
inline ::Protocol::float3* GameServerMoveMonster::release_look() {
  
  ::Protocol::float3* temp = look_;
  look_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_look() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.look)
  
  ::Protocol::float3* temp = look_;
  look_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_look() {
  
  if (look_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    look_ = p;
  }
  return look_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_look() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.look)
  return _internal_mutable_look();
}
inline void GameServerMoveMonster::set_allocated_look(::Protocol::float3* look) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(look_);
  }
  if (look) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(look));
    if (message_arena != submessage_arena) {
      look = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, look, submessage_arena);
    }
    
  } else {
    
  }
  look_ = look;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.look)
}

// .Protocol.float3 position = 6;
inline bool GameServerMoveMonster::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool GameServerMoveMonster::has_position() const {
  return _internal_has_position();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_position() const {
  const ::Protocol::float3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::position() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.position)
  return _internal_position();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_position(
    ::Protocol::float3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.position)
}
inline ::Protocol::float3* GameServerMoveMonster::release_position() {
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.position)
  
  ::Protocol::float3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_position() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.position)
  return _internal_mutable_position();
}
inline void GameServerMoveMonster::set_allocated_position(::Protocol::float3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.position)
}

// .Protocol.float3 cright = 7;
inline bool GameServerMoveMonster::_internal_has_cright() const {
  return this != internal_default_instance() && cright_ != nullptr;
}
inline bool GameServerMoveMonster::has_cright() const {
  return _internal_has_cright();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_cright() const {
  const ::Protocol::float3* p = cright_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::cright() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.cright)
  return _internal_cright();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_cright(
    ::Protocol::float3* cright) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cright_);
  }
  cright_ = cright;
  if (cright) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.cright)
}
inline ::Protocol::float3* GameServerMoveMonster::release_cright() {
  
  ::Protocol::float3* temp = cright_;
  cright_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_cright() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.cright)
  
  ::Protocol::float3* temp = cright_;
  cright_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_cright() {
  
  if (cright_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    cright_ = p;
  }
  return cright_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_cright() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.cright)
  return _internal_mutable_cright();
}
inline void GameServerMoveMonster::set_allocated_cright(::Protocol::float3* cright) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cright_);
  }
  if (cright) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cright));
    if (message_arena != submessage_arena) {
      cright = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cright, submessage_arena);
    }
    
  } else {
    
  }
  cright_ = cright;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.cright)
}

// .Protocol.float3 cup = 8;
inline bool GameServerMoveMonster::_internal_has_cup() const {
  return this != internal_default_instance() && cup_ != nullptr;
}
inline bool GameServerMoveMonster::has_cup() const {
  return _internal_has_cup();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_cup() const {
  const ::Protocol::float3* p = cup_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::cup() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.cup)
  return _internal_cup();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_cup(
    ::Protocol::float3* cup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cup_);
  }
  cup_ = cup;
  if (cup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.cup)
}
inline ::Protocol::float3* GameServerMoveMonster::release_cup() {
  
  ::Protocol::float3* temp = cup_;
  cup_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_cup() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.cup)
  
  ::Protocol::float3* temp = cup_;
  cup_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_cup() {
  
  if (cup_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    cup_ = p;
  }
  return cup_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_cup() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.cup)
  return _internal_mutable_cup();
}
inline void GameServerMoveMonster::set_allocated_cup(::Protocol::float3* cup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cup_);
  }
  if (cup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cup));
    if (message_arena != submessage_arena) {
      cup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cup, submessage_arena);
    }
    
  } else {
    
  }
  cup_ = cup;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.cup)
}

// .Protocol.float3 clook = 9;
inline bool GameServerMoveMonster::_internal_has_clook() const {
  return this != internal_default_instance() && clook_ != nullptr;
}
inline bool GameServerMoveMonster::has_clook() const {
  return _internal_has_clook();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_clook() const {
  const ::Protocol::float3* p = clook_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::clook() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.clook)
  return _internal_clook();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_clook(
    ::Protocol::float3* clook) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clook_);
  }
  clook_ = clook;
  if (clook) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.clook)
}
inline ::Protocol::float3* GameServerMoveMonster::release_clook() {
  
  ::Protocol::float3* temp = clook_;
  clook_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_clook() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.clook)
  
  ::Protocol::float3* temp = clook_;
  clook_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_clook() {
  
  if (clook_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    clook_ = p;
  }
  return clook_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_clook() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.clook)
  return _internal_mutable_clook();
}
inline void GameServerMoveMonster::set_allocated_clook(::Protocol::float3* clook) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(clook_);
  }
  if (clook) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(clook));
    if (message_arena != submessage_arena) {
      clook = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clook, submessage_arena);
    }
    
  } else {
    
  }
  clook_ = clook;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.clook)
}

// .Protocol.float3 cposition = 10;
inline bool GameServerMoveMonster::_internal_has_cposition() const {
  return this != internal_default_instance() && cposition_ != nullptr;
}
inline bool GameServerMoveMonster::has_cposition() const {
  return _internal_has_cposition();
}
inline const ::Protocol::float3& GameServerMoveMonster::_internal_cposition() const {
  const ::Protocol::float3* p = cposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::float3&>(
      ::Protocol::_float3_default_instance_);
}
inline const ::Protocol::float3& GameServerMoveMonster::cposition() const {
  // @@protoc_insertion_point(field_get:Protocol.GameServerMoveMonster.cposition)
  return _internal_cposition();
}
inline void GameServerMoveMonster::unsafe_arena_set_allocated_cposition(
    ::Protocol::float3* cposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cposition_);
  }
  cposition_ = cposition;
  if (cposition) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.GameServerMoveMonster.cposition)
}
inline ::Protocol::float3* GameServerMoveMonster::release_cposition() {
  
  ::Protocol::float3* temp = cposition_;
  cposition_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::unsafe_arena_release_cposition() {
  // @@protoc_insertion_point(field_release:Protocol.GameServerMoveMonster.cposition)
  
  ::Protocol::float3* temp = cposition_;
  cposition_ = nullptr;
  return temp;
}
inline ::Protocol::float3* GameServerMoveMonster::_internal_mutable_cposition() {
  
  if (cposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::float3>(GetArenaForAllocation());
    cposition_ = p;
  }
  return cposition_;
}
inline ::Protocol::float3* GameServerMoveMonster::mutable_cposition() {
  // @@protoc_insertion_point(field_mutable:Protocol.GameServerMoveMonster.cposition)
  return _internal_mutable_cposition();
}
inline void GameServerMoveMonster::set_allocated_cposition(::Protocol::float3* cposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cposition_);
  }
  if (cposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cposition));
    if (message_arena != submessage_arena) {
      cposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cposition, submessage_arena);
    }
    
  } else {
    
  }
  cposition_ = cposition;
  // @@protoc_insertion_point(field_set_allocated:Protocol.GameServerMoveMonster.cposition)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_game_5fprotocol_2eproto
