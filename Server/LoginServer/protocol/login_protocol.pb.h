// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "login_enum.pb.h"
#include "login_struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_login_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_login_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fprotocol_2eproto;
namespace Protocol {
class LoginClientCharacterList;
struct LoginClientCharacterListDefaultTypeInternal;
extern LoginClientCharacterListDefaultTypeInternal _LoginClientCharacterList_default_instance_;
class LoginClientCharacterSelect;
struct LoginClientCharacterSelectDefaultTypeInternal;
extern LoginClientCharacterSelectDefaultTypeInternal _LoginClientCharacterSelect_default_instance_;
class LoginClientCreateCharacter;
struct LoginClientCreateCharacterDefaultTypeInternal;
extern LoginClientCreateCharacterDefaultTypeInternal _LoginClientCreateCharacter_default_instance_;
class LoginClientLogin;
struct LoginClientLoginDefaultTypeInternal;
extern LoginClientLoginDefaultTypeInternal _LoginClientLogin_default_instance_;
class LoginServerCharacterList;
struct LoginServerCharacterListDefaultTypeInternal;
extern LoginServerCharacterListDefaultTypeInternal _LoginServerCharacterList_default_instance_;
class LoginServerCharacterSelect;
struct LoginServerCharacterSelectDefaultTypeInternal;
extern LoginServerCharacterSelectDefaultTypeInternal _LoginServerCharacterSelect_default_instance_;
class LoginServerCreateCharacter;
struct LoginServerCreateCharacterDefaultTypeInternal;
extern LoginServerCreateCharacterDefaultTypeInternal _LoginServerCreateCharacter_default_instance_;
class LoginServerLogin;
struct LoginServerLoginDefaultTypeInternal;
extern LoginServerLoginDefaultTypeInternal _LoginServerLogin_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::LoginClientCharacterList* Arena::CreateMaybeMessage<::Protocol::LoginClientCharacterList>(Arena*);
template<> ::Protocol::LoginClientCharacterSelect* Arena::CreateMaybeMessage<::Protocol::LoginClientCharacterSelect>(Arena*);
template<> ::Protocol::LoginClientCreateCharacter* Arena::CreateMaybeMessage<::Protocol::LoginClientCreateCharacter>(Arena*);
template<> ::Protocol::LoginClientLogin* Arena::CreateMaybeMessage<::Protocol::LoginClientLogin>(Arena*);
template<> ::Protocol::LoginServerCharacterList* Arena::CreateMaybeMessage<::Protocol::LoginServerCharacterList>(Arena*);
template<> ::Protocol::LoginServerCharacterSelect* Arena::CreateMaybeMessage<::Protocol::LoginServerCharacterSelect>(Arena*);
template<> ::Protocol::LoginServerCreateCharacter* Arena::CreateMaybeMessage<::Protocol::LoginServerCreateCharacter>(Arena*);
template<> ::Protocol::LoginServerLogin* Arena::CreateMaybeMessage<::Protocol::LoginServerLogin>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class LoginClientLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginClientLogin) */ {
 public:
  inline LoginClientLogin() : LoginClientLogin(nullptr) {}
  ~LoginClientLogin() override;
  explicit constexpr LoginClientLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginClientLogin(const LoginClientLogin& from);
  LoginClientLogin(LoginClientLogin&& from) noexcept
    : LoginClientLogin() {
    *this = ::std::move(from);
  }

  inline LoginClientLogin& operator=(const LoginClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginClientLogin& operator=(LoginClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginClientLogin* internal_default_instance() {
    return reinterpret_cast<const LoginClientLogin*>(
               &_LoginClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginClientLogin& a, LoginClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginClientLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginClientLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginClientLogin* New() const final {
    return new LoginClientLogin();
  }

  LoginClientLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginClientLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginClientLogin& from);
  void MergeFrom(const LoginClientLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginClientLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginClientLogin";
  }
  protected:
  explicit LoginClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPwFieldNumber = 2,
    kAuthFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string pw = 2;
  void clear_pw();
  const std::string& pw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pw();
  void set_allocated_pw(std::string* pw);
  private:
  const std::string& _internal_pw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pw(const std::string& value);
  std::string* _internal_mutable_pw();
  public:

  // string auth = 3;
  void clear_auth();
  const std::string& auth() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_auth();
  void set_allocated_auth(std::string* auth);
  private:
  const std::string& _internal_auth() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth(const std::string& value);
  std::string* _internal_mutable_auth();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginClientLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginServerLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginServerLogin) */ {
 public:
  inline LoginServerLogin() : LoginServerLogin(nullptr) {}
  ~LoginServerLogin() override;
  explicit constexpr LoginServerLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginServerLogin(const LoginServerLogin& from);
  LoginServerLogin(LoginServerLogin&& from) noexcept
    : LoginServerLogin() {
    *this = ::std::move(from);
  }

  inline LoginServerLogin& operator=(const LoginServerLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginServerLogin& operator=(LoginServerLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginServerLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginServerLogin* internal_default_instance() {
    return reinterpret_cast<const LoginServerLogin*>(
               &_LoginServerLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginServerLogin& a, LoginServerLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginServerLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginServerLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginServerLogin* New() const final {
    return new LoginServerLogin();
  }

  LoginServerLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginServerLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginServerLogin& from);
  void MergeFrom(const LoginServerLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginServerLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginServerLogin";
  }
  protected:
  explicit LoginServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .Protocol.kLoginMessage result = 1;
  void clear_result();
  ::Protocol::kLoginMessage result() const;
  void set_result(::Protocol::kLoginMessage value);
  private:
  ::Protocol::kLoginMessage _internal_result() const;
  void _internal_set_result(::Protocol::kLoginMessage value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginServerLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginClientCharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginClientCharacterList) */ {
 public:
  inline LoginClientCharacterList() : LoginClientCharacterList(nullptr) {}
  ~LoginClientCharacterList() override;
  explicit constexpr LoginClientCharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginClientCharacterList(const LoginClientCharacterList& from);
  LoginClientCharacterList(LoginClientCharacterList&& from) noexcept
    : LoginClientCharacterList() {
    *this = ::std::move(from);
  }

  inline LoginClientCharacterList& operator=(const LoginClientCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginClientCharacterList& operator=(LoginClientCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginClientCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginClientCharacterList* internal_default_instance() {
    return reinterpret_cast<const LoginClientCharacterList*>(
               &_LoginClientCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginClientCharacterList& a, LoginClientCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginClientCharacterList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginClientCharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginClientCharacterList* New() const final {
    return new LoginClientCharacterList();
  }

  LoginClientCharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginClientCharacterList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginClientCharacterList& from);
  void MergeFrom(const LoginClientCharacterList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginClientCharacterList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginClientCharacterList";
  }
  protected:
  explicit LoginClientCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.LoginClientCharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginServerCharacterList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginServerCharacterList) */ {
 public:
  inline LoginServerCharacterList() : LoginServerCharacterList(nullptr) {}
  ~LoginServerCharacterList() override;
  explicit constexpr LoginServerCharacterList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginServerCharacterList(const LoginServerCharacterList& from);
  LoginServerCharacterList(LoginServerCharacterList&& from) noexcept
    : LoginServerCharacterList() {
    *this = ::std::move(from);
  }

  inline LoginServerCharacterList& operator=(const LoginServerCharacterList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginServerCharacterList& operator=(LoginServerCharacterList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginServerCharacterList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginServerCharacterList* internal_default_instance() {
    return reinterpret_cast<const LoginServerCharacterList*>(
               &_LoginServerCharacterList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginServerCharacterList& a, LoginServerCharacterList& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginServerCharacterList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginServerCharacterList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginServerCharacterList* New() const final {
    return new LoginServerCharacterList();
  }

  LoginServerCharacterList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginServerCharacterList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginServerCharacterList& from);
  void MergeFrom(const LoginServerCharacterList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginServerCharacterList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginServerCharacterList";
  }
  protected:
  explicit LoginServerCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 1,
  };
  // repeated .Protocol.ViewCharacter characters = 1;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  ::Protocol::ViewCharacter* mutable_characters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ViewCharacter >*
      mutable_characters();
  private:
  const ::Protocol::ViewCharacter& _internal_characters(int index) const;
  ::Protocol::ViewCharacter* _internal_add_characters();
  public:
  const ::Protocol::ViewCharacter& characters(int index) const;
  ::Protocol::ViewCharacter* add_characters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ViewCharacter >&
      characters() const;

  // @@protoc_insertion_point(class_scope:Protocol.LoginServerCharacterList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ViewCharacter > characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginClientCreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginClientCreateCharacter) */ {
 public:
  inline LoginClientCreateCharacter() : LoginClientCreateCharacter(nullptr) {}
  ~LoginClientCreateCharacter() override;
  explicit constexpr LoginClientCreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginClientCreateCharacter(const LoginClientCreateCharacter& from);
  LoginClientCreateCharacter(LoginClientCreateCharacter&& from) noexcept
    : LoginClientCreateCharacter() {
    *this = ::std::move(from);
  }

  inline LoginClientCreateCharacter& operator=(const LoginClientCreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginClientCreateCharacter& operator=(LoginClientCreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginClientCreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginClientCreateCharacter* internal_default_instance() {
    return reinterpret_cast<const LoginClientCreateCharacter*>(
               &_LoginClientCreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginClientCreateCharacter& a, LoginClientCreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginClientCreateCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginClientCreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginClientCreateCharacter* New() const final {
    return new LoginClientCreateCharacter();
  }

  LoginClientCreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginClientCreateCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginClientCreateCharacter& from);
  void MergeFrom(const LoginClientCreateCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginClientCreateCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginClientCreateCharacter";
  }
  protected:
  explicit LoginClientCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kGenderFieldNumber = 2,
    kCoatIndexFieldNumber = 3,
    kPantsIndexFieldNumber = 4,
    kFaceIndexFieldNumber = 5,
    kShoesIndexFieldNumber = 6,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool gender = 2;
  void clear_gender();
  bool gender() const;
  void set_gender(bool value);
  private:
  bool _internal_gender() const;
  void _internal_set_gender(bool value);
  public:

  // int32 coatIndex = 3;
  void clear_coatindex();
  ::PROTOBUF_NAMESPACE_ID::int32 coatindex() const;
  void set_coatindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_coatindex() const;
  void _internal_set_coatindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 pantsIndex = 4;
  void clear_pantsindex();
  ::PROTOBUF_NAMESPACE_ID::int32 pantsindex() const;
  void set_pantsindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pantsindex() const;
  void _internal_set_pantsindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 faceIndex = 5;
  void clear_faceindex();
  ::PROTOBUF_NAMESPACE_ID::int32 faceindex() const;
  void set_faceindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_faceindex() const;
  void _internal_set_faceindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 shoesIndex = 6;
  void clear_shoesindex();
  ::PROTOBUF_NAMESPACE_ID::int32 shoesindex() const;
  void set_shoesindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shoesindex() const;
  void _internal_set_shoesindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginClientCreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool gender_;
  ::PROTOBUF_NAMESPACE_ID::int32 coatindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 pantsindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 faceindex_;
  ::PROTOBUF_NAMESPACE_ID::int32 shoesindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginServerCreateCharacter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginServerCreateCharacter) */ {
 public:
  inline LoginServerCreateCharacter() : LoginServerCreateCharacter(nullptr) {}
  ~LoginServerCreateCharacter() override;
  explicit constexpr LoginServerCreateCharacter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginServerCreateCharacter(const LoginServerCreateCharacter& from);
  LoginServerCreateCharacter(LoginServerCreateCharacter&& from) noexcept
    : LoginServerCreateCharacter() {
    *this = ::std::move(from);
  }

  inline LoginServerCreateCharacter& operator=(const LoginServerCreateCharacter& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginServerCreateCharacter& operator=(LoginServerCreateCharacter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginServerCreateCharacter& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginServerCreateCharacter* internal_default_instance() {
    return reinterpret_cast<const LoginServerCreateCharacter*>(
               &_LoginServerCreateCharacter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginServerCreateCharacter& a, LoginServerCreateCharacter& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginServerCreateCharacter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginServerCreateCharacter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginServerCreateCharacter* New() const final {
    return new LoginServerCreateCharacter();
  }

  LoginServerCreateCharacter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginServerCreateCharacter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginServerCreateCharacter& from);
  void MergeFrom(const LoginServerCreateCharacter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginServerCreateCharacter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginServerCreateCharacter";
  }
  protected:
  explicit LoginServerCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .Protocol.ViewCharacter character = 2;
  bool has_character() const;
  private:
  bool _internal_has_character() const;
  public:
  void clear_character();
  const ::Protocol::ViewCharacter& character() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Protocol::ViewCharacter* release_character();
  ::Protocol::ViewCharacter* mutable_character();
  void set_allocated_character(::Protocol::ViewCharacter* character);
  private:
  const ::Protocol::ViewCharacter& _internal_character() const;
  ::Protocol::ViewCharacter* _internal_mutable_character();
  public:
  void unsafe_arena_set_allocated_character(
      ::Protocol::ViewCharacter* character);
  ::Protocol::ViewCharacter* unsafe_arena_release_character();

  // .Protocol.kCreateMessage result = 1;
  void clear_result();
  ::Protocol::kCreateMessage result() const;
  void set_result(::Protocol::kCreateMessage value);
  private:
  ::Protocol::kCreateMessage _internal_result() const;
  void _internal_set_result(::Protocol::kCreateMessage value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginServerCreateCharacter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Protocol::ViewCharacter* character_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginClientCharacterSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginClientCharacterSelect) */ {
 public:
  inline LoginClientCharacterSelect() : LoginClientCharacterSelect(nullptr) {}
  ~LoginClientCharacterSelect() override;
  explicit constexpr LoginClientCharacterSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginClientCharacterSelect(const LoginClientCharacterSelect& from);
  LoginClientCharacterSelect(LoginClientCharacterSelect&& from) noexcept
    : LoginClientCharacterSelect() {
    *this = ::std::move(from);
  }

  inline LoginClientCharacterSelect& operator=(const LoginClientCharacterSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginClientCharacterSelect& operator=(LoginClientCharacterSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginClientCharacterSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginClientCharacterSelect* internal_default_instance() {
    return reinterpret_cast<const LoginClientCharacterSelect*>(
               &_LoginClientCharacterSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LoginClientCharacterSelect& a, LoginClientCharacterSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginClientCharacterSelect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginClientCharacterSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginClientCharacterSelect* New() const final {
    return new LoginClientCharacterSelect();
  }

  LoginClientCharacterSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginClientCharacterSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginClientCharacterSelect& from);
  void MergeFrom(const LoginClientCharacterSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginClientCharacterSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginClientCharacterSelect";
  }
  protected:
  explicit LoginClientCharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
  };
  // int32 characterId = 1;
  void clear_characterid();
  ::PROTOBUF_NAMESPACE_ID::int32 characterid() const;
  void set_characterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_characterid() const;
  void _internal_set_characterid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginClientCharacterSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 characterid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LoginServerCharacterSelect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.LoginServerCharacterSelect) */ {
 public:
  inline LoginServerCharacterSelect() : LoginServerCharacterSelect(nullptr) {}
  ~LoginServerCharacterSelect() override;
  explicit constexpr LoginServerCharacterSelect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginServerCharacterSelect(const LoginServerCharacterSelect& from);
  LoginServerCharacterSelect(LoginServerCharacterSelect&& from) noexcept
    : LoginServerCharacterSelect() {
    *this = ::std::move(from);
  }

  inline LoginServerCharacterSelect& operator=(const LoginServerCharacterSelect& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginServerCharacterSelect& operator=(LoginServerCharacterSelect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginServerCharacterSelect& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginServerCharacterSelect* internal_default_instance() {
    return reinterpret_cast<const LoginServerCharacterSelect*>(
               &_LoginServerCharacterSelect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoginServerCharacterSelect& a, LoginServerCharacterSelect& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginServerCharacterSelect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginServerCharacterSelect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginServerCharacterSelect* New() const final {
    return new LoginServerCharacterSelect();
  }

  LoginServerCharacterSelect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginServerCharacterSelect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginServerCharacterSelect& from);
  void MergeFrom(const LoginServerCharacterSelect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginServerCharacterSelect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.LoginServerCharacterSelect";
  }
  protected:
  explicit LoginServerCharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kResultFieldNumber = 1,
    kPortFieldNumber = 3,
    kAuthFieldNumber = 4,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .Protocol.kCharacterSelectMessage result = 1;
  void clear_result();
  ::Protocol::kCharacterSelectMessage result() const;
  void set_result(::Protocol::kCharacterSelectMessage value);
  private:
  ::Protocol::kCharacterSelectMessage _internal_result() const;
  void _internal_set_result(::Protocol::kCharacterSelectMessage value);
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 auth = 4;
  void clear_auth();
  ::PROTOBUF_NAMESPACE_ID::int64 auth() const;
  void set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_auth() const;
  void _internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.LoginServerCharacterSelect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int64 auth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_login_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginClientLogin

// string id = 1;
inline void LoginClientLogin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& LoginClientLogin::id() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientLogin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginClientLogin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginClientLogin.id)
}
inline std::string* LoginClientLogin::mutable_id() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginClientLogin.id)
  return _internal_mutable_id();
}
inline const std::string& LoginClientLogin::_internal_id() const {
  return id_.Get();
}
inline void LoginClientLogin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::release_id() {
  // @@protoc_insertion_point(field_release:Protocol.LoginClientLogin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginClientLogin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginClientLogin.id)
}

// string pw = 2;
inline void LoginClientLogin::clear_pw() {
  pw_.ClearToEmpty();
}
inline const std::string& LoginClientLogin::pw() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientLogin.pw)
  return _internal_pw();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginClientLogin::set_pw(ArgT0&& arg0, ArgT... args) {
 
 pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginClientLogin.pw)
}
inline std::string* LoginClientLogin::mutable_pw() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginClientLogin.pw)
  return _internal_mutable_pw();
}
inline const std::string& LoginClientLogin::_internal_pw() const {
  return pw_.Get();
}
inline void LoginClientLogin::_internal_set_pw(const std::string& value) {
  
  pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::_internal_mutable_pw() {
  
  return pw_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::release_pw() {
  // @@protoc_insertion_point(field_release:Protocol.LoginClientLogin.pw)
  return pw_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginClientLogin::set_allocated_pw(std::string* pw) {
  if (pw != nullptr) {
    
  } else {
    
  }
  pw_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pw,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginClientLogin.pw)
}

// string auth = 3;
inline void LoginClientLogin::clear_auth() {
  auth_.ClearToEmpty();
}
inline const std::string& LoginClientLogin::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientLogin.auth)
  return _internal_auth();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginClientLogin::set_auth(ArgT0&& arg0, ArgT... args) {
 
 auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginClientLogin.auth)
}
inline std::string* LoginClientLogin::mutable_auth() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginClientLogin.auth)
  return _internal_mutable_auth();
}
inline const std::string& LoginClientLogin::_internal_auth() const {
  return auth_.Get();
}
inline void LoginClientLogin::_internal_set_auth(const std::string& value) {
  
  auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::_internal_mutable_auth() {
  
  return auth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginClientLogin::release_auth() {
  // @@protoc_insertion_point(field_release:Protocol.LoginClientLogin.auth)
  return auth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginClientLogin::set_allocated_auth(std::string* auth) {
  if (auth != nullptr) {
    
  } else {
    
  }
  auth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auth,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginClientLogin.auth)
}

// -------------------------------------------------------------------

// LoginServerLogin

// .Protocol.kLoginMessage result = 1;
inline void LoginServerLogin::clear_result() {
  result_ = 0;
}
inline ::Protocol::kLoginMessage LoginServerLogin::_internal_result() const {
  return static_cast< ::Protocol::kLoginMessage >(result_);
}
inline ::Protocol::kLoginMessage LoginServerLogin::result() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerLogin.result)
  return _internal_result();
}
inline void LoginServerLogin::_internal_set_result(::Protocol::kLoginMessage value) {
  
  result_ = value;
}
inline void LoginServerLogin::set_result(::Protocol::kLoginMessage value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginServerLogin.result)
}

// -------------------------------------------------------------------

// LoginClientCharacterList

// -------------------------------------------------------------------

// LoginServerCharacterList

// repeated .Protocol.ViewCharacter characters = 1;
inline int LoginServerCharacterList::_internal_characters_size() const {
  return characters_.size();
}
inline int LoginServerCharacterList::characters_size() const {
  return _internal_characters_size();
}
inline ::Protocol::ViewCharacter* LoginServerCharacterList::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginServerCharacterList.characters)
  return characters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ViewCharacter >*
LoginServerCharacterList::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.LoginServerCharacterList.characters)
  return &characters_;
}
inline const ::Protocol::ViewCharacter& LoginServerCharacterList::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const ::Protocol::ViewCharacter& LoginServerCharacterList::characters(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCharacterList.characters)
  return _internal_characters(index);
}
inline ::Protocol::ViewCharacter* LoginServerCharacterList::_internal_add_characters() {
  return characters_.Add();
}
inline ::Protocol::ViewCharacter* LoginServerCharacterList::add_characters() {
  // @@protoc_insertion_point(field_add:Protocol.LoginServerCharacterList.characters)
  return _internal_add_characters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::ViewCharacter >&
LoginServerCharacterList::characters() const {
  // @@protoc_insertion_point(field_list:Protocol.LoginServerCharacterList.characters)
  return characters_;
}

// -------------------------------------------------------------------

// LoginClientCreateCharacter

// bytes name = 1;
inline void LoginClientCreateCharacter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoginClientCreateCharacter::name() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginClientCreateCharacter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.name)
}
inline std::string* LoginClientCreateCharacter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginClientCreateCharacter.name)
  return _internal_mutable_name();
}
inline const std::string& LoginClientCreateCharacter::_internal_name() const {
  return name_.Get();
}
inline void LoginClientCreateCharacter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginClientCreateCharacter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginClientCreateCharacter::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.LoginClientCreateCharacter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginClientCreateCharacter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginClientCreateCharacter.name)
}

// bool gender = 2;
inline void LoginClientCreateCharacter::clear_gender() {
  gender_ = false;
}
inline bool LoginClientCreateCharacter::_internal_gender() const {
  return gender_;
}
inline bool LoginClientCreateCharacter::gender() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.gender)
  return _internal_gender();
}
inline void LoginClientCreateCharacter::_internal_set_gender(bool value) {
  
  gender_ = value;
}
inline void LoginClientCreateCharacter::set_gender(bool value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.gender)
}

// int32 coatIndex = 3;
inline void LoginClientCreateCharacter::clear_coatindex() {
  coatindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::_internal_coatindex() const {
  return coatindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::coatindex() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.coatIndex)
  return _internal_coatindex();
}
inline void LoginClientCreateCharacter::_internal_set_coatindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  coatindex_ = value;
}
inline void LoginClientCreateCharacter::set_coatindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_coatindex(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.coatIndex)
}

// int32 pantsIndex = 4;
inline void LoginClientCreateCharacter::clear_pantsindex() {
  pantsindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::_internal_pantsindex() const {
  return pantsindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::pantsindex() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.pantsIndex)
  return _internal_pantsindex();
}
inline void LoginClientCreateCharacter::_internal_set_pantsindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pantsindex_ = value;
}
inline void LoginClientCreateCharacter::set_pantsindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pantsindex(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.pantsIndex)
}

// int32 faceIndex = 5;
inline void LoginClientCreateCharacter::clear_faceindex() {
  faceindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::_internal_faceindex() const {
  return faceindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::faceindex() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.faceIndex)
  return _internal_faceindex();
}
inline void LoginClientCreateCharacter::_internal_set_faceindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  faceindex_ = value;
}
inline void LoginClientCreateCharacter::set_faceindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_faceindex(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.faceIndex)
}

// int32 shoesIndex = 6;
inline void LoginClientCreateCharacter::clear_shoesindex() {
  shoesindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::_internal_shoesindex() const {
  return shoesindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCreateCharacter::shoesindex() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCreateCharacter.shoesIndex)
  return _internal_shoesindex();
}
inline void LoginClientCreateCharacter::_internal_set_shoesindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shoesindex_ = value;
}
inline void LoginClientCreateCharacter::set_shoesindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shoesindex(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCreateCharacter.shoesIndex)
}

// -------------------------------------------------------------------

// LoginServerCreateCharacter

// .Protocol.kCreateMessage result = 1;
inline void LoginServerCreateCharacter::clear_result() {
  result_ = 0;
}
inline ::Protocol::kCreateMessage LoginServerCreateCharacter::_internal_result() const {
  return static_cast< ::Protocol::kCreateMessage >(result_);
}
inline ::Protocol::kCreateMessage LoginServerCreateCharacter::result() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCreateCharacter.result)
  return _internal_result();
}
inline void LoginServerCreateCharacter::_internal_set_result(::Protocol::kCreateMessage value) {
  
  result_ = value;
}
inline void LoginServerCreateCharacter::set_result(::Protocol::kCreateMessage value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginServerCreateCharacter.result)
}

// .Protocol.ViewCharacter character = 2;
inline bool LoginServerCreateCharacter::_internal_has_character() const {
  return this != internal_default_instance() && character_ != nullptr;
}
inline bool LoginServerCreateCharacter::has_character() const {
  return _internal_has_character();
}
inline const ::Protocol::ViewCharacter& LoginServerCreateCharacter::_internal_character() const {
  const ::Protocol::ViewCharacter* p = character_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ViewCharacter&>(
      ::Protocol::_ViewCharacter_default_instance_);
}
inline const ::Protocol::ViewCharacter& LoginServerCreateCharacter::character() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCreateCharacter.character)
  return _internal_character();
}
inline void LoginServerCreateCharacter::unsafe_arena_set_allocated_character(
    ::Protocol::ViewCharacter* character) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_);
  }
  character_ = character;
  if (character) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.LoginServerCreateCharacter.character)
}
inline ::Protocol::ViewCharacter* LoginServerCreateCharacter::release_character() {
  
  ::Protocol::ViewCharacter* temp = character_;
  character_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Protocol::ViewCharacter* LoginServerCreateCharacter::unsafe_arena_release_character() {
  // @@protoc_insertion_point(field_release:Protocol.LoginServerCreateCharacter.character)
  
  ::Protocol::ViewCharacter* temp = character_;
  character_ = nullptr;
  return temp;
}
inline ::Protocol::ViewCharacter* LoginServerCreateCharacter::_internal_mutable_character() {
  
  if (character_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ViewCharacter>(GetArenaForAllocation());
    character_ = p;
  }
  return character_;
}
inline ::Protocol::ViewCharacter* LoginServerCreateCharacter::mutable_character() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginServerCreateCharacter.character)
  return _internal_mutable_character();
}
inline void LoginServerCreateCharacter::set_allocated_character(::Protocol::ViewCharacter* character) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(character_);
  }
  if (character) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(character));
    if (message_arena != submessage_arena) {
      character = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, character, submessage_arena);
    }
    
  } else {
    
  }
  character_ = character;
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginServerCreateCharacter.character)
}

// -------------------------------------------------------------------

// LoginClientCharacterSelect

// int32 characterId = 1;
inline void LoginClientCharacterSelect::clear_characterid() {
  characterid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCharacterSelect::_internal_characterid() const {
  return characterid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginClientCharacterSelect::characterid() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginClientCharacterSelect.characterId)
  return _internal_characterid();
}
inline void LoginClientCharacterSelect::_internal_set_characterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  characterid_ = value;
}
inline void LoginClientCharacterSelect::set_characterid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_characterid(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginClientCharacterSelect.characterId)
}

// -------------------------------------------------------------------

// LoginServerCharacterSelect

// .Protocol.kCharacterSelectMessage result = 1;
inline void LoginServerCharacterSelect::clear_result() {
  result_ = 0;
}
inline ::Protocol::kCharacterSelectMessage LoginServerCharacterSelect::_internal_result() const {
  return static_cast< ::Protocol::kCharacterSelectMessage >(result_);
}
inline ::Protocol::kCharacterSelectMessage LoginServerCharacterSelect::result() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCharacterSelect.result)
  return _internal_result();
}
inline void LoginServerCharacterSelect::_internal_set_result(::Protocol::kCharacterSelectMessage value) {
  
  result_ = value;
}
inline void LoginServerCharacterSelect::set_result(::Protocol::kCharacterSelectMessage value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginServerCharacterSelect.result)
}

// string ip = 2;
inline void LoginServerCharacterSelect::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& LoginServerCharacterSelect::ip() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCharacterSelect.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginServerCharacterSelect::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.LoginServerCharacterSelect.ip)
}
inline std::string* LoginServerCharacterSelect::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:Protocol.LoginServerCharacterSelect.ip)
  return _internal_mutable_ip();
}
inline const std::string& LoginServerCharacterSelect::_internal_ip() const {
  return ip_.Get();
}
inline void LoginServerCharacterSelect::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginServerCharacterSelect::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginServerCharacterSelect::release_ip() {
  // @@protoc_insertion_point(field_release:Protocol.LoginServerCharacterSelect.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoginServerCharacterSelect::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.LoginServerCharacterSelect.ip)
}

// int32 port = 3;
inline void LoginServerCharacterSelect::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginServerCharacterSelect::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginServerCharacterSelect::port() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCharacterSelect.port)
  return _internal_port();
}
inline void LoginServerCharacterSelect::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void LoginServerCharacterSelect::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginServerCharacterSelect.port)
}

// int64 auth = 4;
inline void LoginServerCharacterSelect::clear_auth() {
  auth_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginServerCharacterSelect::_internal_auth() const {
  return auth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoginServerCharacterSelect::auth() const {
  // @@protoc_insertion_point(field_get:Protocol.LoginServerCharacterSelect.auth)
  return _internal_auth();
}
inline void LoginServerCharacterSelect::_internal_set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  auth_ = value;
}
inline void LoginServerCharacterSelect::set_auth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_auth(value);
  // @@protoc_insertion_point(field_set:Protocol.LoginServerCharacterSelect.auth)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_login_5fprotocol_2eproto
