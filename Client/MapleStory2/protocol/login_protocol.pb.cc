// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login_protocol.proto

#include "login_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace Protocol {
constexpr LoginClientLogin::LoginClientLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pw_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , auth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LoginClientLoginDefaultTypeInternal {
  constexpr LoginClientLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientLoginDefaultTypeInternal() {}
  union {
    LoginClientLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientLoginDefaultTypeInternal _LoginClientLogin_default_instance_;
constexpr LoginServerLogin::LoginServerLogin(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(0)
{}
struct LoginServerLoginDefaultTypeInternal {
  constexpr LoginServerLoginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerLoginDefaultTypeInternal() {}
  union {
    LoginServerLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerLoginDefaultTypeInternal _LoginServerLogin_default_instance_;
constexpr LoginClientCharacterList::LoginClientCharacterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct LoginClientCharacterListDefaultTypeInternal {
  constexpr LoginClientCharacterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientCharacterListDefaultTypeInternal() {}
  union {
    LoginClientCharacterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientCharacterListDefaultTypeInternal _LoginClientCharacterList_default_instance_;
constexpr LoginServerCharacterList::LoginServerCharacterList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characters_(){}
struct LoginServerCharacterListDefaultTypeInternal {
  constexpr LoginServerCharacterListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCharacterListDefaultTypeInternal() {}
  union {
    LoginServerCharacterList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCharacterListDefaultTypeInternal _LoginServerCharacterList_default_instance_;
constexpr LoginClientCreateCharacter::LoginClientCreateCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gender_(false)
  , coatindex_(0)
  , pantsindex_(0)
  , faceindex_(0)
  , shoesindex_(0){}
struct LoginClientCreateCharacterDefaultTypeInternal {
  constexpr LoginClientCreateCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientCreateCharacterDefaultTypeInternal() {}
  union {
    LoginClientCreateCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientCreateCharacterDefaultTypeInternal _LoginClientCreateCharacter_default_instance_;
constexpr LoginServerCreateCharacter::LoginServerCreateCharacter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : character_(nullptr)
  , result_(0)
{}
struct LoginServerCreateCharacterDefaultTypeInternal {
  constexpr LoginServerCreateCharacterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCreateCharacterDefaultTypeInternal() {}
  union {
    LoginServerCreateCharacter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCreateCharacterDefaultTypeInternal _LoginServerCreateCharacter_default_instance_;
constexpr LoginClientCharacterSelect::LoginClientCharacterSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : characterid_(int64_t{0}){}
struct LoginClientCharacterSelectDefaultTypeInternal {
  constexpr LoginClientCharacterSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginClientCharacterSelectDefaultTypeInternal() {}
  union {
    LoginClientCharacterSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginClientCharacterSelectDefaultTypeInternal _LoginClientCharacterSelect_default_instance_;
constexpr LoginServerCharacterSelect::LoginServerCharacterSelect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , result_(0)

  , port_(0)
  , auth_(int64_t{0}){}
struct LoginServerCharacterSelectDefaultTypeInternal {
  constexpr LoginServerCharacterSelectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoginServerCharacterSelectDefaultTypeInternal() {}
  union {
    LoginServerCharacterSelect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoginServerCharacterSelectDefaultTypeInternal _LoginServerCharacterSelect_default_instance_;
}  // namespace Protocol
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_login_5fprotocol_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_login_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_login_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_login_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientLogin, id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientLogin, pw_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientLogin, auth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerLogin, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCharacterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterList, characters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, name_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, gender_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, coatindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, pantsindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, faceindex_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCreateCharacter, shoesindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCreateCharacter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCreateCharacter, result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCreateCharacter, character_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCharacterSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginClientCharacterSelect, characterid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterSelect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterSelect, result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterSelect, ip_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterSelect, port_),
  PROTOBUF_FIELD_OFFSET(::Protocol::LoginServerCharacterSelect, auth_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Protocol::LoginClientLogin)},
  { 8, -1, sizeof(::Protocol::LoginServerLogin)},
  { 14, -1, sizeof(::Protocol::LoginClientCharacterList)},
  { 19, -1, sizeof(::Protocol::LoginServerCharacterList)},
  { 25, -1, sizeof(::Protocol::LoginClientCreateCharacter)},
  { 36, -1, sizeof(::Protocol::LoginServerCreateCharacter)},
  { 43, -1, sizeof(::Protocol::LoginClientCharacterSelect)},
  { 49, -1, sizeof(::Protocol::LoginServerCharacterSelect)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginClientLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginServerLogin_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginClientCharacterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginServerCharacterList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginClientCreateCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginServerCreateCharacter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginClientCharacterSelect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Protocol::_LoginServerCharacterSelect_default_instance_),
};

const char descriptor_table_protodef_login_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024login_protocol.proto\022\010Protocol\032\020login_"
  "enum.proto\032\022login_struct.proto\"8\n\020LoginC"
  "lientLogin\022\n\n\002id\030\001 \001(\t\022\n\n\002pw\030\002 \001(\t\022\014\n\004au"
  "th\030\003 \001(\t\";\n\020LoginServerLogin\022\'\n\006result\030\001"
  " \001(\0162\027.Protocol.kLoginMessage\"\032\n\030LoginCl"
  "ientCharacterList\"G\n\030LoginServerCharacte"
  "rList\022+\n\ncharacters\030\001 \003(\0132\027.Protocol.Vie"
  "wCharacter\"\210\001\n\032LoginClientCreateCharacte"
  "r\022\014\n\004name\030\001 \001(\014\022\016\n\006gender\030\002 \001(\010\022\021\n\tcoatI"
  "ndex\030\003 \001(\005\022\022\n\npantsIndex\030\004 \001(\005\022\021\n\tfaceIn"
  "dex\030\005 \001(\005\022\022\n\nshoesIndex\030\006 \001(\005\"r\n\032LoginSe"
  "rverCreateCharacter\022(\n\006result\030\001 \001(\0162\030.Pr"
  "otocol.kCreateMessage\022*\n\tcharacter\030\002 \001(\013"
  "2\027.Protocol.ViewCharacter\"1\n\032LoginClient"
  "CharacterSelect\022\023\n\013characterId\030\001 \001(\003\"w\n\032"
  "LoginServerCharacterSelect\0221\n\006result\030\001 \001"
  "(\0162!.Protocol.kCharacterSelectMessage\022\n\n"
  "\002ip\030\002 \001(\t\022\014\n\004port\030\003 \001(\005\022\014\n\004auth\030\004 \001(\003b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_login_5fprotocol_2eproto_deps[2] = {
  &::descriptor_table_login_5fenum_2eproto,
  &::descriptor_table_login_5fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_login_5fprotocol_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_login_5fprotocol_2eproto = {
  false, false, 725, descriptor_table_protodef_login_5fprotocol_2eproto, "login_protocol.proto", 
  &descriptor_table_login_5fprotocol_2eproto_once, descriptor_table_login_5fprotocol_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_login_5fprotocol_2eproto::offsets,
  file_level_metadata_login_5fprotocol_2eproto, file_level_enum_descriptors_login_5fprotocol_2eproto, file_level_service_descriptors_login_5fprotocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_login_5fprotocol_2eproto_getter() {
  return &descriptor_table_login_5fprotocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_login_5fprotocol_2eproto(&descriptor_table_login_5fprotocol_2eproto);
namespace Protocol {

// ===================================================================

class LoginClientLogin::_Internal {
 public:
};

LoginClientLogin::LoginClientLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginClientLogin)
}
LoginClientLogin::LoginClientLogin(const LoginClientLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pw().empty()) {
    pw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pw(), 
      GetArenaForAllocation());
  }
  auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auth().empty()) {
    auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_auth(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginClientLogin)
}

void LoginClientLogin::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LoginClientLogin::~LoginClientLogin() {
  // @@protoc_insertion_point(destructor:Protocol.LoginClientLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginClientLogin::ArenaDtor(void* object) {
  LoginClientLogin* _this = reinterpret_cast< LoginClientLogin* >(object);
  (void)_this;
}
void LoginClientLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  pw_.ClearToEmpty();
  auth_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.LoginClientLogin.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.LoginClientLogin.pw"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.LoginClientLogin.auth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginClientLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.LoginClientLogin.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pw = 2;
  if (!this->pw().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pw().data(), static_cast<int>(this->_internal_pw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.LoginClientLogin.pw");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pw(), target);
  }

  // string auth = 3;
  if (!this->auth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auth().data(), static_cast<int>(this->_internal_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.LoginClientLogin.auth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginClientLogin)
  return target;
}

size_t LoginClientLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginClientLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pw = 2;
  if (!this->pw().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pw());
  }

  // string auth = 3;
  if (!this->auth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginClientLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginClientLogin)
    MergeFrom(*source);
  }
}

void LoginClientLogin::MergeFrom(const LoginClientLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginClientLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.pw().empty()) {
    _internal_set_pw(from._internal_pw());
  }
  if (!from.auth().empty()) {
    _internal_set_auth(from._internal_auth());
  }
}

void LoginClientLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientLogin::CopyFrom(const LoginClientLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginClientLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientLogin::IsInitialized() const {
  return true;
}

void LoginClientLogin::InternalSwap(LoginClientLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pw_, GetArenaForAllocation(),
      &other->pw_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &auth_, GetArenaForAllocation(),
      &other->auth_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[0]);
}

// ===================================================================

class LoginServerLogin::_Internal {
 public:
};

LoginServerLogin::LoginServerLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginServerLogin)
}
LoginServerLogin::LoginServerLogin(const LoginServerLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginServerLogin)
}

void LoginServerLogin::SharedCtor() {
result_ = 0;
}

LoginServerLogin::~LoginServerLogin() {
  // @@protoc_insertion_point(destructor:Protocol.LoginServerLogin)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginServerLogin::ArenaDtor(void* object) {
  LoginServerLogin* _this = reinterpret_cast< LoginServerLogin* >(object);
  (void)_this;
}
void LoginServerLogin::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerLogin::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kLoginMessage result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::kLoginMessage>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerLogin::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginServerLogin)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kLoginMessage result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginServerLogin)
  return target;
}

size_t LoginServerLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginServerLogin)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.kLoginMessage result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerLogin::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerLogin* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerLogin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginServerLogin)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginServerLogin)
    MergeFrom(*source);
  }
}

void LoginServerLogin::MergeFrom(const LoginServerLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginServerLogin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LoginServerLogin::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerLogin::CopyFrom(const LoginServerLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginServerLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerLogin::IsInitialized() const {
  return true;
}

void LoginServerLogin::InternalSwap(LoginServerLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerLogin::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[1]);
}

// ===================================================================

class LoginClientCharacterList::_Internal {
 public:
};

LoginClientCharacterList::LoginClientCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginClientCharacterList)
}
LoginClientCharacterList::LoginClientCharacterList(const LoginClientCharacterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginClientCharacterList)
}

void LoginClientCharacterList::SharedCtor() {
}

LoginClientCharacterList::~LoginClientCharacterList() {
  // @@protoc_insertion_point(destructor:Protocol.LoginClientCharacterList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientCharacterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginClientCharacterList::ArenaDtor(void* object) {
  LoginClientCharacterList* _this = reinterpret_cast< LoginClientCharacterList* >(object);
  (void)_this;
}
void LoginClientCharacterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientCharacterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientCharacterList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginClientCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientCharacterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientCharacterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginClientCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginClientCharacterList)
  return target;
}

size_t LoginClientCharacterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginClientCharacterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientCharacterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginClientCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientCharacterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientCharacterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginClientCharacterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginClientCharacterList)
    MergeFrom(*source);
  }
}

void LoginClientCharacterList::MergeFrom(const LoginClientCharacterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginClientCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LoginClientCharacterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginClientCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientCharacterList::CopyFrom(const LoginClientCharacterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginClientCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientCharacterList::IsInitialized() const {
  return true;
}

void LoginClientCharacterList::InternalSwap(LoginClientCharacterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientCharacterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[2]);
}

// ===================================================================

class LoginServerCharacterList::_Internal {
 public:
};

void LoginServerCharacterList::clear_characters() {
  characters_.Clear();
}
LoginServerCharacterList::LoginServerCharacterList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  characters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginServerCharacterList)
}
LoginServerCharacterList::LoginServerCharacterList(const LoginServerCharacterList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      characters_(from.characters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginServerCharacterList)
}

void LoginServerCharacterList::SharedCtor() {
}

LoginServerCharacterList::~LoginServerCharacterList() {
  // @@protoc_insertion_point(destructor:Protocol.LoginServerCharacterList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCharacterList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginServerCharacterList::ArenaDtor(void* object) {
  LoginServerCharacterList* _this = reinterpret_cast< LoginServerCharacterList* >(object);
  (void)_this;
}
void LoginServerCharacterList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCharacterList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCharacterList::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginServerCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCharacterList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.ViewCharacter characters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_characters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCharacterList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginServerCharacterList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.ViewCharacter characters = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_characters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_characters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginServerCharacterList)
  return target;
}

size_t LoginServerCharacterList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginServerCharacterList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.ViewCharacter characters = 1;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->characters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCharacterList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginServerCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCharacterList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCharacterList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginServerCharacterList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginServerCharacterList)
    MergeFrom(*source);
  }
}

void LoginServerCharacterList::MergeFrom(const LoginServerCharacterList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginServerCharacterList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  characters_.MergeFrom(from.characters_);
}

void LoginServerCharacterList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginServerCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCharacterList::CopyFrom(const LoginServerCharacterList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginServerCharacterList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCharacterList::IsInitialized() const {
  return true;
}

void LoginServerCharacterList::InternalSwap(LoginServerCharacterList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  characters_.InternalSwap(&other->characters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCharacterList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[3]);
}

// ===================================================================

class LoginClientCreateCharacter::_Internal {
 public:
};

LoginClientCreateCharacter::LoginClientCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginClientCreateCharacter)
}
LoginClientCreateCharacter::LoginClientCreateCharacter(const LoginClientCreateCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gender_, &from.gender_,
    static_cast<size_t>(reinterpret_cast<char*>(&shoesindex_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(shoesindex_));
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginClientCreateCharacter)
}

void LoginClientCreateCharacter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shoesindex_) -
    reinterpret_cast<char*>(&gender_)) + sizeof(shoesindex_));
}

LoginClientCreateCharacter::~LoginClientCreateCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.LoginClientCreateCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientCreateCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginClientCreateCharacter::ArenaDtor(void* object) {
  LoginClientCreateCharacter* _this = reinterpret_cast< LoginClientCreateCharacter* >(object);
  (void)_this;
}
void LoginClientCreateCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientCreateCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientCreateCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginClientCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&gender_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shoesindex_) -
      reinterpret_cast<char*>(&gender_)) + sizeof(shoesindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientCreateCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          gender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 coatIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          coatindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 pantsIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          pantsindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 faceIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          faceindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 shoesIndex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          shoesindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientCreateCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginClientCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool gender = 2;
  if (this->gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_gender(), target);
  }

  // int32 coatIndex = 3;
  if (this->coatindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_coatindex(), target);
  }

  // int32 pantsIndex = 4;
  if (this->pantsindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_pantsindex(), target);
  }

  // int32 faceIndex = 5;
  if (this->faceindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_faceindex(), target);
  }

  // int32 shoesIndex = 6;
  if (this->shoesindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_shoesindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginClientCreateCharacter)
  return target;
}

size_t LoginClientCreateCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginClientCreateCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // bool gender = 2;
  if (this->gender() != 0) {
    total_size += 1 + 1;
  }

  // int32 coatIndex = 3;
  if (this->coatindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_coatindex());
  }

  // int32 pantsIndex = 4;
  if (this->pantsindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pantsindex());
  }

  // int32 faceIndex = 5;
  if (this->faceindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_faceindex());
  }

  // int32 shoesIndex = 6;
  if (this->shoesindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shoesindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientCreateCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginClientCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientCreateCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientCreateCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginClientCreateCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginClientCreateCharacter)
    MergeFrom(*source);
  }
}

void LoginClientCreateCharacter::MergeFrom(const LoginClientCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginClientCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.gender() != 0) {
    _internal_set_gender(from._internal_gender());
  }
  if (from.coatindex() != 0) {
    _internal_set_coatindex(from._internal_coatindex());
  }
  if (from.pantsindex() != 0) {
    _internal_set_pantsindex(from._internal_pantsindex());
  }
  if (from.faceindex() != 0) {
    _internal_set_faceindex(from._internal_faceindex());
  }
  if (from.shoesindex() != 0) {
    _internal_set_shoesindex(from._internal_shoesindex());
  }
}

void LoginClientCreateCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginClientCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientCreateCharacter::CopyFrom(const LoginClientCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginClientCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientCreateCharacter::IsInitialized() const {
  return true;
}

void LoginClientCreateCharacter::InternalSwap(LoginClientCreateCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginClientCreateCharacter, shoesindex_)
      + sizeof(LoginClientCreateCharacter::shoesindex_)
      - PROTOBUF_FIELD_OFFSET(LoginClientCreateCharacter, gender_)>(
          reinterpret_cast<char*>(&gender_),
          reinterpret_cast<char*>(&other->gender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientCreateCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[4]);
}

// ===================================================================

class LoginServerCreateCharacter::_Internal {
 public:
  static const ::Protocol::ViewCharacter& character(const LoginServerCreateCharacter* msg);
};

const ::Protocol::ViewCharacter&
LoginServerCreateCharacter::_Internal::character(const LoginServerCreateCharacter* msg) {
  return *msg->character_;
}
void LoginServerCreateCharacter::clear_character() {
  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
}
LoginServerCreateCharacter::LoginServerCreateCharacter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginServerCreateCharacter)
}
LoginServerCreateCharacter::LoginServerCreateCharacter(const LoginServerCreateCharacter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_character()) {
    character_ = new ::Protocol::ViewCharacter(*from.character_);
  } else {
    character_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginServerCreateCharacter)
}

void LoginServerCreateCharacter::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&character_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&character_)) + sizeof(result_));
}

LoginServerCreateCharacter::~LoginServerCreateCharacter() {
  // @@protoc_insertion_point(destructor:Protocol.LoginServerCreateCharacter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCreateCharacter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete character_;
}

void LoginServerCreateCharacter::ArenaDtor(void* object) {
  LoginServerCreateCharacter* _this = reinterpret_cast< LoginServerCreateCharacter* >(object);
  (void)_this;
}
void LoginServerCreateCharacter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCreateCharacter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCreateCharacter::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginServerCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && character_ != nullptr) {
    delete character_;
  }
  character_ = nullptr;
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCreateCharacter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kCreateMessage result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::kCreateMessage>(val));
        } else goto handle_unusual;
        continue;
      // .Protocol.ViewCharacter character = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_character(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCreateCharacter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginServerCreateCharacter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kCreateMessage result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .Protocol.ViewCharacter character = 2;
  if (this->has_character()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::character(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginServerCreateCharacter)
  return target;
}

size_t LoginServerCreateCharacter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginServerCreateCharacter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ViewCharacter character = 2;
  if (this->has_character()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *character_);
  }

  // .Protocol.kCreateMessage result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCreateCharacter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginServerCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCreateCharacter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCreateCharacter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginServerCreateCharacter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginServerCreateCharacter)
    MergeFrom(*source);
  }
}

void LoginServerCreateCharacter::MergeFrom(const LoginServerCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginServerCreateCharacter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_character()) {
    _internal_mutable_character()->::Protocol::ViewCharacter::MergeFrom(from._internal_character());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void LoginServerCreateCharacter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginServerCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCreateCharacter::CopyFrom(const LoginServerCreateCharacter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginServerCreateCharacter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCreateCharacter::IsInitialized() const {
  return true;
}

void LoginServerCreateCharacter::InternalSwap(LoginServerCreateCharacter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginServerCreateCharacter, result_)
      + sizeof(LoginServerCreateCharacter::result_)
      - PROTOBUF_FIELD_OFFSET(LoginServerCreateCharacter, character_)>(
          reinterpret_cast<char*>(&character_),
          reinterpret_cast<char*>(&other->character_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCreateCharacter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[5]);
}

// ===================================================================

class LoginClientCharacterSelect::_Internal {
 public:
};

LoginClientCharacterSelect::LoginClientCharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginClientCharacterSelect)
}
LoginClientCharacterSelect::LoginClientCharacterSelect(const LoginClientCharacterSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  characterid_ = from.characterid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginClientCharacterSelect)
}

void LoginClientCharacterSelect::SharedCtor() {
characterid_ = int64_t{0};
}

LoginClientCharacterSelect::~LoginClientCharacterSelect() {
  // @@protoc_insertion_point(destructor:Protocol.LoginClientCharacterSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginClientCharacterSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoginClientCharacterSelect::ArenaDtor(void* object) {
  LoginClientCharacterSelect* _this = reinterpret_cast< LoginClientCharacterSelect* >(object);
  (void)_this;
}
void LoginClientCharacterSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginClientCharacterSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginClientCharacterSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginClientCharacterSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  characterid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginClientCharacterSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 characterId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          characterid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginClientCharacterSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginClientCharacterSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 characterId = 1;
  if (this->characterid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_characterid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginClientCharacterSelect)
  return target;
}

size_t LoginClientCharacterSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginClientCharacterSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 characterId = 1;
  if (this->characterid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_characterid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginClientCharacterSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginClientCharacterSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginClientCharacterSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginClientCharacterSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginClientCharacterSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginClientCharacterSelect)
    MergeFrom(*source);
  }
}

void LoginClientCharacterSelect::MergeFrom(const LoginClientCharacterSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginClientCharacterSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.characterid() != 0) {
    _internal_set_characterid(from._internal_characterid());
  }
}

void LoginClientCharacterSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginClientCharacterSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginClientCharacterSelect::CopyFrom(const LoginClientCharacterSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginClientCharacterSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginClientCharacterSelect::IsInitialized() const {
  return true;
}

void LoginClientCharacterSelect::InternalSwap(LoginClientCharacterSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(characterid_, other->characterid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginClientCharacterSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[6]);
}

// ===================================================================

class LoginServerCharacterSelect::_Internal {
 public:
};

LoginServerCharacterSelect::LoginServerCharacterSelect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Protocol.LoginServerCharacterSelect)
}
LoginServerCharacterSelect::LoginServerCharacterSelect(const LoginServerCharacterSelect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&auth_) -
    reinterpret_cast<char*>(&result_)) + sizeof(auth_));
  // @@protoc_insertion_point(copy_constructor:Protocol.LoginServerCharacterSelect)
}

void LoginServerCharacterSelect::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&result_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&auth_) -
    reinterpret_cast<char*>(&result_)) + sizeof(auth_));
}

LoginServerCharacterSelect::~LoginServerCharacterSelect() {
  // @@protoc_insertion_point(destructor:Protocol.LoginServerCharacterSelect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoginServerCharacterSelect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoginServerCharacterSelect::ArenaDtor(void* object) {
  LoginServerCharacterSelect* _this = reinterpret_cast< LoginServerCharacterSelect* >(object);
  (void)_this;
}
void LoginServerCharacterSelect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoginServerCharacterSelect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoginServerCharacterSelect::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.LoginServerCharacterSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&auth_) -
      reinterpret_cast<char*>(&result_)) + sizeof(auth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginServerCharacterSelect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.kCharacterSelectMessage result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::kCharacterSelectMessage>(val));
        } else goto handle_unusual;
        continue;
      // string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Protocol.LoginServerCharacterSelect.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 auth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          auth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoginServerCharacterSelect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.LoginServerCharacterSelect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.kCharacterSelectMessage result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string ip = 2;
  if (!this->ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.LoginServerCharacterSelect.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // int32 port = 3;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // int64 auth = 4;
  if (this->auth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_auth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.LoginServerCharacterSelect)
  return target;
}

size_t LoginServerCharacterSelect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.LoginServerCharacterSelect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .Protocol.kCharacterSelectMessage result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // int32 port = 3;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  // int64 auth = 4;
  if (this->auth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_auth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoginServerCharacterSelect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Protocol.LoginServerCharacterSelect)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginServerCharacterSelect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoginServerCharacterSelect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Protocol.LoginServerCharacterSelect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Protocol.LoginServerCharacterSelect)
    MergeFrom(*source);
  }
}

void LoginServerCharacterSelect::MergeFrom(const LoginServerCharacterSelect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Protocol.LoginServerCharacterSelect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.auth() != 0) {
    _internal_set_auth(from._internal_auth());
  }
}

void LoginServerCharacterSelect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Protocol.LoginServerCharacterSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginServerCharacterSelect::CopyFrom(const LoginServerCharacterSelect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.LoginServerCharacterSelect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginServerCharacterSelect::IsInitialized() const {
  return true;
}

void LoginServerCharacterSelect::InternalSwap(LoginServerCharacterSelect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginServerCharacterSelect, auth_)
      + sizeof(LoginServerCharacterSelect::auth_)
      - PROTOBUF_FIELD_OFFSET(LoginServerCharacterSelect, result_)>(
          reinterpret_cast<char*>(&result_),
          reinterpret_cast<char*>(&other->result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginServerCharacterSelect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_login_5fprotocol_2eproto_getter, &descriptor_table_login_5fprotocol_2eproto_once,
      file_level_metadata_login_5fprotocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::LoginClientLogin* Arena::CreateMaybeMessage< ::Protocol::LoginClientLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginClientLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginServerLogin* Arena::CreateMaybeMessage< ::Protocol::LoginServerLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginServerLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginClientCharacterList* Arena::CreateMaybeMessage< ::Protocol::LoginClientCharacterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginClientCharacterList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginServerCharacterList* Arena::CreateMaybeMessage< ::Protocol::LoginServerCharacterList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginServerCharacterList >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginClientCreateCharacter* Arena::CreateMaybeMessage< ::Protocol::LoginClientCreateCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginClientCreateCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginServerCreateCharacter* Arena::CreateMaybeMessage< ::Protocol::LoginServerCreateCharacter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginServerCreateCharacter >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginClientCharacterSelect* Arena::CreateMaybeMessage< ::Protocol::LoginClientCharacterSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginClientCharacterSelect >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::LoginServerCharacterSelect* Arena::CreateMaybeMessage< ::Protocol::LoginServerCharacterSelect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::LoginServerCharacterSelect >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
